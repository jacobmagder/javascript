{
  "Guide": {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide",
    "title": "JavaScript Guide",
    "description": "The JavaScript Guide shows you how to use JavaScript and gives an overview of the language. If you need exhaustive information about a language feature, have a look at the JavaScript reference.\n\nThis Guide is divided into the following chapters.\n\nOverview: Introduction",
    "syntax": [],
    "parameters": [],
    "return_value": "",
    "examples": [],
    "browser_compatibility": {},
    "see_also": [],
    "inheritance": [],
    "properties": [],
    "methods": [],
    "children": [],
    "Grammar and types": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types",
      "title": "Grammar and types",
      "description": "This chapter discusses JavaScript's basic grammar, variable declarations, data types and literals.\n\nJavaScript borrows most of its syntax from Java, C, and C++, but it has also been influenced by Awk, Perl, and Python.\n\nJavaScript is case-sensitive and uses the Unicode character set. For example, the word Fr\u00c3\u00bch (which means \"early\" in German) could be used as a variable name.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Introduction": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Introduction",
      "title": "Introduction",
      "description": "This chapter introduces JavaScript and discusses some of its fundamental concepts.\n\nThis guide assumes you have the following basic background:\n\nThe JavaScript documentation on MDN includes the following:",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Control flow and error handling": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling",
      "title": "Control flow and error handling",
      "description": "JavaScript supports a compact set of statements, specifically\ncontrol flow statements, that you can use to incorporate a great deal of interactivity\nin your application. This chapter provides an overview of these statements.\n\nThe JavaScript reference\ncontains exhaustive details about the statements in this chapter. The semicolon\n(;) character is used to separate statements in JavaScript code.\n\nAny JavaScript expression is also a statement.\nSee Expressions and operators\nfor complete information about expressions.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Expressions and operators": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_operators",
      "title": "Expressions and operators",
      "description": "This chapter describes JavaScript's expressions and operators, including assignment, comparison, arithmetic, bitwise, logical, string, ternary and more.\n\nAt a high level, an expression is a valid unit of code that resolves to a value. There are two types of expressions: those that have side effects (such as assigning values) and those that purely evaluate.\n\nThe expression x = 7 is an example of the first type. This expression uses the = operator to assign the value seven to the variable x. The expression itself evaluates to 7.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Loops and iteration": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration",
      "title": "Loops and iteration",
      "description": "Loops offer a quick and easy way to do something repeatedly. This\nchapter of the JavaScript Guide\nintroduces the different iteration statements available to JavaScript.\n\nYou can think of a loop as a computerized version of the game where you tell someone to\ntake X steps in one direction, then Y steps in another. For example,\nthe idea \"Go five steps to the east\" could be expressed this way as a loop:\n\nThere are many different kinds of loops, but they all essentially do the same thing:\nthey repeat an action some number of times. (Note that it's possible that number could\nbe zero!)",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Numbers and strings": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Numbers_and_strings",
      "title": "Numbers and strings",
      "description": "This chapter introduces the two most fundamental data types in JavaScript: numbers and strings. We will introduce their underlying representations, and functions used to work with and perform calculations on them.\n\nIn JavaScript, numbers are implemented in double-precision 64-bit binary format IEEE 754 (i.e., a number between \u00c2\u00b12^\u00e2\u0088\u00921022 and \u00c2\u00b12^+1023, or about \u00c2\u00b110^\u00e2\u0088\u0092308 to \u00c2\u00b110^+308, with a numeric precision of 53 bits). Integer values up to \u00c2\u00b12^53 \u00e2\u0088\u0092 1 can be represented exactly.\n\nIn addition to being able to represent floating-point numbers, the number type has three symbolic values: Infinity, -Infinity, and NaN (not-a-number).",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Functions": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions",
      "title": "Functions",
      "description": "Functions are one of the fundamental building blocks in JavaScript. A function in JavaScript is similar to a procedure\u00e2\u0080\u0094a set of statements that performs a task or calculates a value, but for a procedure to qualify as a function, it should take some input and return an output where there is some obvious relationship between the input and the output. To use a function, you must define it somewhere in the scope from which you wish to call it.\n\nSee also the exhaustive reference chapter about JavaScript functions to get to know the details.\n\nA function definition (also called a function declaration, or function statement) consists of the function keyword, followed by:",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    }
  },
  "Reference": {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference",
    "title": "JavaScript reference",
    "description": "The JavaScript reference serves as a repository of facts about the JavaScript language. The entire language is described here in detail. As you write JavaScript code, you'll refer to these pages often (thus the title \"JavaScript reference\").\n\nThe JavaScript language is intended to be used within some larger environment, be it a browser, server-side scripts, or similar. For the most part, this reference attempts to be environment-agnostic and does not target a web browser environment.\n\nIf you are new to JavaScript, start with the guide. Once you have a firm grasp of the fundamentals, you can use the reference to get more details on individual objects and language constructs.",
    "syntax": [],
    "parameters": [],
    "return_value": "",
    "examples": [],
    "browser_compatibility": {},
    "see_also": [],
    "inheritance": [],
    "properties": [],
    "methods": [],
    "children": [],
    "Statements": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements",
      "title": "Statements and declarations",
      "description": "JavaScript applications consist of statements with an appropriate syntax. A single statement may span multiple lines. Multiple statements may occur on a single line if each statement is separated by a semicolon. This isn't a keyword, but a group of keywords.\n\nFor an alphabetical listing see the sidebar on the left.\n\nSpecifies the value to be returned by a function.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Functions": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions",
      "title": "Functions",
      "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nGenerally speaking, a function is a \"subprogram\" that can be called by code external (or internal, in the case of recursion) to the function. Like the program itself, a function is composed of a sequence of statements called the function body. Values can be passed to a function as parameters, and the function will return a value.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Classes": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes",
      "title": "Classes",
      "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since March 2016.\n\n* Some parts of this feature may have varying levels of support.\n\nClasses are a template for creating objects. They encapsulate data with code to work on that data. Classes in JS are built on prototypes but also have some syntax and semantics that are unique to classes.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    }
  }
}
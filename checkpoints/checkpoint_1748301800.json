{
  "Guide": {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide",
    "title": "JavaScript Guide",
    "description": "The JavaScript Guide shows you how to use JavaScript and gives an overview of the language. If you need exhaustive information about a language feature, have a look at the JavaScript reference.\n\nThis Guide is divided into the following chapters.\n\nOverview: Introduction",
    "syntax": [],
    "parameters": [],
    "return_value": "",
    "examples": [],
    "browser_compatibility": {},
    "see_also": [],
    "inheritance": [],
    "properties": [],
    "methods": [],
    "children": [],
    "Grammar and types": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types",
      "title": "Grammar and types",
      "description": "This chapter discusses JavaScript's basic grammar, variable declarations, data types and literals.\n\nJavaScript borrows most of its syntax from Java, C, and C++, but it has also been influenced by Awk, Perl, and Python.\n\nJavaScript is case-sensitive and uses the Unicode character set. For example, the word Fr\u00c3\u00bch (which means \"early\" in German) could be used as a variable name.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Introduction": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Introduction",
      "title": "Introduction",
      "description": "This chapter introduces JavaScript and discusses some of its fundamental concepts.\n\nThis guide assumes you have the following basic background:\n\nThe JavaScript documentation on MDN includes the following:",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Control flow and error handling": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling",
      "title": "Control flow and error handling",
      "description": "JavaScript supports a compact set of statements, specifically\ncontrol flow statements, that you can use to incorporate a great deal of interactivity\nin your application. This chapter provides an overview of these statements.\n\nThe JavaScript reference\ncontains exhaustive details about the statements in this chapter. The semicolon\n(;) character is used to separate statements in JavaScript code.\n\nAny JavaScript expression is also a statement.\nSee Expressions and operators\nfor complete information about expressions.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Expressions and operators": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_operators",
      "title": "Expressions and operators",
      "description": "This chapter describes JavaScript's expressions and operators, including assignment, comparison, arithmetic, bitwise, logical, string, ternary and more.\n\nAt a high level, an expression is a valid unit of code that resolves to a value. There are two types of expressions: those that have side effects (such as assigning values) and those that purely evaluate.\n\nThe expression x = 7 is an example of the first type. This expression uses the = operator to assign the value seven to the variable x. The expression itself evaluates to 7.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Loops and iteration": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration",
      "title": "Loops and iteration",
      "description": "Loops offer a quick and easy way to do something repeatedly. This\nchapter of the JavaScript Guide\nintroduces the different iteration statements available to JavaScript.\n\nYou can think of a loop as a computerized version of the game where you tell someone to\ntake X steps in one direction, then Y steps in another. For example,\nthe idea \"Go five steps to the east\" could be expressed this way as a loop:\n\nThere are many different kinds of loops, but they all essentially do the same thing:\nthey repeat an action some number of times. (Note that it's possible that number could\nbe zero!)",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Numbers and strings": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Numbers_and_strings",
      "title": "Numbers and strings",
      "description": "This chapter introduces the two most fundamental data types in JavaScript: numbers and strings. We will introduce their underlying representations, and functions used to work with and perform calculations on them.\n\nIn JavaScript, numbers are implemented in double-precision 64-bit binary format IEEE 754 (i.e., a number between \u00c2\u00b12^\u00e2\u0088\u00921022 and \u00c2\u00b12^+1023, or about \u00c2\u00b110^\u00e2\u0088\u0092308 to \u00c2\u00b110^+308, with a numeric precision of 53 bits). Integer values up to \u00c2\u00b12^53 \u00e2\u0088\u0092 1 can be represented exactly.\n\nIn addition to being able to represent floating-point numbers, the number type has three symbolic values: Infinity, -Infinity, and NaN (not-a-number).",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Functions": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions",
      "title": "Functions",
      "description": "Functions are one of the fundamental building blocks in JavaScript. A function in JavaScript is similar to a procedure\u00e2\u0080\u0094a set of statements that performs a task or calculates a value, but for a procedure to qualify as a function, it should take some input and return an output where there is some obvious relationship between the input and the output. To use a function, you must define it somewhere in the scope from which you wish to call it.\n\nSee also the exhaustive reference chapter about JavaScript functions to get to know the details.\n\nA function definition (also called a function declaration, or function statement) consists of the function keyword, followed by:",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Keyed collections": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Keyed_collections",
      "title": "Keyed collections",
      "description": "This chapter introduces collections of data which are indexed by a key; Map and Set objects contain elements which are iterable in the order of insertion.\n\nA Map object is a key/value map that can iterate its elements in insertion order.\n\nThe following code shows some basic operations with a Map. See also the Map reference page for more examples and the complete API. You can use a for...of loop to return an array of [key, value] for each iteration.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Regular expressions": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions",
      "title": "Regular expressions",
      "description": "Regular expressions are patterns used to match character combinations in strings.\nIn JavaScript, regular expressions are also objects. These patterns are used with the exec() and test() methods of RegExp, and with the match(), matchAll(), replace(), replaceAll(), search(), and split() methods of String.\nThis chapter describes JavaScript regular expressions. It provides a brief overview of each syntax element. For a detailed explanation of each one's semantics, read the regular expressions reference.\n\nYou construct a regular expression in one of two ways:\n\nUsing a regular expression literal, which consists of a pattern enclosed between slashes, as follows:",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Representing dates times": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Representing_dates_times",
      "title": "Representing dates & times",
      "description": "Note:\nThe Date object is now considered legacy and should be avoided in new code. We will update this page with modern alternatives soon.\n\nJavaScript does not have a date data type. However, you can use the Date object and its methods to work with dates and times in your applications. The Date object has a large number of methods for setting, getting, and manipulating dates. It does not have any properties.\n\nJavaScript handles dates similarly to Java. The two languages have many of the same date methods, and both languages store dates as the number of milliseconds since midnight at the beginning of January 1, 1970, UTC, with a Unix Timestamp being the number of seconds since the same instant. The instant at the midnight at the beginning of January 1, 1970, UTC is called the epoch.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Working with objects": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_objects",
      "title": "Working with objects",
      "description": "JavaScript is designed on an object-based paradigm. An object is a collection of properties, and a property is an association between a name (or key) and a value. A property's value can be a function, in which case the property is known as a method.\n\nObjects in JavaScript, just as in many other programming languages, can be compared to objects in real life. In JavaScript, an object is a standalone entity, with properties and type. Compare it with a cup, for example. A cup is an object, with properties. A cup has a color, a design, weight, a material it is made of, etc. The same way, JavaScript objects can have properties, which define their characteristics.\n\nIn addition to objects that are predefined in the browser, you can define your own objects. This chapter describes how to use objects, properties, and methods, and how to create your own objects.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Indexed collections": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections",
      "title": "Indexed collections",
      "description": "This chapter introduces collections of data which are ordered by an index value. This includes arrays and array-like constructs such as Array objects and TypedArray objects.\n\nAn array is an ordered list of values that you refer to with a name and an index.\n\nFor example, consider an array called emp, which contains employees' names indexed by their numerical employee number. So emp[0] would be employee number zero, emp[1] employee number one, and so on.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Typed arrays": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Typed_arrays",
      "title": "JavaScript typed arrays",
      "description": "JavaScript typed arrays are array-like objects that provide a mechanism for reading and writing raw binary data in memory buffers.\n\nTyped arrays are not intended to replace arrays for any kind of functionality. Instead, they provide developers with a familiar interface for manipulating binary data. This is useful when interacting with platform features, such as audio and video manipulation, access to raw data using WebSockets, and so forth. Each entry in a JavaScript typed array is a raw binary value in one of a number of supported formats, from 8-bit integers to 64-bit floating-point numbers.\n\nTyped array objects share many of the same methods as arrays with similar semantics. However, typed arrays are not to be confused with normal arrays, as calling Array.isArray() on a typed array returns false. Moreover, not all methods available for normal arrays are supported by typed arrays (e.g., push and pop).",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Iterators and generators": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_generators",
      "title": "Iterators and generators",
      "description": "Iterators and Generators bring the concept of iteration directly into the core language and provide a mechanism for customizing the behavior of for...of loops.\n\nFor details, see also:\n\nIn JavaScript an iterator is an object which defines a sequence and potentially a return value upon its termination.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Internationalization": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Internationalization",
      "title": "Internationalization",
      "description": "The Intl object is the namespace for the ECMAScript Internationalization API, which provides a wide range of locale- and culture-sensitive data and operations.\n\nThe Intl object is very use-case driven. It provides a separate object for each use case that requires locale-specific logic. Currently, it provides the following functionalities:\n\nMost Intl APIs share a similar design (Intl.Locale is the only exception). You start by constructing an instance with the desired locale and options. This defines a set of rules for the desired operation (formatting, collation, segmentation, etc.). Then, when you call the method on the instance, such as format(), compare(), or segment(), the object applies the specified rule to the passed data.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Using classes": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_classes",
      "title": "Using classes",
      "description": "JavaScript is a prototype-based language \u00e2\u0080\u0094 an object's behaviors are specified by its own properties and its prototype's properties. However, with the addition of classes, the creation of hierarchies of objects and the inheritance of properties and their values are much more in line with other object-oriented languages such as Java. In this section, we will demonstrate how objects can be created from classes.\n\nIn many other languages, classes, or constructors, are clearly distinguished from objects, or instances. In JavaScript, classes are mainly an abstraction over the existing prototypical inheritance mechanism \u00e2\u0080\u0094 all patterns are convertible to prototype-based inheritance. Classes themselves are normal JavaScript values as well, and have their own prototype chains. In fact, most plain JavaScript functions can be used as constructors \u00e2\u0080\u0094 you use the new operator with a constructor function to create a new object.\n\nWe will be playing with the well-abstracted class model in this tutorial, and discuss what semantics classes offer. If you want to dive deep into the underlying prototype system, you can read the Inheritance and the prototype chain guide.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Using promises": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises",
      "title": "Using promises",
      "description": "A Promise is an object representing the eventual completion or failure of an asynchronous operation. Since most people are consumers of already-created promises, this guide will explain consumption of returned promises before explaining how to create them.\n\nEssentially, a promise is a returned object to which you attach callbacks, instead of passing callbacks into a function. Imagine a function, createAudioFileAsync(), which asynchronously generates a sound file given a configuration record and two callback functions: one called if the audio file is successfully created, and the other called if an error occurs.\n\nHere's some code that uses createAudioFileAsync():",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Enumerability and ownership of properties": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Enumerability_and_ownership_of_properties",
      "title": "Enumerability and ownership of properties",
      "description": "Every property in JavaScript objects can be classified by three factors:\n\nEnumerable properties are those properties whose internal enumerable flag is set to true, which is the default for properties created via simple assignment or via a property initializer. Properties defined via Object.defineProperty and such are not enumerable by default. Most iteration means (such as for...in loops and Object.keys) only visit enumerable keys.\n\nOwnership of properties is determined by whether the property belongs to the object directly and not to its prototype chain.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Modules": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules",
      "title": "JavaScript modules",
      "description": "This guide gives you all you need to get started with JavaScript module syntax.\n\nJavaScript programs started off pretty small \u00e2\u0080\u0094 most of its usage in the early days was to do isolated scripting tasks, providing a bit of interactivity to your web pages where needed, so large scripts were generally not needed. Fast forward a few years and we now have complete applications being run in browsers with a lot of JavaScript, as well as JavaScript being used in other contexts (Node.js, for example).\n\nComplex projects necessitate a mechanism for splitting JavaScript programs into separate modules that can be imported when needed. Node.js has had this ability for a long time, and there are a number of JavaScript libraries and frameworks that enable module usage (for example, other CommonJS and AMD-based module systems like RequireJS, webpack, and Babel).",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Data structures": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Data_structures",
      "title": "JavaScript data types and data structures",
      "description": "Programming languages all have built-in data structures, but these often differ from one language to another. This article attempts to list the built-in data structures available in JavaScript and what properties they have. These can be used to build other data structures.\n\nThe language overview offers a similar summary of the common data types, but with more comparisons to other languages.\n\nJavaScript is a dynamic language with dynamic types. Variables in JavaScript are not directly associated with any particular value type, and any variable can be assigned (and re-assigned) values of all types:",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Equality comparisons and sameness": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Equality_comparisons_and_sameness",
      "title": "Equality comparisons and sameness",
      "description": "JavaScript provides three different value-comparison operations:\n\nWhich operation you choose depends on what sort of comparison you are looking to perform. Briefly:\n\nThey correspond to three of four equality algorithms in JavaScript:",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Language overview": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Language_overview",
      "title": "JavaScript language overview",
      "description": "JavaScript is a multi-paradigm, dynamic language with types and operators, standard built-in objects, and methods. Its syntax is based on the Java and C languages \u00e2\u0080\u0094 many structures from those languages apply to JavaScript as well. JavaScript supports object-oriented programming with object prototypes and classes. It also supports functional programming since functions are first-class objects that can be easily created via expressions and passed around like any other object.\n\nThis page serves as a quick overview of various JavaScript language features, written for readers with background in other languages, such as C or Java.\n\nLet's start off by looking at the building blocks of any language: the types. JavaScript programs manipulate values, and those values all belong to a type. JavaScript offers seven primitive types:",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Inheritance and the prototype chain": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain",
      "title": "Inheritance and the prototype chain",
      "description": "In programming, inheritance refers to passing down characteristics from a parent to a child so that a new piece of code can reuse and build upon the features of an existing one. JavaScript implements inheritance by using objects. Each object has an internal link to another object called its prototype. That prototype object has a prototype of its own, and so on until an object is reached with null as its prototype. By definition, null has no prototype and acts as the final link in this prototype chain. It is possible to mutate any member of the prototype chain or even swap out the prototype at runtime, so concepts like static dispatching do not exist in JavaScript.\n\nJavaScript is a bit confusing for developers experienced in class-based languages (like Java or C++), as it is dynamic and does not have static types. While this confusion is often considered to be one of JavaScript's weaknesses, the prototypal inheritance model itself is, in fact, more powerful than the classic model. It is, for example, fairly trivial to build a classic model on top of a prototypal model \u00e2\u0080\u0094 which is how classes are implemented.\n\nAlthough classes are now widely adopted and have become a new paradigm in JavaScript, classes do not bring a new inheritance pattern. While classes abstract most of the prototypal mechanism away, understanding how prototypes work under the hood is still useful.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Closures": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Closures",
      "title": "Closures",
      "description": "A closure is the combination of a function bundled together (enclosed) with references to its surrounding state (the lexical environment). In other words, a closure gives a function access to its outer scope. In JavaScript, closures are created every time a function is created, at function creation time.\n\nConsider the following example code:\n\ninit() creates a local variable called name and a function called displayName(). The displayName() function is an inner function that is defined inside init() and is available only within the body of the init() function. Note that the displayName() function has no local variables of its own. However, since inner functions have access to the variables of outer scopes, displayName() can access the variable name declared in the parent function, init().",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Meta programming": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Meta_programming",
      "title": "Meta programming",
      "description": "The Proxy and Reflect objects allow you to intercept and define custom behavior for fundamental language operations (e.g., property lookup, assignment, enumeration, function invocation, etc.). With the help of these two objects you are able to program at the meta level of JavaScript.\n\nProxy objects allow you to intercept certain operations and to implement custom behaviors.\n\nFor example, getting a property on an object:",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Memory management": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Memory_management",
      "title": "Memory management",
      "description": "Low-level languages like C, have manual memory management primitives such as malloc() and free(). In contrast, JavaScript automatically allocates memory when objects are created and frees it when they are not used anymore (garbage collection). This automaticity is a potential source of confusion: it can give developers the false impression that they don't need to worry about memory management.\n\nRegardless of the programming language, the memory life cycle is pretty much always the same:\n\nThe second part is explicit in all languages. The first and last parts are explicit in low-level languages but are mostly implicit in high-level languages like JavaScript.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    }
  },
  "Reference": {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference",
    "title": "JavaScript reference",
    "description": "The JavaScript reference serves as a repository of facts about the JavaScript language. The entire language is described here in detail. As you write JavaScript code, you'll refer to these pages often (thus the title \"JavaScript reference\").\n\nThe JavaScript language is intended to be used within some larger environment, be it a browser, server-side scripts, or similar. For the most part, this reference attempts to be environment-agnostic and does not target a web browser environment.\n\nIf you are new to JavaScript, start with the guide. Once you have a firm grasp of the fundamentals, you can use the reference to get more details on individual objects and language constructs.",
    "syntax": [],
    "parameters": [],
    "return_value": "",
    "examples": [],
    "browser_compatibility": {},
    "see_also": [],
    "inheritance": [],
    "properties": [],
    "methods": [],
    "children": [],
    "Statements": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements",
      "title": "Statements and declarations",
      "description": "JavaScript applications consist of statements with an appropriate syntax. A single statement may span multiple lines. Multiple statements may occur on a single line if each statement is separated by a semicolon. This isn't a keyword, but a group of keywords.\n\nFor an alphabetical listing see the sidebar on the left.\n\nSpecifies the value to be returned by a function.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Functions": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions",
      "title": "Functions",
      "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nGenerally speaking, a function is a \"subprogram\" that can be called by code external (or internal, in the case of recursion) to the function. Like the program itself, a function is composed of a sequence of statements called the function body. Values can be passed to a function as parameters, and the function will return a value.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Classes": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes",
      "title": "Classes",
      "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since March 2016.\n\n* Some parts of this feature may have varying levels of support.\n\nClasses are a template for creating objects. They encapsulate data with code to work on that data. Classes in JS are built on prototypes but also have some syntax and semantics that are unique to classes.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Global Objects": {
      "AggregateError": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AggregateError",
        "title": "AggregateError",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2020.\n\n* Some parts of this feature may have varying levels of support.\n\nThe AggregateError object represents an error when several errors need to be wrapped in a single error. It is thrown when multiple errors need to be reported by an operation, for example by Promise.any(), when all promises passed to it reject.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "AsyncGenerator": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator",
        "title": "AsyncGenerator",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since January 2020.\n\nThe AsyncGenerator object is returned by an async generator function and it conforms to both the async iterable protocol and the async iterator protocol.\n\nAsync generator methods always yield Promise objects.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "AsyncGeneratorFunction": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGeneratorFunction",
        "title": "AsyncGeneratorFunction",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since January 2020.\n\nThe AsyncGeneratorFunction object provides methods for async generator functions. In JavaScript, every async generator function is actually an AsyncGeneratorFunction object.\n\nNote that AsyncGeneratorFunction is not a global object. It can be obtained with the following code:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Array": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
        "title": "Array",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nThe Array object, as with arrays in other programming languages, enables storing a collection of multiple items under a single variable name, and has members for performing common array operations.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "AsyncFunction": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction",
        "title": "AsyncFunction",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since April 2017.\n\nThe AsyncFunction object provides methods for async functions. In JavaScript, every async function is actually an AsyncFunction object.\n\nNote that AsyncFunction is not a global object. It can be obtained with the following code:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "ArrayBuffer": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
        "title": "ArrayBuffer",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nThe ArrayBuffer object is used to represent a generic raw binary data buffer.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      }
    }
  }
}
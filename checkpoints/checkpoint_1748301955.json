{
  "Guide": {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide",
    "title": "JavaScript Guide",
    "description": "The JavaScript Guide shows you how to use JavaScript and gives an overview of the language. If you need exhaustive information about a language feature, have a look at the JavaScript reference.\n\nThis Guide is divided into the following chapters.\n\nOverview: Introduction",
    "syntax": [],
    "parameters": [],
    "return_value": "",
    "examples": [],
    "browser_compatibility": {},
    "see_also": [],
    "inheritance": [],
    "properties": [],
    "methods": [],
    "children": [],
    "Grammar and types": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types",
      "title": "Grammar and types",
      "description": "This chapter discusses JavaScript's basic grammar, variable declarations, data types and literals.\n\nJavaScript borrows most of its syntax from Java, C, and C++, but it has also been influenced by Awk, Perl, and Python.\n\nJavaScript is case-sensitive and uses the Unicode character set. For example, the word Fr\u00c3\u00bch (which means \"early\" in German) could be used as a variable name.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Introduction": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Introduction",
      "title": "Introduction",
      "description": "This chapter introduces JavaScript and discusses some of its fundamental concepts.\n\nThis guide assumes you have the following basic background:\n\nThe JavaScript documentation on MDN includes the following:",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Control flow and error handling": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling",
      "title": "Control flow and error handling",
      "description": "JavaScript supports a compact set of statements, specifically\ncontrol flow statements, that you can use to incorporate a great deal of interactivity\nin your application. This chapter provides an overview of these statements.\n\nThe JavaScript reference\ncontains exhaustive details about the statements in this chapter. The semicolon\n(;) character is used to separate statements in JavaScript code.\n\nAny JavaScript expression is also a statement.\nSee Expressions and operators\nfor complete information about expressions.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Expressions and operators": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_operators",
      "title": "Expressions and operators",
      "description": "This chapter describes JavaScript's expressions and operators, including assignment, comparison, arithmetic, bitwise, logical, string, ternary and more.\n\nAt a high level, an expression is a valid unit of code that resolves to a value. There are two types of expressions: those that have side effects (such as assigning values) and those that purely evaluate.\n\nThe expression x = 7 is an example of the first type. This expression uses the = operator to assign the value seven to the variable x. The expression itself evaluates to 7.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Loops and iteration": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration",
      "title": "Loops and iteration",
      "description": "Loops offer a quick and easy way to do something repeatedly. This\nchapter of the JavaScript Guide\nintroduces the different iteration statements available to JavaScript.\n\nYou can think of a loop as a computerized version of the game where you tell someone to\ntake X steps in one direction, then Y steps in another. For example,\nthe idea \"Go five steps to the east\" could be expressed this way as a loop:\n\nThere are many different kinds of loops, but they all essentially do the same thing:\nthey repeat an action some number of times. (Note that it's possible that number could\nbe zero!)",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Numbers and strings": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Numbers_and_strings",
      "title": "Numbers and strings",
      "description": "This chapter introduces the two most fundamental data types in JavaScript: numbers and strings. We will introduce their underlying representations, and functions used to work with and perform calculations on them.\n\nIn JavaScript, numbers are implemented in double-precision 64-bit binary format IEEE 754 (i.e., a number between \u00c2\u00b12^\u00e2\u0088\u00921022 and \u00c2\u00b12^+1023, or about \u00c2\u00b110^\u00e2\u0088\u0092308 to \u00c2\u00b110^+308, with a numeric precision of 53 bits). Integer values up to \u00c2\u00b12^53 \u00e2\u0088\u0092 1 can be represented exactly.\n\nIn addition to being able to represent floating-point numbers, the number type has three symbolic values: Infinity, -Infinity, and NaN (not-a-number).",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Functions": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions",
      "title": "Functions",
      "description": "Functions are one of the fundamental building blocks in JavaScript. A function in JavaScript is similar to a procedure\u00e2\u0080\u0094a set of statements that performs a task or calculates a value, but for a procedure to qualify as a function, it should take some input and return an output where there is some obvious relationship between the input and the output. To use a function, you must define it somewhere in the scope from which you wish to call it.\n\nSee also the exhaustive reference chapter about JavaScript functions to get to know the details.\n\nA function definition (also called a function declaration, or function statement) consists of the function keyword, followed by:",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Keyed collections": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Keyed_collections",
      "title": "Keyed collections",
      "description": "This chapter introduces collections of data which are indexed by a key; Map and Set objects contain elements which are iterable in the order of insertion.\n\nA Map object is a key/value map that can iterate its elements in insertion order.\n\nThe following code shows some basic operations with a Map. See also the Map reference page for more examples and the complete API. You can use a for...of loop to return an array of [key, value] for each iteration.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Regular expressions": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions",
      "title": "Regular expressions",
      "description": "Regular expressions are patterns used to match character combinations in strings.\nIn JavaScript, regular expressions are also objects. These patterns are used with the exec() and test() methods of RegExp, and with the match(), matchAll(), replace(), replaceAll(), search(), and split() methods of String.\nThis chapter describes JavaScript regular expressions. It provides a brief overview of each syntax element. For a detailed explanation of each one's semantics, read the regular expressions reference.\n\nYou construct a regular expression in one of two ways:\n\nUsing a regular expression literal, which consists of a pattern enclosed between slashes, as follows:",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Representing dates times": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Representing_dates_times",
      "title": "Representing dates & times",
      "description": "Note:\nThe Date object is now considered legacy and should be avoided in new code. We will update this page with modern alternatives soon.\n\nJavaScript does not have a date data type. However, you can use the Date object and its methods to work with dates and times in your applications. The Date object has a large number of methods for setting, getting, and manipulating dates. It does not have any properties.\n\nJavaScript handles dates similarly to Java. The two languages have many of the same date methods, and both languages store dates as the number of milliseconds since midnight at the beginning of January 1, 1970, UTC, with a Unix Timestamp being the number of seconds since the same instant. The instant at the midnight at the beginning of January 1, 1970, UTC is called the epoch.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Working with objects": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_objects",
      "title": "Working with objects",
      "description": "JavaScript is designed on an object-based paradigm. An object is a collection of properties, and a property is an association between a name (or key) and a value. A property's value can be a function, in which case the property is known as a method.\n\nObjects in JavaScript, just as in many other programming languages, can be compared to objects in real life. In JavaScript, an object is a standalone entity, with properties and type. Compare it with a cup, for example. A cup is an object, with properties. A cup has a color, a design, weight, a material it is made of, etc. The same way, JavaScript objects can have properties, which define their characteristics.\n\nIn addition to objects that are predefined in the browser, you can define your own objects. This chapter describes how to use objects, properties, and methods, and how to create your own objects.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Indexed collections": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections",
      "title": "Indexed collections",
      "description": "This chapter introduces collections of data which are ordered by an index value. This includes arrays and array-like constructs such as Array objects and TypedArray objects.\n\nAn array is an ordered list of values that you refer to with a name and an index.\n\nFor example, consider an array called emp, which contains employees' names indexed by their numerical employee number. So emp[0] would be employee number zero, emp[1] employee number one, and so on.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Typed arrays": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Typed_arrays",
      "title": "JavaScript typed arrays",
      "description": "JavaScript typed arrays are array-like objects that provide a mechanism for reading and writing raw binary data in memory buffers.\n\nTyped arrays are not intended to replace arrays for any kind of functionality. Instead, they provide developers with a familiar interface for manipulating binary data. This is useful when interacting with platform features, such as audio and video manipulation, access to raw data using WebSockets, and so forth. Each entry in a JavaScript typed array is a raw binary value in one of a number of supported formats, from 8-bit integers to 64-bit floating-point numbers.\n\nTyped array objects share many of the same methods as arrays with similar semantics. However, typed arrays are not to be confused with normal arrays, as calling Array.isArray() on a typed array returns false. Moreover, not all methods available for normal arrays are supported by typed arrays (e.g., push and pop).",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Iterators and generators": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_generators",
      "title": "Iterators and generators",
      "description": "Iterators and Generators bring the concept of iteration directly into the core language and provide a mechanism for customizing the behavior of for...of loops.\n\nFor details, see also:\n\nIn JavaScript an iterator is an object which defines a sequence and potentially a return value upon its termination.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Internationalization": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Internationalization",
      "title": "Internationalization",
      "description": "The Intl object is the namespace for the ECMAScript Internationalization API, which provides a wide range of locale- and culture-sensitive data and operations.\n\nThe Intl object is very use-case driven. It provides a separate object for each use case that requires locale-specific logic. Currently, it provides the following functionalities:\n\nMost Intl APIs share a similar design (Intl.Locale is the only exception). You start by constructing an instance with the desired locale and options. This defines a set of rules for the desired operation (formatting, collation, segmentation, etc.). Then, when you call the method on the instance, such as format(), compare(), or segment(), the object applies the specified rule to the passed data.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Using classes": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_classes",
      "title": "Using classes",
      "description": "JavaScript is a prototype-based language \u00e2\u0080\u0094 an object's behaviors are specified by its own properties and its prototype's properties. However, with the addition of classes, the creation of hierarchies of objects and the inheritance of properties and their values are much more in line with other object-oriented languages such as Java. In this section, we will demonstrate how objects can be created from classes.\n\nIn many other languages, classes, or constructors, are clearly distinguished from objects, or instances. In JavaScript, classes are mainly an abstraction over the existing prototypical inheritance mechanism \u00e2\u0080\u0094 all patterns are convertible to prototype-based inheritance. Classes themselves are normal JavaScript values as well, and have their own prototype chains. In fact, most plain JavaScript functions can be used as constructors \u00e2\u0080\u0094 you use the new operator with a constructor function to create a new object.\n\nWe will be playing with the well-abstracted class model in this tutorial, and discuss what semantics classes offer. If you want to dive deep into the underlying prototype system, you can read the Inheritance and the prototype chain guide.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Using promises": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises",
      "title": "Using promises",
      "description": "A Promise is an object representing the eventual completion or failure of an asynchronous operation. Since most people are consumers of already-created promises, this guide will explain consumption of returned promises before explaining how to create them.\n\nEssentially, a promise is a returned object to which you attach callbacks, instead of passing callbacks into a function. Imagine a function, createAudioFileAsync(), which asynchronously generates a sound file given a configuration record and two callback functions: one called if the audio file is successfully created, and the other called if an error occurs.\n\nHere's some code that uses createAudioFileAsync():",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Enumerability and ownership of properties": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Enumerability_and_ownership_of_properties",
      "title": "Enumerability and ownership of properties",
      "description": "Every property in JavaScript objects can be classified by three factors:\n\nEnumerable properties are those properties whose internal enumerable flag is set to true, which is the default for properties created via simple assignment or via a property initializer. Properties defined via Object.defineProperty and such are not enumerable by default. Most iteration means (such as for...in loops and Object.keys) only visit enumerable keys.\n\nOwnership of properties is determined by whether the property belongs to the object directly and not to its prototype chain.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Modules": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules",
      "title": "JavaScript modules",
      "description": "This guide gives you all you need to get started with JavaScript module syntax.\n\nJavaScript programs started off pretty small \u00e2\u0080\u0094 most of its usage in the early days was to do isolated scripting tasks, providing a bit of interactivity to your web pages where needed, so large scripts were generally not needed. Fast forward a few years and we now have complete applications being run in browsers with a lot of JavaScript, as well as JavaScript being used in other contexts (Node.js, for example).\n\nComplex projects necessitate a mechanism for splitting JavaScript programs into separate modules that can be imported when needed. Node.js has had this ability for a long time, and there are a number of JavaScript libraries and frameworks that enable module usage (for example, other CommonJS and AMD-based module systems like RequireJS, webpack, and Babel).",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Data structures": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Data_structures",
      "title": "JavaScript data types and data structures",
      "description": "Programming languages all have built-in data structures, but these often differ from one language to another. This article attempts to list the built-in data structures available in JavaScript and what properties they have. These can be used to build other data structures.\n\nThe language overview offers a similar summary of the common data types, but with more comparisons to other languages.\n\nJavaScript is a dynamic language with dynamic types. Variables in JavaScript are not directly associated with any particular value type, and any variable can be assigned (and re-assigned) values of all types:",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Equality comparisons and sameness": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Equality_comparisons_and_sameness",
      "title": "Equality comparisons and sameness",
      "description": "JavaScript provides three different value-comparison operations:\n\nWhich operation you choose depends on what sort of comparison you are looking to perform. Briefly:\n\nThey correspond to three of four equality algorithms in JavaScript:",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Language overview": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Language_overview",
      "title": "JavaScript language overview",
      "description": "JavaScript is a multi-paradigm, dynamic language with types and operators, standard built-in objects, and methods. Its syntax is based on the Java and C languages \u00e2\u0080\u0094 many structures from those languages apply to JavaScript as well. JavaScript supports object-oriented programming with object prototypes and classes. It also supports functional programming since functions are first-class objects that can be easily created via expressions and passed around like any other object.\n\nThis page serves as a quick overview of various JavaScript language features, written for readers with background in other languages, such as C or Java.\n\nLet's start off by looking at the building blocks of any language: the types. JavaScript programs manipulate values, and those values all belong to a type. JavaScript offers seven primitive types:",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Inheritance and the prototype chain": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain",
      "title": "Inheritance and the prototype chain",
      "description": "In programming, inheritance refers to passing down characteristics from a parent to a child so that a new piece of code can reuse and build upon the features of an existing one. JavaScript implements inheritance by using objects. Each object has an internal link to another object called its prototype. That prototype object has a prototype of its own, and so on until an object is reached with null as its prototype. By definition, null has no prototype and acts as the final link in this prototype chain. It is possible to mutate any member of the prototype chain or even swap out the prototype at runtime, so concepts like static dispatching do not exist in JavaScript.\n\nJavaScript is a bit confusing for developers experienced in class-based languages (like Java or C++), as it is dynamic and does not have static types. While this confusion is often considered to be one of JavaScript's weaknesses, the prototypal inheritance model itself is, in fact, more powerful than the classic model. It is, for example, fairly trivial to build a classic model on top of a prototypal model \u00e2\u0080\u0094 which is how classes are implemented.\n\nAlthough classes are now widely adopted and have become a new paradigm in JavaScript, classes do not bring a new inheritance pattern. While classes abstract most of the prototypal mechanism away, understanding how prototypes work under the hood is still useful.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Closures": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Closures",
      "title": "Closures",
      "description": "A closure is the combination of a function bundled together (enclosed) with references to its surrounding state (the lexical environment). In other words, a closure gives a function access to its outer scope. In JavaScript, closures are created every time a function is created, at function creation time.\n\nConsider the following example code:\n\ninit() creates a local variable called name and a function called displayName(). The displayName() function is an inner function that is defined inside init() and is available only within the body of the init() function. Note that the displayName() function has no local variables of its own. However, since inner functions have access to the variables of outer scopes, displayName() can access the variable name declared in the parent function, init().",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Meta programming": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Meta_programming",
      "title": "Meta programming",
      "description": "The Proxy and Reflect objects allow you to intercept and define custom behavior for fundamental language operations (e.g., property lookup, assignment, enumeration, function invocation, etc.). With the help of these two objects you are able to program at the meta level of JavaScript.\n\nProxy objects allow you to intercept certain operations and to implement custom behaviors.\n\nFor example, getting a property on an object:",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Memory management": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Memory_management",
      "title": "Memory management",
      "description": "Low-level languages like C, have manual memory management primitives such as malloc() and free(). In contrast, JavaScript automatically allocates memory when objects are created and frees it when they are not used anymore (garbage collection). This automaticity is a potential source of confusion: it can give developers the false impression that they don't need to worry about memory management.\n\nRegardless of the programming language, the memory life cycle is pretty much always the same:\n\nThe second part is explicit in all languages. The first and last parts are explicit in low-level languages but are mostly implicit in high-level languages like JavaScript.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    }
  },
  "Reference": {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference",
    "title": "JavaScript reference",
    "description": "The JavaScript reference serves as a repository of facts about the JavaScript language. The entire language is described here in detail. As you write JavaScript code, you'll refer to these pages often (thus the title \"JavaScript reference\").\n\nThe JavaScript language is intended to be used within some larger environment, be it a browser, server-side scripts, or similar. For the most part, this reference attempts to be environment-agnostic and does not target a web browser environment.\n\nIf you are new to JavaScript, start with the guide. Once you have a firm grasp of the fundamentals, you can use the reference to get more details on individual objects and language constructs.",
    "syntax": [],
    "parameters": [],
    "return_value": "",
    "examples": [],
    "browser_compatibility": {},
    "see_also": [],
    "inheritance": [],
    "properties": [],
    "methods": [],
    "children": [],
    "Statements": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements",
      "title": "Statements and declarations",
      "description": "JavaScript applications consist of statements with an appropriate syntax. A single statement may span multiple lines. Multiple statements may occur on a single line if each statement is separated by a semicolon. This isn't a keyword, but a group of keywords.\n\nFor an alphabetical listing see the sidebar on the left.\n\nSpecifies the value to be returned by a function.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Functions": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions",
      "title": "Functions",
      "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nGenerally speaking, a function is a \"subprogram\" that can be called by code external (or internal, in the case of recursion) to the function. Like the program itself, a function is composed of a sequence of statements called the function body. Values can be passed to a function as parameters, and the function will return a value.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Classes": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes",
      "title": "Classes",
      "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since March 2016.\n\n* Some parts of this feature may have varying levels of support.\n\nClasses are a template for creating objects. They encapsulate data with code to work on that data. Classes in JS are built on prototypes but also have some syntax and semantics that are unique to classes.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Global Objects": {
      "AggregateError": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AggregateError",
        "title": "AggregateError",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2020.\n\n* Some parts of this feature may have varying levels of support.\n\nThe AggregateError object represents an error when several errors need to be wrapped in a single error. It is thrown when multiple errors need to be reported by an operation, for example by Promise.any(), when all promises passed to it reject.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "AsyncGenerator": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator",
        "title": "AsyncGenerator",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since January 2020.\n\nThe AsyncGenerator object is returned by an async generator function and it conforms to both the async iterable protocol and the async iterator protocol.\n\nAsync generator methods always yield Promise objects.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "AsyncGeneratorFunction": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGeneratorFunction",
        "title": "AsyncGeneratorFunction",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since January 2020.\n\nThe AsyncGeneratorFunction object provides methods for async generator functions. In JavaScript, every async generator function is actually an AsyncGeneratorFunction object.\n\nNote that AsyncGeneratorFunction is not a global object. It can be obtained with the following code:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Array": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
        "title": "Array",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nThe Array object, as with arrays in other programming languages, enables storing a collection of multiple items under a single variable name, and has members for performing common array operations.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "AsyncFunction": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction",
        "title": "AsyncFunction",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since April 2017.\n\nThe AsyncFunction object provides methods for async functions. In JavaScript, every async function is actually an AsyncFunction object.\n\nNote that AsyncFunction is not a global object. It can be obtained with the following code:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "ArrayBuffer": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
        "title": "ArrayBuffer",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nThe ArrayBuffer object is used to represent a generic raw binary data buffer.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Atomics": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics",
        "title": "Atomics",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since December 2021.\n\n* Some parts of this feature may have varying levels of support.\n\nThe Atomics namespace object contains static methods for carrying out atomic operations. They are used with SharedArrayBuffer and ArrayBuffer objects.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "AsyncIterator": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncIterator",
        "title": "AsyncIterator",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since January 2020.\n\nAn AsyncIterator object is an object that conforms to the async iterator protocol by providing a next() method that returns a promise fulfilling to an iterator result object. The AsyncIterator.prototype object is a hidden global object that all built-in async iterators inherit from. It provides an [Symbol.asyncIterator]() method that returns the async iterator object itself, making the async iterator also async iterable.\n\nNote that AsyncIterator is not a global object, although it will be in the future with the async iterator helpers proposal. The AsyncIterator.prototype object shared by all built-in async iterators can be obtained with the following code:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "BigInt": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt",
        "title": "BigInt",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2020.\n\nBigInt values represent integer values which are too high or too low to be represented by the number primitive.\n\nA BigInt value, also sometimes just called a BigInt, is a bigint primitive, created by appending n to the end of an integer literal, or by calling the BigInt() function (without the new operator) and giving it an integer value or string value.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "BigInt64Array": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array",
        "title": "BigInt64Array",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2021.\n\nThe BigInt64Array typed array represents an array of 64-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0n unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n\nBigInt64Array is a subclass of the hidden TypedArray class.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "BigUint64Array": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array",
        "title": "BigUint64Array",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2021.\n\nThe BigUint64Array typed array represents an array of 64-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0n unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n\nBigUint64Array is a subclass of the hidden TypedArray class.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "decodeURIComponent": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent",
        "title": "decodeURIComponent()",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe decodeURIComponent() function decodes a Uniform Resource Identifier (URI) component previously created by encodeURIComponent() or by a similar routine.\n\nAn encoded component of a Uniform Resource Identifier.",
        "syntax": [],
        "parameters": [
          {
            "name": "encodedURI",
            "description": "An encoded component of a Uniform Resource Identifier."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Date": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
        "title": "Date",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nJavaScript Date objects represent a single moment in time in a platform-independent format. Date objects encapsulate an integral number that represents milliseconds since the midnight at the beginning of January 1, 1970, UTC (the epoch).",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "DataView": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
        "title": "DataView",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nThe DataView view provides a low-level interface for reading and writing multiple number types in a binary ArrayBuffer, without having to care about the platform's endianness.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "decodeURI": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURI",
        "title": "decodeURI()",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe decodeURI() function decodes a Uniform Resource Identifier (URI) previously created by encodeURI() or a similar routine.\n\nA complete, encoded Uniform Resource Identifier.",
        "syntax": [],
        "parameters": [
          {
            "name": "encodedURI",
            "description": "A complete, encoded Uniform Resource Identifier."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Boolean": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
        "title": "Boolean",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nBoolean values can be one of two values: true or false, representing the truth value of a logical proposition.\n\nBoolean values are typically produced by relational operators, equality operators, and logical NOT (!). They can also be produced by functions that represent conditions, such as Array.isArray(). Note that binary logical operators such as && and || return the values of the operands, which may or may not be boolean values.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "escape": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/escape",
        "title": "escape()",
        "description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nNote: escape() is a non-standard function implemented by browsers and was only standardized for cross-engine compatibility. It is not required to be implemented by all JavaScript engines and may not work everywhere. Use encodeURIComponent() or encodeURI() if possible.\n\nThe escape() function computes a new string in which certain characters have been replaced by hexadecimal escape sequences.",
        "syntax": [],
        "parameters": [
          {
            "name": "str",
            "description": "A string to be encoded."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "eval": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval",
        "title": "eval()",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nWarning:\nExecuting JavaScript from a string is an enormous security risk. It is far too easy for a bad actor to run arbitrary code when you use eval(). See Never use direct eval()!, below.\n\nThe eval() function evaluates JavaScript code represented as a string and returns its completion value. The source is parsed as a script.",
        "syntax": [],
        "parameters": [
          {
            "name": "script",
            "description": "A string representing a JavaScript expression, statement, or sequence of statements. The expression can include variables and properties of existing objects. It will be parsed as a script, so import declarations (which can only exist in modules) are not allowed."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Error": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
        "title": "Error",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nError objects are thrown when runtime errors occur. The Error object can also be used as a base object for user-defined exceptions. See below for standard built-in error types.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "encodeURIComponent": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent",
        "title": "encodeURIComponent()",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe encodeURIComponent() function encodes a URI by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two surrogate characters). Compared to encodeURI(), this function encodes more characters, including those that are part of the URI syntax.\n\nA string to be encoded as a URI component (a path, query string, fragment, etc.). Other values are converted to strings.",
        "syntax": [],
        "parameters": [
          {
            "name": "uriComponent",
            "description": "A string to be encoded as a URI component (a path, query string, fragment, etc.). Other values are converted to strings."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "encodeURI": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI",
        "title": "encodeURI()",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe encodeURI() function encodes a URI by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two surrogate characters). Compared to encodeURIComponent(), this function encodes fewer characters, preserving those that are part of the URI syntax.\n\nA string to be encoded as a URI.",
        "syntax": [],
        "parameters": [
          {
            "name": "uri",
            "description": "A string to be encoded as a URI."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "EvalError": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
        "title": "EvalError",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nThe EvalError object indicates an error regarding the global eval() function. This exception is not thrown by JavaScript anymore, however the EvalError object remains for compatibility.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "FinalizationRegistry": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry",
        "title": "FinalizationRegistry",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since April 2021.\n\n* Some parts of this feature may have varying levels of support.\n\nA FinalizationRegistry object lets you request a callback when a value is garbage-collected.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Float64Array": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
        "title": "Float64Array",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Float64Array typed array represents an array of 64-bit floating point numbers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0 unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n\nFloat64Array is a subclass of the hidden TypedArray class.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Float32Array": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
        "title": "Float32Array",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Float32Array typed array represents an array of 32-bit floating point numbers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0 unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n\nFloat32Array is a subclass of the hidden TypedArray class.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Float16Array": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float16Array",
        "title": "Float16Array",
        "description": "Since April 2025, this feature works across the latest devices and browser versions. This feature might not work in older devices or browsers.\n\nThe Float16Array typed array represents an array of 16-bit floating point numbers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0 unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n\nFloat16Array is a subclass of the hidden TypedArray class.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Generator": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
        "title": "Generator",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nThe Generator object is returned by a generator function and it conforms to both the iterable protocol and the iterator protocol.\n\nGenerator is a subclass of the hidden Iterator class.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Infinity": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
        "title": "Infinity",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Infinity global property is a numeric value representing infinity.\n\nThe same number value as Number.POSITIVE_INFINITY.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "globalThis": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis",
        "title": "globalThis",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since January 2020.\n\nThe globalThis global property contains the global this value, which is usually akin to the global object.\n\nThe global this object.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Function": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
        "title": "Function",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nThe Function object provides methods for functions. In JavaScript, every function is actually a Function object.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "GeneratorFunction": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
        "title": "GeneratorFunction",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nThe GeneratorFunction object provides methods for generator functions. In JavaScript, every generator function is actually a GeneratorFunction object.\n\nNote that GeneratorFunction is not a global object. It can be obtained with the following code:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Int8Array": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
        "title": "Int8Array",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Int8Array typed array represents an array of 8-bit signed integers. The contents are initialized to 0 unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n\nInt8Array is a subclass of the hidden TypedArray class.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "InternalError": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
        "title": "InternalError",
        "description": "Non-standard: This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.\n\nThe InternalError object indicates an error that occurred internally in the JavaScript engine.\n\nExample cases are mostly when something is too large, e.g.:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Intl": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl",
        "title": "Intl",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2017.\n\n* Some parts of this feature may have varying levels of support.\n\nThe Intl namespace object contains several constructors as well as functionality common to the internationalization constructors and other language sensitive functions. Collectively, they comprise the ECMAScript Internationalization API, which provides language sensitive string comparison, number formatting, date and time formatting, and more.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Int32Array": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
        "title": "Int32Array",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Int32Array typed array represents an array of 32-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0 unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n\nInt32Array is a subclass of the hidden TypedArray class.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Int16Array": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
        "title": "Int16Array",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Int16Array typed array represents an array of 16-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0 unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n\nInt16Array is a subclass of the hidden TypedArray class.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Map": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
        "title": "Map",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nThe Map object holds key-value pairs and remembers the original insertion order of the keys.\nAny value (both objects and primitive values) may be used as either a key or a value.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Iterator": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator",
        "title": "Iterator",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\n* Some parts of this feature may have varying levels of support.\n\nAn Iterator object is an object that conforms to the iterator protocol by providing a next() method that returns an iterator result object. All built-in iterators inherit from the Iterator class. The Iterator class provides a [Symbol.iterator]() method that returns the iterator object itself, making the iterator also iterable. It also provides some helper methods for working with iterators.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "JSON": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
        "title": "JSON",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nThe JSON namespace object contains static methods for parsing values from and converting values to JavaScript Object Notation (JSON).",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "isNaN": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN",
        "title": "isNaN()",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe isNaN() function determines whether a value is NaN, first converting the value to a number if necessary. Because coercion inside the isNaN() function can be surprising, you may prefer to use Number.isNaN().\n\nThe value to be tested.",
        "syntax": [],
        "parameters": [
          {
            "name": "value",
            "description": "The value to be tested."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "isFinite": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite",
        "title": "isFinite()",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe isFinite() function determines whether a value is finite, first converting the value to a number if necessary. A finite number is one that's not NaN or \u00c2\u00b1Infinity. Because coercion inside the isFinite() function can be surprising, you may prefer to use Number.isFinite().\n\nThe value to be tested.",
        "syntax": [],
        "parameters": [
          {
            "name": "value",
            "description": "The value to be tested."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Math": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math",
        "title": "Math",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nThe Math namespace object contains static properties and methods for mathematical constants and functions.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Object": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
        "title": "Object",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nThe Object type represents one of JavaScript's data types. It is used to store various keyed collections and more complex entities. Objects can be created using the Object() constructor or the object initializer / literal syntax.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Number": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
        "title": "Number",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nNumber values represent floating-point numbers like 37 or -9.25.\n\nThe Number constructor contains constants and methods for working with numbers. Values of other types can be converted to numbers using the Number() function.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "parseFloat": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseFloat",
        "title": "parseFloat()",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe parseFloat() function parses a string argument and returns a floating point number.\n\nThe value to parse, coerced to a string. Leading whitespace in this argument is ignored.",
        "syntax": [],
        "parameters": [
          {
            "name": "string",
            "description": "The value to parse, coerced to a string. Leading whitespace in this argument is ignored."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "NaN": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
        "title": "NaN",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe NaN global property is a value representing Not-A-Number.\n\nThe same number value as Number.NaN.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "ReferenceError": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
        "title": "ReferenceError",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nThe ReferenceError object represents an error when a variable that doesn't exist (or hasn't yet been initialized) in the current scope is referenced.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "parseInt": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt",
        "title": "parseInt()",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe parseInt() function parses a string argument and returns an integer of the specified radix (the base in mathematical numeral systems).\n\nA string starting with an integer. Leading whitespace in this argument is ignored.",
        "syntax": [],
        "parameters": [
          {
            "name": "string",
            "description": "A string starting with an integer. Leading whitespace in this argument is ignored."
          },
          {
            "name": "radix Optional",
            "description": "An integer between 2 and 36 that represents the radix (the base in mathematical numeral systems) of the string. It is converted to a 32-bit integer; if it's nonzero and outside the range of [2, 36] after conversion, the function will always return NaN. If 0 or not provided, the radix will be inferred based on string's value. Be careful \u00e2\u0080\u0094 this does not always default to 10! The description below explains in more detail what happens when radix is not provided."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Proxy": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
        "title": "Proxy",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nThe Proxy object enables you to create a proxy for another object, which can intercept and redefine fundamental operations for that object.\n\nThe Proxy object allows you to create an object that can be used in place of the original object, but which may redefine fundamental Object operations like getting, setting, and defining properties. Proxy objects are commonly used to log property accesses, validate, format, or sanitize inputs, and so on.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "RangeError": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
        "title": "RangeError",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nThe RangeError object indicates an error when a value is not in the set or range of allowed values.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Promise": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
        "title": "Promise",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nThe Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Set": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
        "title": "Set",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nThe Set object lets you store unique values of any type, whether primitive values or object references.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Reflect": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
        "title": "Reflect",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nThe Reflect namespace object contains static methods for invoking interceptable JavaScript object internal methods. The methods are the same as those of proxy handlers.\n\nUnlike most global objects, Reflect is not a constructor. You cannot use it with the new operator or invoke the Reflect object as a function. All properties and methods of Reflect are static (just like the Math object).",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "RegExp": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
        "title": "RegExp",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nThe RegExp object is used for matching text with a pattern.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "SharedArrayBuffer": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer",
        "title": "SharedArrayBuffer",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since December 2021.\n\n* Some parts of this feature may have varying levels of support.\n\nThe SharedArrayBuffer object is used to represent a generic raw binary data buffer, similar to the ArrayBuffer object, but in a way that they can be used to create views on shared memory. A SharedArrayBuffer is not a Transferable Object, unlike an ArrayBuffer which is transferable.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "String": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
        "title": "String",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nThe String object is used to represent and manipulate a\nsequence of characters.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "TypeError": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
        "title": "TypeError",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nThe TypeError object represents an error when an operation could not be performed, typically (but not exclusively) when a value is not of the expected type.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Symbol": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
        "title": "Symbol",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nSymbol is a built-in object whose constructor returns a symbol primitive \u00e2\u0080\u0094 also called a Symbol value or just a Symbol \u00e2\u0080\u0094 that's guaranteed to be unique. Symbols are often used to add unique property keys to an object that won't collide with keys any other code might add to the object, and which are hidden from any mechanisms other code will typically use to access the object. That enables a form of weak encapsulation, or a weak form of information hiding.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "TypedArray": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray",
        "title": "TypedArray",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nA TypedArray object describes an array-like view of an\nunderlying binary data buffer.\nThere is no global property named TypedArray, nor is there a\ndirectly visible TypedArray constructor. Instead, there are a number of\ndifferent global properties, whose values are typed array constructors for specific\nelement types, listed below. On the following pages you will find common properties and\nmethods that can be used with any typed array containing elements of any type.",
        "syntax": [],
        "parameters": [
          {
            "name": "typedArray",
            "description": "When called with an instance of a TypedArray subclass, the typedArray gets copied into a new typed array. For a non-bigint TypedArray constructor, the typedArray parameter can only be of one of the non-bigint types (such as Int32Array). Similarly, for a bigint TypedArray constructor (BigInt64Array or BigUint64Array), the typedArray parameter can only be of one of the bigint types. Each value in typedArray is converted to the corresponding type of the constructor before being copied into the new array. The length of the new typed array will be same as the length of the typedArray argument."
          },
          {
            "name": "object",
            "description": "When called with an object that's not a TypedArray instance, a new typed array is created in the same way as the TypedArray.from() method."
          },
          {
            "name": "length Optional",
            "description": "When called with a non-object, the parameter will be treated as a number specifying the length of the typed array. An internal array buffer is created in memory, of size length multiplied by BYTES_PER_ELEMENT bytes, filled with zeros. Omitting all parameters is equivalent to using 0 as length."
          },
          {
            "name": "buffer, byteOffset Optional, length Optional",
            "description": "When called with an ArrayBuffer or SharedArrayBuffer instance, and optionally a byteOffset and a length argument, a new typed array view is created that views the specified buffer. The byteOffset (in bytes) and length (in number of elements, each occupying BYTES_PER_ELEMENT bytes) parameters specify the memory range that will be exposed by the typed array view. If both are omitted, all of buffer is viewed; if only length is omitted, the remainder of buffer starting from byteOffset is viewed. If length is omitted, the typed array becomes length-tracking."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Temporal": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal",
        "title": "Temporal",
        "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe Temporal object enables date and time management in various scenarios, including built-in time zone and calendar representation, wall-clock time conversions, arithmetics, formatting, and more. It is designed as a full replacement for the Date object.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "SyntaxError": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
        "title": "SyntaxError",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nThe SyntaxError object represents an error when trying to interpret syntactically invalid code. It is thrown when the JavaScript engine encounters tokens or token order that does not conform to the syntax of the language when parsing code.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Uint8Array": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
        "title": "Uint8Array",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nThe Uint8Array typed array represents an array of 8-bit unsigned integers. The contents are initialized to 0 unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "undefined": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
        "title": "undefined",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe undefined global property represents the primitive\nvalue undefined. It is one of JavaScript's\nprimitive types.\n\nThe primitive value undefined.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Uint16Array": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
        "title": "Uint16Array",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Uint16Array typed array represents an array of 16-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0 unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n\nUint16Array is a subclass of the hidden TypedArray class.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Uint8ClampedArray": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
        "title": "Uint8ClampedArray",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Uint8ClampedArray typed array represents an array of 8-bit unsigned integers clamped to 0\u00e2\u0080\u0093255. The contents are initialized to 0 unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n\nUint8ClampedArray is a subclass of the hidden TypedArray class.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Uint32Array": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
        "title": "Uint32Array",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Uint32Array typed array represents an array of 32-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0 unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n\nUint32Array is a subclass of the hidden TypedArray class.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "unescape": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/unescape",
        "title": "unescape()",
        "description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nNote: unescape() is a non-standard function implemented by browsers and was only standardized for cross-engine compatibility. It is not required to be implemented by all JavaScript engines and may not work everywhere. Use decodeURIComponent() or decodeURI() if possible.\n\nThe unescape() function computes a new string in which hexadecimal escape sequences are replaced with the characters that they represent. The escape sequences might be introduced by a function like escape().",
        "syntax": [],
        "parameters": [
          {
            "name": "str",
            "description": "A string to be decoded."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "WeakMap": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
        "title": "WeakMap",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nA WeakMap is a collection of key/value pairs whose keys must be objects or non-registered symbols, with values of any arbitrary JavaScript type, and which does not create strong references to its keys. That is, an object's presence as a key in a WeakMap does not prevent the object from being garbage collected. Once an object used as a key has been collected, its corresponding values in any WeakMap become candidates for garbage collection as well \u00e2\u0080\u0094 as long as they aren't strongly referred to elsewhere. The only primitive type that can be used as a WeakMap key is symbol \u00e2\u0080\u0094 more specifically, non-registered symbols \u00e2\u0080\u0094 because non-registered symbols are guaranteed to be unique and cannot be re-created.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "WeakRef": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakRef",
        "title": "WeakRef",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since April 2021.\n\n* Some parts of this feature may have varying levels of support.\n\nA WeakRef object lets you hold a weak reference to another object, without preventing that object from getting garbage-collected.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "WeakSet": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
        "title": "WeakSet",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nA WeakSet is a collection of garbage-collectable values, including objects and non-registered symbols. A value in the WeakSet may only occur once. It is unique in the WeakSet's collection.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "URIError": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
        "title": "URIError",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nThe URIError object represents an error when a global URI handling function was used in a wrong way.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      }
    },
    "Operators": {
      "Addition assignment": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Addition_assignment",
        "title": "Addition assignment (+=)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe addition assignment (+=) operator performs addition (which is either numeric addition or string concatenation) on the two operands and assigns the result to the left operand.\n\nx += y is equivalent to x = x + y, except that the expression x is only evaluated once.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "async function*": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/async_function*",
        "title": "async function* expression",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since January 2020.\n\nThe async function* keywords can be used to define an async generator function inside an expression.\n\nYou can also define async generator functions using the async function* declaration.",
        "syntax": [],
        "parameters": [
          {
            "name": "name Optional",
            "description": "The function name. Can be omitted, in which case the function is anonymous. The name is only local to the function body."
          },
          {
            "name": "paramN Optional",
            "description": "The name of a formal parameter for the function. For the parameters' syntax, see the Functions reference."
          },
          {
            "name": "statements Optional",
            "description": "The statements which comprise the body of the function."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Addition": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Addition",
        "title": "Addition (+)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe addition (+) operator produces the sum of numeric operands or string concatenation.\n\nThe + operator is overloaded for two distinct operations: numeric addition and string concatenation. When evaluating, it first coerces both operands to primitives. Then, the two operands' types are tested:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Assignment": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment",
        "title": "Assignment (=)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe assignment (=) operator is used to assign a value to a variable or property. The assignment expression itself has a value, which is the assigned value. This allows multiple assignments to be chained in order to assign a single value to multiple variables.\n\nA valid assignment target, including an identifier or a property accessor. It can also be a destructuring pattern.",
        "syntax": [],
        "parameters": [
          {
            "name": "x",
            "description": "A valid assignment target, including an identifier or a property accessor. It can also be a destructuring pattern."
          },
          {
            "name": "y",
            "description": "An expression specifying the value to be assigned to x."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "async function": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/async_function",
        "title": "async function expression",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since April 2017.\n\nThe async function keywords can be used to define an async function inside an expression.\n\nYou can also define async functions using the async function declaration or the arrow syntax.",
        "syntax": [],
        "parameters": [
          {
            "name": "name Optional",
            "description": "The function name. Can be omitted, in which case the function is anonymous. The name is only local to the function body."
          },
          {
            "name": "paramN Optional",
            "description": "The name of a formal parameter for the function. For the parameters' syntax, see the Functions reference."
          },
          {
            "name": "statements Optional",
            "description": "The statements which comprise the body of the function."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "await": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await",
        "title": "await",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since March 2017.\n\n* Some parts of this feature may have varying levels of support.\n\nThe await operator is used to wait for a Promise and get its fulfillment value. It can only be used inside an async function or at the top level of a module.",
        "syntax": [],
        "parameters": [
          {
            "name": "expression",
            "description": "A Promise, a thenable object, or any value to wait for."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Bitwise AND assignment": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_AND_assignment",
        "title": "Bitwise AND assignment (&=)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe bitwise AND assignment (&=) operator performs bitwise AND on the two operands and assigns the result to the left operand.\n\nx &= y is equivalent to x = x & y, except that the expression x is only evaluated once.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Bitwise OR": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_OR",
        "title": "Bitwise OR (|)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe bitwise OR (|) operator returns a number or BigInt whose binary representation has a 1 in each bit position for which the corresponding bits of either or both operands are 1.\n\nThe | operator is overloaded for two types of operands: number and BigInt. For numbers, the operator returns a 32-bit integer. For BigInts, the operator returns a BigInt. It first coerces both operands to numeric values and tests the types of them. It performs BigInt OR if both operands become BigInts; otherwise, it converts both operands to 32-bit integers and performs number bitwise OR. A TypeError is thrown if one operand becomes a BigInt but the other becomes a number.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Bitwise AND": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_AND",
        "title": "Bitwise AND (&)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe bitwise AND (&) operator returns a number or BigInt whose binary representation has a 1 in each bit position for which the corresponding bits of both operands are 1.\n\nThe & operator is overloaded for two types of operands: number and BigInt. For numbers, the operator returns a 32-bit integer. For BigInts, the operator returns a BigInt. It first coerces both operands to numeric values and tests the types of them. It performs BigInt AND if both operands become BigInts; otherwise, it converts both operands to 32-bit integers and performs number bitwise AND. A TypeError is thrown if one operand becomes a BigInt but the other becomes a number.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Bitwise NOT": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_NOT",
        "title": "Bitwise NOT (~)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe bitwise NOT (~) operator returns a number or BigInt whose binary representation has a 1 in each bit position for which the corresponding bit of the operand is 0, and a 0 otherwise.\n\nThe ~ operator is overloaded for two types of operands: number and BigInt. For numbers, the operator returns a 32-bit integer. For BigInts, the operator returns a BigInt. It first coerces the operand to a numeric value and tests the type of it. It performs BigInt NOT if the operand becomes a BigInt; otherwise, it converts the operand to a 32-bit integer and performs number bitwise NOT.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Bitwise XOR": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR",
        "title": "Bitwise XOR (^)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe bitwise XOR (^) operator returns a number or BigInt whose binary representation has a 1 in each bit position for which the corresponding bits of either but not both operands are 1.\n\nThe ^ operator is overloaded for two types of operands: number and BigInt. For numbers, the operator returns a 32-bit integer. For BigInts, the operator returns a BigInt. It first coerces both operands to numeric values and tests the types of them. It performs BigInt XOR if both operands become BigInts; otherwise, it converts both operands to 32-bit integers and performs number bitwise XOR. A TypeError is thrown if one operand becomes a BigInt but the other becomes a number.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Bitwise XOR assignment": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR_assignment",
        "title": "Bitwise XOR assignment (^=)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe bitwise XOR assignment (^=) operator performs bitwise XOR on the two operands and assigns the result to the left operand.\n\nx ^= y is equivalent to x = x ^ y, except that the expression x is only evaluated once.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Bitwise OR assignment": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_OR_assignment",
        "title": "Bitwise OR assignment (|=)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe bitwise OR assignment (|=) operator performs bitwise OR on the two operands and assigns the result to the left operand.\n\nx |= y is equivalent to x = x | y, except that the expression x is only evaluated once.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "class": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/class",
        "title": "class expression",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since March 2016.\n\nThe class keyword can be used to define a class inside an expression.\n\nYou can also define classes using the class declaration.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Comma operator": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comma_operator",
        "title": "Comma operator (,)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe comma (,) operator evaluates each of its operands (from left to right) and returns the value of the last operand. This is commonly used to provide multiple updaters to a for loop's afterthought.\n\nOne or more expressions, the last of which is returned as the value of the compound expression.",
        "syntax": [],
        "parameters": [
          {
            "name": "expr1, expr2, expr3, \u00e2\u0080\u00a6",
            "description": "One or more expressions, the last of which is returned as the value of the compound expression."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Division": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Division",
        "title": "Division (/)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe division (/) operator produces the quotient of its operands where the left operand is the dividend and the right operand is the divisor.\n\nThe / operator is overloaded for two types of operands: number and BigInt. It first coerces both operands to numeric values and tests the types of them. It performs BigInt division if both operands become BigInts; otherwise, it performs number division. A TypeError is thrown if one operand becomes a BigInt but the other becomes a number.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Decrement": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Decrement",
        "title": "Decrement (--)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe decrement (--) operator decrements (subtracts one from) its operand and returns the value before or after the decrement, depending on where the operator is placed.\n\nThe -- operator is overloaded for two types of operands: number and BigInt. It first coerces the operand to a numeric value and tests the type of it. It performs BigInt decrement if the operand becomes a BigInt; otherwise, it performs number decrement.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "delete": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete",
        "title": "delete",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe delete operator removes a property from an object. If the property's value is an object and there are no more references to the object, the object held by that property is eventually released automatically.\n\nNote:\nThe syntax allows a wider range of expressions following the delete operator, but only the above forms lead to meaningful behaviors.",
        "syntax": [],
        "parameters": [
          {
            "name": "object",
            "description": "The name of an object, or an expression evaluating to an object."
          },
          {
            "name": "property",
            "description": "The property to delete."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Conditional operator": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_operator",
        "title": "Conditional (ternary) operator",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe conditional (ternary) operator is the only JavaScript operator that takes three operands:\na condition followed by a question mark (?), then an expression to execute if the condition is truthy followed by a colon (:), and finally the expression to execute if the condition is falsy.\nThis operator is frequently used as an alternative to an if...else statement.\n\nAn expression whose value is used as a condition.",
        "syntax": [],
        "parameters": [
          {
            "name": "condition",
            "description": "An expression whose value is used as a condition."
          },
          {
            "name": "exprIfTrue",
            "description": "An expression which is executed if the condition evaluates to a truthy value (one which equals or can be converted to true)."
          },
          {
            "name": "exprIfFalse",
            "description": "An expression which is executed if the condition is falsy (that is, has a value which can be converted to false)."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Destructuring": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring",
        "title": "Destructuring",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since August 2016.\n\nThe destructuring syntax is a JavaScript syntax that makes it possible to unpack values from arrays, or properties from objects, into distinct variables. It can be used in locations that receive data (such as the left-hand side of an assignment or anywhere that creates new identifier bindings).\n\nThe object and array literal expressions provide an easy way to create ad hoc packages of data.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Exponentiation assignment": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Exponentiation_assignment",
        "title": "Exponentiation assignment (**=)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since March 2017.\n\nThe exponentiation assignment (**=) operator performs exponentiation on the two operands and assigns the result to the left operand.\n\nx **= y is equivalent to x = x ** y, except that the expression x is only evaluated once.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Exponentiation": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Exponentiation",
        "title": "Exponentiation (**)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since March 2017.\n\nThe exponentiation (**) operator returns the result of raising the first operand to the power of the second operand. It is equivalent to Math.pow(), except it also accepts BigInts as operands.\n\nThe ** operator is overloaded for two types of operands: number and BigInt. It first coerces both operands to numeric values and tests the types of them. It performs BigInt exponentiation if both operands become BigInts; otherwise, it performs number exponentiation. A TypeError is thrown if one operand becomes a BigInt but the other becomes a number.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Division assignment": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Division_assignment",
        "title": "Division assignment (/=)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe division assignment (/=) operator performs division on the two operands and assigns the result to the left operand.\n\nx /= y is equivalent to x = x / y, except that the expression x is only evaluated once.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "function": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function",
        "title": "function expression",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe function keyword can be used to define a function inside an expression.\n\nYou can also define functions using the function declaration or the arrow syntax.",
        "syntax": [],
        "parameters": [
          {
            "name": "name Optional",
            "description": "The function name. Can be omitted, in which case the function is anonymous. The name is only local to the function body."
          },
          {
            "name": "paramN Optional",
            "description": "The name of a formal parameter for the function. For the parameters' syntax, see the Functions reference."
          },
          {
            "name": "statements Optional",
            "description": "The statements which comprise the body of the function."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Equality": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Equality",
        "title": "Equality (==)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe equality (==) operator checks whether its two operands are equal,\nreturning a Boolean result.\nUnlike the strict equality operator,\nit attempts to convert and compare operands that are of different types.\n\nThe equality operators (== and !=) provide the IsLooselyEqual semantic. This can be roughly summarized as follows:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "function*": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function*",
        "title": "function* expression",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nThe function* keyword can be used to define a generator function inside an expression.\n\nYou can also define generator functions using the function* declaration.",
        "syntax": [],
        "parameters": [
          {
            "name": "name Optional",
            "description": "The function name. Can be omitted, in which case the function is anonymous. The name is only local to the function body."
          },
          {
            "name": "paramN Optional",
            "description": "The name of a formal parameter for the function. For the parameters' syntax, see the Functions reference."
          },
          {
            "name": "statements Optional",
            "description": "The statements which comprise the body of the function."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "import.meta": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import.meta",
        "title": "import.meta",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since January 2020.\n\n* Some parts of this feature may have varying levels of support.\n\nThe import.meta meta-property exposes context-specific metadata to a JavaScript module. It contains information about the module, such as the module's URL.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": [],
        "resolve": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import.meta/resolve",
          "title": "import.meta.resolve()",
          "description": "Since March 2023, this feature works across the latest devices and browser versions. This feature might not work in older devices or browsers.\n\nimport.meta.resolve() is a built-in function defined on the import.meta object of a JavaScript module that resolves a module specifier to a URL using the current module's URL as base.\n\nA string that specifies a potentially importable module. This may be a relative path (such as \"./lib/helper.js\"), a bare name (such as \"my-module\"), or an absolute URL (such as \"https://example.com/lib/helper.js\").",
          "syntax": [],
          "parameters": [
            {
              "name": "moduleName",
              "description": "A string that specifies a potentially importable module. This may be a relative path (such as \"./lib/helper.js\"), a bare name (such as \"my-module\"), or an absolute URL (such as \"https://example.com/lib/helper.js\")."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        }
      },
      "Greater than": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Greater_than",
        "title": "Greater than (>)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe greater than (>) operator returns true if the left\noperand is greater than the right operand, and false otherwise.\n\nThe operands are compared using the same algorithm as the Less than operator, except the two operands are swapped. x > y is generally equivalent to y < x, except that x > y coerces x to a primitive before y, while y < x coerces y to a primitive before x. Because coercion may have side effects, the order of the operands may matter.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Greater than or equal": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Greater_than_or_equal",
        "title": "Greater than or equal (>=)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe greater than or equal (>=) operator returns true if\nthe left operand is greater than or equal to the right operand, and false\notherwise.\n\nThe operands are compared using the same algorithm as the Less than operator, with the result negated. x >= y is generally equivalent to !(x < y), except for two cases where x >= y and x < y are both false:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Grouping": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Grouping",
        "title": "Grouping operator ( )",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe grouping ( ) operator controls the precedence of evaluation in expressions. It also acts as a container for arbitrary expressions in certain syntactic constructs, where ambiguity or syntax errors would otherwise occur.\n\nAny expression to be evaluated, including comma-joined expressions.",
        "syntax": [],
        "parameters": [
          {
            "name": "expression",
            "description": "Any expression to be evaluated, including comma-joined expressions."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "in": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in",
        "title": "in",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe in operator returns true if the specified property is in the specified object or its prototype chain.\n\nThe in operator cannot be used to search for values in other collections. To test if a certain value exists in an array, use Array.prototype.includes(). For sets, use Set.prototype.has().",
        "syntax": [],
        "parameters": [
          {
            "name": "prop",
            "description": "A string or symbol representing a property name (non-symbols will be coerced to strings). Can also be a private property identifier."
          },
          {
            "name": "object",
            "description": "Object to check if it (or its prototype chain) contains the property with specified name (prop)."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "import": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import",
        "title": "import()",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since January 2020.\n\n* Some parts of this feature may have varying levels of support.\n\nThe import() syntax, commonly called dynamic import, is a function-like expression that allows loading an ECMAScript module asynchronously and dynamically into a potentially non-module environment.",
        "syntax": [],
        "parameters": [
          {
            "name": "moduleName",
            "description": "The module to import from. The evaluation of the specifier is host-specified, but always follows the same algorithm as static import declarations."
          },
          {
            "name": "options",
            "description": "An object containing import options. The following key is recognized:\n\nwith\n\nThe import attributes."
          },
          {
            "name": "with",
            "description": "The import attributes."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Inequality": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Inequality",
        "title": "Inequality (!=)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe inequality (!=) operator checks whether its two operands are not\nequal, returning a Boolean result.\nUnlike the strict inequality operator,\nit attempts to convert and compare operands that are of different types.\n\nThe inequality operator checks whether its operands are not equal. It is the negation\nof the equality\noperator so the following two lines will always give the same result:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Increment": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Increment",
        "title": "Increment (++)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe increment (++) operator increments (adds one to) its operand and returns the value before or after the increment, depending on where the operator is placed.\n\nThe ++ operator is overloaded for two types of operands: number and BigInt. It first coerces the operand to a numeric value and tests the type of it. It performs BigInt increment if the operand becomes a BigInt; otherwise, it performs number increment.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Left shift assignment": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Left_shift_assignment",
        "title": "Left shift assignment (<<=)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe left shift assignment (<<=) operator performs left shift on the two operands and assigns the result to the left operand.\n\nx <<= y is equivalent to x = x << y, except that the expression x is only evaluated once.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Less than": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Less_than",
        "title": "Less than (<)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe less than (<) operator returns true if the left operand is less than the right operand, and false otherwise.\n\nThe operands are compared with multiple rounds of coercion, which can be summarized as follows:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "instanceof": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof",
        "title": "instanceof",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe instanceof operator tests to see if the prototype property of a constructor appears anywhere in the prototype chain of an object. The return value is a boolean value. Its behavior can be customized with Symbol.hasInstance.\n\nThe object to test.",
        "syntax": [],
        "parameters": [
          {
            "name": "object",
            "description": "The object to test."
          },
          {
            "name": "constructor",
            "description": "Constructor to test against."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Left shift": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Left_shift",
        "title": "Left shift (<<)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe left shift (<<) operator returns a number or BigInt whose binary representation is the first operand shifted by the specified number of bits to the left. Excess bits shifted off to the left are discarded, and zero bits are shifted in from the right.\n\nThe << operator is overloaded for two types of operands: number and BigInt. For numbers, the operator returns a 32-bit integer. For BigInts, the operator returns a BigInt. It first coerces both operands to numeric values and tests the types of them. It performs BigInt left shift if both operands become BigInts; otherwise, it converts both operands to 32-bit integers and performs number left shift. A TypeError is thrown if one operand becomes a BigInt but the other becomes a number.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Less than or equal": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Less_than_or_equal",
        "title": "Less than or equal (<=)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe less than or equal (<=) operator returns true if the left operand is less than or equal to the right operand, and false otherwise.\n\nThe operands are compared using the same algorithm as the Less than operator, with the operands swapped and the result negated. x <= y is generally equivalent to !(y < x), except for two cases where x <= y and x > y are both false:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Logical AND": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND",
        "title": "Logical AND (&&)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe logical AND (&&) (logical conjunction) operator for a set of boolean operands will be true if and only if all the operands are true. Otherwise it will be false.\n\nMore generally, the operator returns the value of the first falsy operand encountered when evaluating from left to right, or the value of the last operand if they are all truthy.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Logical OR assignment": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR_assignment",
        "title": "Logical OR assignment (||=)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2020.\n\nThe logical OR assignment (||=) operator only evaluates the right operand and assigns to the left if the left operand is falsy.\n\nLogical OR assignment short-circuits, meaning that x ||= y is equivalent to x || (x = y), except that the expression x is only evaluated once.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Logical OR": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR",
        "title": "Logical OR (||)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe logical OR (||) (logical disjunction) operator for a set of operands\nis true if and only if one or more of its operands is true. It is typically used with\nboolean (logical) values. When it is, it returns a Boolean value. However,\nthe || operator actually returns the value of one of the specified\noperands, so if this operator is used with non-Boolean values, it will return a\nnon-Boolean value.\n\nIf x can be converted to true, returns\nx; else, returns y.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Logical NOT": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_NOT",
        "title": "Logical NOT (!)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe logical NOT (!) (logical complement, negation) operator takes truth to\nfalsity and vice versa. It is typically used with boolean (logical)\nvalues. When used with non-Boolean values, it returns false if its single\noperand can be converted to true; otherwise, returns true.\n\nReturns false if its single operand can be converted to true;\notherwise, returns true.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Logical AND assignment": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND_assignment",
        "title": "Logical AND assignment (&&=)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2020.\n\nThe logical AND assignment (&&=) operator only evaluates the right operand and assigns to the left if the left operand is truthy.\n\nLogical AND assignment short-circuits, meaning that x &&= y is equivalent to x && (x = y), except that the expression x is only evaluated once.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Multiplication assignment": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Multiplication_assignment",
        "title": "Multiplication assignment (*=)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe multiplication assignment (*=) operator performs multiplication on the two operands and assigns the result to the left operand.\n\nx *= y is equivalent to x = x * y, except that the expression x is only evaluated once.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "null": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null",
        "title": "null",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe null value represents the intentional absence of any object value. It\nis one of JavaScript's primitive values and\nis treated as falsy for boolean operations.\n\nThe value null is written with a literal: null.\nnull is not an identifier for a property of the global object, like\nundefined can be. Instead,\nnull expresses a lack of identification, indicating that a variable points\nto no object. In APIs, null is often retrieved in a place where an object\ncan be expected but no object is relevant.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Multiplication": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Multiplication",
        "title": "Multiplication (*)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe multiplication (*) operator produces the product of the operands.\n\nThe * operator is overloaded for two types of operands: number and BigInt. It first coerces both operands to numeric values and tests the types of them. It performs BigInt multiplication if both operands become BigInts; otherwise, it performs number multiplication. A TypeError is thrown if one operand becomes a BigInt but the other becomes a number.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "new.target": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target",
        "title": "new.target",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2017.\n\nThe new.target meta-property lets you detect whether a function or constructor was called using the new operator. In constructors and functions invoked using the new operator, new.target returns a reference to the constructor or function that new was called upon. In normal function calls, new.target is undefined.\n\nnew.target is guaranteed to be a constructable function value or undefined.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "new": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new",
        "title": "new",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe new operator lets developers create an instance of a user-defined object type or of one of the built-in object types that has a constructor function.\n\nA class or function that specifies the type of the object instance. The expression can be anything with sufficient precedence, including an identifier, a property access, or another new expression, but optional chaining is not allowed.",
        "syntax": [],
        "parameters": [
          {
            "name": "constructor",
            "description": "A class or function that specifies the type of the object instance. The expression can be anything with sufficient precedence, including an identifier, a property access, or another new expression, but optional chaining is not allowed."
          },
          {
            "name": "arg1, arg2, \u00e2\u0080\u00a6, argN",
            "description": "A list of values that the constructor will be called with. new Foo is equivalent to new Foo(), i.e., if no argument list is specified, Foo is called without arguments."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Optional chaining": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining",
        "title": "Optional chaining (?.)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2020.\n\nThe optional chaining (?.) operator accesses an object's property or calls a function. If the object accessed or function called using this operator is undefined or null, the expression short circuits and evaluates to undefined instead of throwing an error.\n\nThe ?. operator is like the . chaining operator, except that instead of causing an error if a reference is nullish (null or undefined), the expression short-circuits with a return value of undefined. When used with function calls, it returns undefined if the given function does not exist.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Operator precedence": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence",
        "title": "Operator precedence",
        "description": "Operator precedence determines how operators are parsed concerning each other. Operators with higher precedence become the operands of operators with lower precedence.\n\nConsider an expression describable by the representation below, where both OP1 and OP2 are fill-in-the-blanks for OPerators.\n\nThe combination above has two possible interpretations:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Nullish coalescing": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing",
        "title": "Nullish coalescing operator (??)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2020.\n\nThe nullish coalescing (??) operator is a logical\noperator that returns its right-hand side operand when its left-hand side operand is\nnull or undefined, and otherwise returns its left-hand side\noperand.\n\nThe nullish coalescing operator can be seen as a special case of the logical OR (||) operator. The latter returns the right-hand side operand if the left operand is any falsy value, not only null or undefined. In other words, if you use || to provide some default value to another variable foo, you may encounter unexpected behaviors if you consider some falsy values as usable (e.g., '' or 0). See below for more examples.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Object initializer": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer",
        "title": "Object initializer",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nAn object initializer is a comma-delimited list of zero or more pairs of property names and associated values of an object, enclosed in curly braces ({}). Objects can also be initialized using Object.create() or by invoking a constructor function with the new operator.\n\nAn object initializer is an expression that describes the initialization of an Object. Objects consist of properties, which are used to describe an object. The values of object properties can either contain primitive data types or other objects.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Nullish coalescing assignment": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_assignment",
        "title": "Nullish coalescing assignment (??=)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2020.\n\nThe nullish coalescing assignment (??=) operator, also known as the logical nullish assignment operator, only evaluates the right operand and assigns to the left if the left operand is nullish (null or undefined).\n\nNullish coalescing assignment short-circuits, meaning that x ??= y is equivalent to x ?? (x = y), except that the expression x is only evaluated once.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Remainder": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Remainder",
        "title": "Remainder (%)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe remainder (%) operator returns the remainder left over when one operand is divided by a second operand. It always takes the sign of the dividend.\n\nThe % operator is overloaded for two types of operands: number and BigInt. It first coerces both operands to numeric values and tests the types of them. It performs BigInt remainder if both operands become BigInts; otherwise, it performs number remainder. A TypeError is thrown if one operand becomes a BigInt but the other becomes a number.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Property accessors": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors",
        "title": "Property accessors",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nProperty accessors provide access to an object's properties by using the dot notation or the bracket notation.\n\nOne can think of an object as an associative array (a.k.a. map, dictionary, hash, lookup table). The keys in this array are the names of the object's properties.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Remainder assignment": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Remainder_assignment",
        "title": "Remainder assignment (%=)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe remainder assignment (%=) operator performs remainder on the two operands and assigns the result to the left operand.\n\nx %= y is equivalent to x = x % y, except that the expression x is only evaluated once.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Right shift": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Right_shift",
        "title": "Right shift (>>)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe right shift (>>) operator returns a number or BigInt whose binary representation is the first operand shifted by the specified number of bits to the right. Excess bits shifted off to the right are discarded, and copies of the leftmost bit are shifted in from the left. This operation is also called \"sign-propagating right shift\" or \"arithmetic right shift\", because the sign of the resulting number is the same as the sign of the first operand.\n\nThe >> operator is overloaded for two types of operands: number and BigInt. For numbers, the operator returns a 32-bit integer. For BigInts, the operator returns a BigInt. It first coerces both operands to numeric values and tests the types of them. It performs BigInt right shift if both operands become BigInts; otherwise, it converts both operands to 32-bit integers and performs number right shift. A TypeError is thrown if one operand becomes a BigInt but the other becomes a number.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Right shift assignment": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Right_shift_assignment",
        "title": "Right shift assignment (>>=)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe right shift assignment (>>=) operator performs right shift on the two operands and assigns the result to the left operand.\n\nx >>= y is equivalent to x = x >> y, except that the expression x is only evaluated once.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Spread syntax": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax",
        "title": "Spread syntax (...)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since October 2015.\n\nThe spread (...) syntax allows an iterable, such as an array or string, to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected. In an object literal, the spread syntax enumerates the properties of an object and adds the key-value pairs to the object being created.\n\nSpread syntax looks exactly like rest syntax. In a way, spread syntax is the opposite of rest syntax. Spread syntax \"expands\" an array into its elements, while rest syntax collects multiple elements and \"condenses\" them into a single element. See rest parameters and rest property.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Subtraction assignment": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Subtraction_assignment",
        "title": "Subtraction assignment (-=)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe subtraction assignment (-=) operator performs subtraction on the two operands and assigns the result to the left operand.\n\nx -= y is equivalent to x = x - y, except that the expression x is only evaluated once.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Strict equality": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality",
        "title": "Strict equality (===)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe strict equality (===) operator checks whether its two operands are\nequal, returning a Boolean result. Unlike the equality operator,\nthe strict equality operator always considers operands of different types to be\ndifferent.\n\nThe strict equality operators (=== and !==) provide the IsStrictlyEqual semantic.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Strict inequality": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_inequality",
        "title": "Strict inequality (!==)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe strict inequality (!==) operator checks whether its two operands are\nnot equal, returning a Boolean result. Unlike the inequality\noperator, the strict inequality operator always considers operands of different types to\nbe different.\n\nThe strict inequality operator checks whether its operands are not equal.\nIt is the negation of the\nstrict equality operator\nso the following two lines will always give the same result:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Subtraction": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Subtraction",
        "title": "Subtraction (-)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe subtraction (-) operator subtracts the two operands, producing their difference.\n\nThe - operator is overloaded for two types of operands: number and BigInt. It first coerces both operands to numeric values and tests the types of them. It performs BigInt subtraction if both operands become BigInts; otherwise, it performs number subtraction. A TypeError is thrown if one operand becomes a BigInt but the other becomes a number.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "super": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super",
        "title": "super",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since March 2016.\n\nThe super keyword is used to access properties on an object literal or class's [[Prototype]], or invoke a superclass's constructor.\n\nThe super.prop and super[expr] expressions are valid in any method definition in both classes and object literals. The super(...args) expression is valid in class constructors.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "this": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this",
        "title": "this",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe this keyword refers to the context where a piece of code, such as a function's body, is supposed to run. Most typically, it is used in object methods, where this refers to the object that the method is attached to, thus allowing the same method to be reused on different objects.\n\nThe value of this in JavaScript depends on how a function is invoked (runtime binding), not how it is defined. When a regular function is invoked as a method of an object (obj.method()), this points to that object. When invoked as a standalone function (not attached to an object: func()), this typically refers to the global object (in non-strict mode) or undefined (in strict mode). The Function.prototype.bind() method can create a function whose this binding doesn't change, and methods Function.prototype.apply() and Function.prototype.call() can also set the this value for a particular call.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "typeof": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof",
        "title": "typeof",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe typeof operator returns a string indicating the type of the operand's value.\n\nAn expression representing the object or primitive whose type is to be returned.",
        "syntax": [],
        "parameters": [
          {
            "name": "operand",
            "description": "An expression representing the object or primitive whose type is to be returned."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Unary negation": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Unary_negation",
        "title": "Unary negation (-)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe unary negation (-) operator precedes its operand and negates it.\n\nThe - operator is overloaded for two types of operands: number and BigInt. It first coerces the operand to a numeric value and tests the type of it. It performs BigInt negation if the operand becomes a BigInt; otherwise, it performs number negation.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Unary plus": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Unary_plus",
        "title": "Unary plus (+)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe unary plus (+) operator precedes its operand and evaluates to its\noperand but attempts to convert it into a number, if it isn't already.\n\nAlthough unary negation (-) also can convert non-numbers, unary plus is the fastest and preferred way of converting something into a number, because it does not perform any other operations on the number.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "yield*": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield*",
        "title": "yield*",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nThe yield* operator can be used within generator (sync or async) functions to delegate to another iterable object, such as a Generator. Inside async generator functions, it can additionally be used to delegate to another async iterable object, such as an AsyncGenerator.\n\nAn iterable object.",
        "syntax": [],
        "parameters": [
          {
            "name": "expression Optional",
            "description": "An iterable object."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "void": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/void",
        "title": "void operator",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe void operator evaluates the given\nexpression and then returns undefined.\n\nThis operator allows evaluating expressions that produce a value into places where an\nexpression that evaluates to undefined is desired.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Unsigned right shift assignment": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift_assignment",
        "title": "Unsigned right shift assignment (>>>=)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe unsigned right shift assignment (>>>=) operator performs unsigned right shift on the two operands and assigns the result to the left operand.\n\nx >>>= y is equivalent to x = x >>> y, except that the expression x is only evaluated once.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "yield": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield",
        "title": "yield",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nThe yield operator is used to pause and resume a generator function.\n\nThe value to yield from the generator function via the iterator protocol. If omitted, undefined is yielded.",
        "syntax": [],
        "parameters": [
          {
            "name": "expression Optional",
            "description": "The value to yield from the generator function via the iterator protocol. If omitted, undefined is yielded."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Unsigned right shift": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift",
        "title": "Unsigned right shift (>>>)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe unsigned right shift (>>>) operator returns a number whose binary representation is the first operand shifted by the specified number of bits to the right. Excess bits shifted off to the right are discarded, and zero bits are shifted in from the left. This operation is also called \"zero-filling right shift\", because the sign bit becomes 0, so the resulting number is always positive. Unsigned right shift does not accept BigInt values.\n\nUnlike other arithmetic and bitwise operators, the unsigned right shift operator does not accept BigInt values. This is because it fills the leftmost bits with zeroes, but conceptually, BigInts have an infinite number of leading sign bits, so there's no \"leftmost bit\" to fill with zeroes.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      }
    }
  }
}
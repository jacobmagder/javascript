{
  "Guide": {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide",
    "title": "JavaScript Guide",
    "description": "The JavaScript Guide shows you how to use JavaScript and gives an overview of the language. If you need exhaustive information about a language feature, have a look at the JavaScript reference.\n\nThis Guide is divided into the following chapters.\n\nOverview: Introduction",
    "syntax": [],
    "parameters": [],
    "return_value": "",
    "examples": [],
    "browser_compatibility": {},
    "see_also": [],
    "inheritance": [],
    "properties": [],
    "methods": [],
    "children": [],
    "Grammar and types": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#declarations",
      "title": "Grammar and types",
      "description": "This chapter discusses JavaScript's basic grammar, variable declarations, data types and literals.\n\nJavaScript borrows most of its syntax from Java, C, and C++, but it has also been influenced by Awk, Perl, and Python.\n\nJavaScript is case-sensitive and uses the Unicode character set. For example, the word Fr\u00c3\u00bch (which means \"early\" in German) could be used as a variable name.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Introduction": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Introduction#javascript_and_java",
      "title": "Introduction",
      "description": "This chapter introduces JavaScript and discusses some of its fundamental concepts.\n\nThis guide assumes you have the following basic background:\n\nThe JavaScript documentation on MDN includes the following:",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Control flow and error handling": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling#switch_statement",
      "title": "Control flow and error handling",
      "description": "JavaScript supports a compact set of statements, specifically\ncontrol flow statements, that you can use to incorporate a great deal of interactivity\nin your application. This chapter provides an overview of these statements.\n\nThe JavaScript reference\ncontains exhaustive details about the statements in this chapter. The semicolon\n(;) character is used to separate statements in JavaScript code.\n\nAny JavaScript expression is also a statement.\nSee Expressions and operators\nfor complete information about expressions.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Expressions and operators": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_operators#conditional_ternary_operator",
      "title": "Expressions and operators",
      "description": "This chapter describes JavaScript's expressions and operators, including assignment, comparison, arithmetic, bitwise, logical, string, ternary and more.\n\nAt a high level, an expression is a valid unit of code that resolves to a value. There are two types of expressions: those that have side effects (such as assigning values) and those that purely evaluate.\n\nThe expression x = 7 is an example of the first type. This expression uses the = operator to assign the value seven to the variable x. The expression itself evaluates to 7.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Loops and iteration": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration#break_statement",
      "title": "Loops and iteration",
      "description": "Loops offer a quick and easy way to do something repeatedly. This\nchapter of the JavaScript Guide\nintroduces the different iteration statements available to JavaScript.\n\nYou can think of a loop as a computerized version of the game where you tell someone to\ntake X steps in one direction, then Y steps in another. For example,\nthe idea \"Go five steps to the east\" could be expressed this way as a loop:\n\nThere are many different kinds of loops, but they all essentially do the same thing:\nthey repeat an action some number of times. (Note that it's possible that number could\nbe zero!)",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Numbers and strings": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Numbers_and_strings#math_object",
      "title": "Numbers and strings",
      "description": "This chapter introduces the two most fundamental data types in JavaScript: numbers and strings. We will introduce their underlying representations, and functions used to work with and perform calculations on them.\n\nIn JavaScript, numbers are implemented in double-precision 64-bit binary format IEEE 754 (i.e., a number between \u00c2\u00b12^\u00e2\u0088\u00921022 and \u00c2\u00b12^+1023, or about \u00c2\u00b110^\u00e2\u0088\u0092308 to \u00c2\u00b110^+308, with a numeric precision of 53 bits). Integer values up to \u00c2\u00b12^53 \u00e2\u0088\u0092 1 can be represented exactly.\n\nIn addition to being able to represent floating-point numbers, the number type has three symbolic values: Infinity, -Infinity, and NaN (not-a-number).",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Functions": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions#function_parameters",
      "title": "Functions",
      "description": "Functions are one of the fundamental building blocks in JavaScript. A function in JavaScript is similar to a procedure\u00e2\u0080\u0094a set of statements that performs a task or calculates a value, but for a procedure to qualify as a function, it should take some input and return an output where there is some obvious relationship between the input and the output. To use a function, you must define it somewhere in the scope from which you wish to call it.\n\nSee also the exhaustive reference chapter about JavaScript functions to get to know the details.\n\nA function definition (also called a function declaration, or function statement) consists of the function keyword, followed by:",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Keyed collections": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Keyed_collections#map_object",
      "title": "Keyed collections",
      "description": "This chapter introduces collections of data which are indexed by a key; Map and Set objects contain elements which are iterable in the order of insertion.\n\nA Map object is a key/value map that can iterate its elements in insertion order.\n\nThe following code shows some basic operations with a Map. See also the Map reference page for more examples and the complete API. You can use a for...of loop to return an array of [key, value] for each iteration.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Regular expressions": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions#writing_a_regular_expression_pattern",
      "title": "Regular expressions",
      "description": "Regular expressions are patterns used to match character combinations in strings.\nIn JavaScript, regular expressions are also objects. These patterns are used with the exec() and test() methods of RegExp, and with the match(), matchAll(), replace(), replaceAll(), search(), and split() methods of String.\nThis chapter describes JavaScript regular expressions. It provides a brief overview of each syntax element. For a detailed explanation of each one's semantics, read the regular expressions reference.\n\nYou construct a regular expression in one of two ways:\n\nUsing a regular expression literal, which consists of a pattern enclosed between slashes, as follows:",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": [],
      "Groups and backreferences": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Groups_and_backreferences",
        "title": "Groups and backreferences",
        "description": "Groups group multiple patterns as a whole, and capturing groups provide extra submatch information when using a regular expression pattern to match against a string. Backreferences refer to a previously captured group in the same regular expression.\n\nCapturing group:\n          Matches x and\n          remembers the match. For example, /(foo)/ matches and\n          remembers \"foo\" in \"foo bar\".\n\nA regular expression may have multiple capturing groups. In results,\n          matches to capturing groups typically in an array whose members are in\n          the same order as the left parentheses in the capturing group. This is\n          usually just the order of the capturing groups themselves. This\n          becomes important when capturing groups are nested. Matches are\n          accessed using the index of the result's elements ([1], \u00e2\u0080\u00a6, [n]) or from the predefined RegExp object's properties\n          ($1, \u00e2\u0080\u00a6, $9).",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      }
    },
    "Representing dates times": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Representing_dates_times#date_object",
      "title": "Representing dates & times",
      "description": "Note:\nThe Date object is now considered legacy and should be avoided in new code. We will update this page with modern alternatives soon.\n\nJavaScript does not have a date data type. However, you can use the Date object and its methods to work with dates and times in your applications. The Date object has a large number of methods for setting, getting, and manipulating dates. It does not have any properties.\n\nJavaScript handles dates similarly to Java. The two languages have many of the same date methods, and both languages store dates as the number of milliseconds since midnight at the beginning of January 1, 1970, UTC, with a Unix Timestamp being the number of seconds since the same instant. The instant at the midnight at the beginning of January 1, 1970, UTC is called the epoch.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Working with objects": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_objects#defining_methods",
      "title": "Working with objects",
      "description": "JavaScript is designed on an object-based paradigm. An object is a collection of properties, and a property is an association between a name (or key) and a value. A property's value can be a function, in which case the property is known as a method.\n\nObjects in JavaScript, just as in many other programming languages, can be compared to objects in real life. In JavaScript, an object is a standalone entity, with properties and type. Compare it with a cup, for example. A cup is an object, with properties. A cup has a color, a design, weight, a material it is made of, etc. The same way, JavaScript objects can have properties, which define their characteristics.\n\nIn addition to objects that are predefined in the browser, you can define your own objects. This chapter describes how to use objects, properties, and methods, and how to create your own objects.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Indexed collections": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections",
      "title": "Indexed collections",
      "description": "This chapter introduces collections of data which are ordered by an index value. This includes arrays and array-like constructs such as Array objects and TypedArray objects.\n\nAn array is an ordered list of values that you refer to with a name and an index.\n\nFor example, consider an array called emp, which contains employees' names indexed by their numerical employee number. So emp[0] would be employee number zero, emp[1] employee number one, and so on.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Typed arrays": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Typed_arrays",
      "title": "JavaScript typed arrays",
      "description": "JavaScript typed arrays are array-like objects that provide a mechanism for reading and writing raw binary data in memory buffers.\n\nTyped arrays are not intended to replace arrays for any kind of functionality. Instead, they provide developers with a familiar interface for manipulating binary data. This is useful when interacting with platform features, such as audio and video manipulation, access to raw data using WebSockets, and so forth. Each entry in a JavaScript typed array is a raw binary value in one of a number of supported formats, from 8-bit integers to 64-bit floating-point numbers.\n\nTyped array objects share many of the same methods as arrays with similar semantics. However, typed arrays are not to be confused with normal arrays, as calling Array.isArray() on a typed array returns false. Moreover, not all methods available for normal arrays are supported by typed arrays (e.g., push and pop).",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Iterators and generators": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_generators#iterators",
      "title": "Iterators and generators",
      "description": "Iterators and Generators bring the concept of iteration directly into the core language and provide a mechanism for customizing the behavior of for...of loops.\n\nFor details, see also:\n\nIn JavaScript an iterator is an object which defines a sequence and potentially a return value upon its termination.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Internationalization": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Internationalization#number_formatting",
      "title": "Internationalization",
      "description": "The Intl object is the namespace for the ECMAScript Internationalization API, which provides a wide range of locale- and culture-sensitive data and operations.\n\nThe Intl object is very use-case driven. It provides a separate object for each use case that requires locale-specific logic. Currently, it provides the following functionalities:\n\nMost Intl APIs share a similar design (Intl.Locale is the only exception). You start by constructing an instance with the desired locale and options. This defines a set of rules for the desired operation (formatting, collation, segmentation, etc.). Then, when you call the method on the instance, such as format(), compare(), or segment(), the object applies the specified rule to the passed data.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Using classes": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_classes#declaring_a_class",
      "title": "Using classes",
      "description": "JavaScript is a prototype-based language \u00e2\u0080\u0094 an object's behaviors are specified by its own properties and its prototype's properties. However, with the addition of classes, the creation of hierarchies of objects and the inheritance of properties and their values are much more in line with other object-oriented languages such as Java. In this section, we will demonstrate how objects can be created from classes.\n\nIn many other languages, classes, or constructors, are clearly distinguished from objects, or instances. In JavaScript, classes are mainly an abstraction over the existing prototypical inheritance mechanism \u00e2\u0080\u0094 all patterns are convertible to prototype-based inheritance. Classes themselves are normal JavaScript values as well, and have their own prototype chains. In fact, most plain JavaScript functions can be used as constructors \u00e2\u0080\u0094 you use the new operator with a constructor function to create a new object.\n\nWe will be playing with the well-abstracted class model in this tutorial, and discuss what semantics classes offer. If you want to dive deep into the underlying prototype system, you can read the Inheritance and the prototype chain guide.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Using promises": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises#timing",
      "title": "Using promises",
      "description": "A Promise is an object representing the eventual completion or failure of an asynchronous operation. Since most people are consumers of already-created promises, this guide will explain consumption of returned promises before explaining how to create them.\n\nEssentially, a promise is a returned object to which you attach callbacks, instead of passing callbacks into a function. Imagine a function, createAudioFileAsync(), which asynchronously generates a sound file given a configuration record and two callback functions: one called if the audio file is successfully created, and the other called if an error occurs.\n\nHere's some code that uses createAudioFileAsync():",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Enumerability and ownership of properties": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Enumerability_and_ownership_of_properties",
      "title": "Enumerability and ownership of properties",
      "description": "Every property in JavaScript objects can be classified by three factors:\n\nEnumerable properties are those properties whose internal enumerable flag is set to true, which is the default for properties created via simple assignment or via a property initializer. Properties defined via Object.defineProperty and such are not enumerable by default. Most iteration means (such as for...in loops and Object.keys) only visit enumerable keys.\n\nOwnership of properties is determined by whether the property belongs to the object directly and not to its prototype chain.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Modules": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules#default_exports_versus_named_exports",
      "title": "JavaScript modules",
      "description": "This guide gives you all you need to get started with JavaScript module syntax.\n\nJavaScript programs started off pretty small \u00e2\u0080\u0094 most of its usage in the early days was to do isolated scripting tasks, providing a bit of interactivity to your web pages where needed, so large scripts were generally not needed. Fast forward a few years and we now have complete applications being run in browsers with a lot of JavaScript, as well as JavaScript being used in other contexts (Node.js, for example).\n\nComplex projects necessitate a mechanism for splitting JavaScript programs into separate modules that can be imported when needed. Node.js has had this ability for a long time, and there are a number of JavaScript libraries and frameworks that enable module usage (for example, other CommonJS and AMD-based module systems like RequireJS, webpack, and Babel).",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Data structures": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Data_structures",
      "title": "JavaScript data types and data structures",
      "description": "Programming languages all have built-in data structures, but these often differ from one language to another. This article attempts to list the built-in data structures available in JavaScript and what properties they have. These can be used to build other data structures.\n\nThe language overview offers a similar summary of the common data types, but with more comparisons to other languages.\n\nJavaScript is a dynamic language with dynamic types. Variables in JavaScript are not directly associated with any particular value type, and any variable can be assigned (and re-assigned) values of all types:",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Equality comparisons and sameness": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Equality_comparisons_and_sameness",
      "title": "Equality comparisons and sameness",
      "description": "JavaScript provides three different value-comparison operations:\n\nWhich operation you choose depends on what sort of comparison you are looking to perform. Briefly:\n\nThey correspond to three of four equality algorithms in JavaScript:",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Language overview": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Language_overview",
      "title": "JavaScript language overview",
      "description": "JavaScript is a multi-paradigm, dynamic language with types and operators, standard built-in objects, and methods. Its syntax is based on the Java and C languages \u00e2\u0080\u0094 many structures from those languages apply to JavaScript as well. JavaScript supports object-oriented programming with object prototypes and classes. It also supports functional programming since functions are first-class objects that can be easily created via expressions and passed around like any other object.\n\nThis page serves as a quick overview of various JavaScript language features, written for readers with background in other languages, such as C or Java.\n\nLet's start off by looking at the building blocks of any language: the types. JavaScript programs manipulate values, and those values all belong to a type. JavaScript offers seven primitive types:",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Inheritance and the prototype chain": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain",
      "title": "Inheritance and the prototype chain",
      "description": "In programming, inheritance refers to passing down characteristics from a parent to a child so that a new piece of code can reuse and build upon the features of an existing one. JavaScript implements inheritance by using objects. Each object has an internal link to another object called its prototype. That prototype object has a prototype of its own, and so on until an object is reached with null as its prototype. By definition, null has no prototype and acts as the final link in this prototype chain. It is possible to mutate any member of the prototype chain or even swap out the prototype at runtime, so concepts like static dispatching do not exist in JavaScript.\n\nJavaScript is a bit confusing for developers experienced in class-based languages (like Java or C++), as it is dynamic and does not have static types. While this confusion is often considered to be one of JavaScript's weaknesses, the prototypal inheritance model itself is, in fact, more powerful than the classic model. It is, for example, fairly trivial to build a classic model on top of a prototypal model \u00e2\u0080\u0094 which is how classes are implemented.\n\nAlthough classes are now widely adopted and have become a new paradigm in JavaScript, classes do not bring a new inheritance pattern. While classes abstract most of the prototypal mechanism away, understanding how prototypes work under the hood is still useful.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Closures": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Closures",
      "title": "Closures",
      "description": "A closure is the combination of a function bundled together (enclosed) with references to its surrounding state (the lexical environment). In other words, a closure gives a function access to its outer scope. In JavaScript, closures are created every time a function is created, at function creation time.\n\nConsider the following example code:\n\ninit() creates a local variable called name and a function called displayName(). The displayName() function is an inner function that is defined inside init() and is available only within the body of the init() function. Note that the displayName() function has no local variables of its own. However, since inner functions have access to the variables of outer scopes, displayName() can access the variable name declared in the parent function, init().",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Meta programming": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Meta_programming",
      "title": "Meta programming",
      "description": "The Proxy and Reflect objects allow you to intercept and define custom behavior for fundamental language operations (e.g., property lookup, assignment, enumeration, function invocation, etc.). With the help of these two objects you are able to program at the meta level of JavaScript.\n\nProxy objects allow you to intercept certain operations and to implement custom behaviors.\n\nFor example, getting a property on an object:",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Memory management": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Memory_management",
      "title": "Memory management",
      "description": "Low-level languages like C, have manual memory management primitives such as malloc() and free(). In contrast, JavaScript automatically allocates memory when objects are created and frees it when they are not used anymore (garbage collection). This automaticity is a potential source of confusion: it can give developers the false impression that they don't need to worry about memory management.\n\nRegardless of the programming language, the memory life cycle is pretty much always the same:\n\nThe second part is explicit in all languages. The first and last parts are explicit in low-level languages but are mostly implicit in high-level languages like JavaScript.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    }
  },
  "Reference": {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference",
    "title": "JavaScript reference",
    "description": "The JavaScript reference serves as a repository of facts about the JavaScript language. The entire language is described here in detail. As you write JavaScript code, you'll refer to these pages often (thus the title \"JavaScript reference\").\n\nThe JavaScript language is intended to be used within some larger environment, be it a browser, server-side scripts, or similar. For the most part, this reference attempts to be environment-agnostic and does not target a web browser environment.\n\nIf you are new to JavaScript, start with the guide. Once you have a firm grasp of the fundamentals, you can use the reference to get more details on individual objects and language constructs.",
    "syntax": [],
    "parameters": [],
    "return_value": "",
    "examples": [],
    "browser_compatibility": {},
    "see_also": [],
    "inheritance": [],
    "properties": [],
    "methods": [],
    "children": [],
    "Statements": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements",
      "title": "Statements and declarations",
      "description": "JavaScript applications consist of statements with an appropriate syntax. A single statement may span multiple lines. Multiple statements may occur on a single line if each statement is separated by a semicolon. This isn't a keyword, but a group of keywords.\n\nFor an alphabetical listing see the sidebar on the left.\n\nSpecifies the value to be returned by a function.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": [],
      "class": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/class",
        "title": "class",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since March 2017.\n\nThe class declaration creates a binding of a new class to a given name.\n\nYou can also define classes using the class expression.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "block": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/block",
        "title": "Block statement",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nA block statement is used to group zero or more statements. The block is delimited by a pair of braces (\"curly braces\") and contains a list of zero or more statements and declarations.\n\nStatements and declarations grouped within the block statement.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "break": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/break",
        "title": "break",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe break statement terminates the current loop or switch statement and transfers program control to the statement following the terminated statement. It can also be used to jump past a labeled statement when used within that labeled statement.\n\nIdentifier associated with the label of the statement to break to. If the break statement is not nested within a loop or switch, then the label identifier is required.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "async function*": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function*",
        "title": "async function*",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since January 2020.\n\nThe async function* declaration creates a binding of a new async generator function to a given name.\n\nYou can also define async generator functions using the async function* expression.",
        "syntax": [],
        "parameters": [
          {
            "name": "name",
            "description": "The function name."
          },
          {
            "name": "param Optional",
            "description": "The name of a formal parameter for the function. For the parameters' syntax, see the Functions reference."
          },
          {
            "name": "statements Optional",
            "description": "The statements comprising the body of the function."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "async function": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function",
        "title": "async function",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since April 2017.\n\nThe async function declaration creates a binding of a new async function to a given name. The await keyword is permitted within the function body, enabling asynchronous, promise-based behavior to be written in a cleaner style and avoiding the need to explicitly configure promise chains.\n\nYou can also define async functions using the async function expression.",
        "syntax": [],
        "parameters": [
          {
            "name": "name",
            "description": "The function's name."
          },
          {
            "name": "param Optional",
            "description": "The name of a formal parameter for the function. For the parameters' syntax, see the Functions reference."
          },
          {
            "name": "statements Optional",
            "description": "The statements comprising the body of the function. The await\nmechanism may be used."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Empty": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/Empty",
        "title": "Empty statement",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nAn empty statement is used to provide no statement, although the\nJavaScript syntax would expect one.\n\nThe empty statement is a semicolon (;) indicating that no statement will\nbe executed, even if JavaScript syntax requires one.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "continue": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/continue",
        "title": "continue",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe continue statement terminates execution of the statements in the current iteration of the current or labeled loop, and continues execution of the loop with the next iteration.\n\nIdentifier associated with the label of the statement.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "do...while": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/do...while",
        "title": "do...while",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe do...while statement creates a loop that executes a specified statement as long as the test condition evaluates to true. The condition is evaluated after executing the statement, resulting in the specified statement executing at least once.\n\nA statement that is executed at least once and re-executed as long as the condition evaluates to true. You can use a block statement to execute multiple statements.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "debugger": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/debugger",
        "title": "debugger",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe debugger statement invokes any available debugging\nfunctionality, such as setting a breakpoint. If no debugging functionality is available,\nthis statement has no effect.\n\nThe following example shows code where a debugger statement has been\ninserted, to invoke a debugger (if one exists) when the function is called.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "const": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const",
        "title": "const",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe const declaration declares block-scoped local variables. The value of a constant can't be changed through reassignment using the assignment operator, but if a constant is an object, its properties can be added, updated, or removed.\n\nThe name of the variable to declare. Each must be a legal JavaScript identifier or a destructuring binding pattern.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "for-await...of": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of",
        "title": "for await...of",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since January 2020.\n\nThe for await...of statement creates a loop iterating over async iterable objects as well as sync iterables. This statement can only be used in contexts where await can be used, which includes inside an async function body and in a module.\n\nReceives a value from the sequence on each iteration. May be either a declaration with const, let, or var, or an assignment target (e.g., a previously declared variable, an object property, or a destructuring pattern). Variables declared with var are not local to the loop, i.e., they are in the same scope the for await...of loop is in.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "for": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for",
        "title": "for",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe for statement creates a loop that consists of three optional expressions, enclosed in parentheses and separated by semicolons, followed by a statement (usually a block statement) to be executed in the loop.\n\nAn expression (including assignment expressions) or variable declaration evaluated once before the loop begins. Typically used to initialize a counter variable. This expression may optionally declare new variables with var or let keywords. Variables declared with var are not local to the loop, i.e., they are in the same scope the for loop is in. Variables declared with let are local to the statement.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Expression statement": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/Expression_statement",
        "title": "Expression statement",
        "description": "An expression statement is an expression used in a place where a statement is expected. The expression is evaluated and its result is discarded \u00e2\u0080\u0094 therefore, it makes sense only for expressions that have side effects, such as executing a function or updating a variable.\n\nAn arbitrary expression to be evaluated. There are certain expressions that may be ambiguous with other statements and are thus forbidden.\n\nApart from the dedicated statement syntaxes, you can also use almost any expression as a statement on its own. The expression statement syntax requires a semicolon at the end, but the automatic semicolon insertion process may insert one for you if the lack of a semicolon results in invalid syntax.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "for...in": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in",
        "title": "for...in",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe for...in statement iterates over all enumerable string properties of an object (ignoring properties keyed by symbols), including inherited enumerable properties.\n\nReceives a string property name on each iteration. May be either a declaration with const, let, or var, or an assignment target (e.g., a previously declared variable, an object property, or a destructuring pattern). Variables declared with var are not local to the loop, i.e., they are in the same scope the for...in loop is in.",
        "syntax": [],
        "parameters": [
          {
            "name": "variable",
            "description": "Receives a string property name on each iteration. May be either a declaration with const, let, or var, or an assignment target (e.g., a previously declared variable, an object property, or a destructuring pattern). Variables declared with var are not local to the loop, i.e., they are in the same scope the for...in loop is in."
          },
          {
            "name": "object",
            "description": "Object whose non-symbol enumerable properties are iterated over."
          },
          {
            "name": "statement",
            "description": "A statement to be executed on every iteration. May reference variable. You can use a block statement to execute multiple statements."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "export": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export",
        "title": "export",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since May 2018.\n\nThe export declaration is used to export values from a JavaScript module. Exported values can then be imported into other programs with the import declaration or dynamic import. The value of an imported binding is subject to change in the module that exports it \u00e2\u0080\u0094 when a module updates the value of a binding that it exports, the update will be visible in its imported value.\n\nIn order to use the export declaration in a source file, the file must be interpreted by the runtime as a module. In HTML, this is done by adding type=\"module\" to the <script> tag, or by being imported by another module. Modules are automatically interpreted in strict mode.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "function*": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*",
        "title": "function*",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nThe function* declaration creates a binding of a new generator function to a given name. A generator function can be exited and later re-entered, with its context (variable bindings) saved across re-entrances.\n\nYou can also define generator functions using the function* expression.",
        "syntax": [],
        "parameters": [
          {
            "name": "name",
            "description": "The function name."
          },
          {
            "name": "param Optional",
            "description": "The name of a formal parameter for the function. For the parameters' syntax, see the Functions reference."
          },
          {
            "name": "statements Optional",
            "description": "The statements comprising the body of the function."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "if...else": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else",
        "title": "if...else",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe if...else statement executes a statement if a specified condition is truthy. If the condition is falsy, another statement in the optional else clause will be executed.\n\nAn expression that is considered to be either truthy or falsy.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "function": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function",
        "title": "function",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe function declaration creates a binding of a new function to a given name.\n\nYou can also define functions using the function expression.",
        "syntax": [],
        "parameters": [
          {
            "name": "name",
            "description": "The function name."
          },
          {
            "name": "param Optional",
            "description": "The name of a formal parameter for the function. Maximum number of arguments varies in different engines. For the parameters' syntax, see the Functions reference."
          },
          {
            "name": "statements Optional",
            "description": "The statements which comprise the body of the function."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "for...of": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of",
        "title": "for...of",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe for...of statement executes a loop that operates on a sequence of values sourced from an iterable object. Iterable objects include instances of built-ins such as Array, String, TypedArray, Map, Set, NodeList (and other DOM collections), as well as the arguments object, generators produced by generator functions, and user-defined iterables.\n\nReceives a value from the sequence on each iteration. May be either a declaration with const, let, or var, or an assignment target (e.g., a previously declared variable, an object property, or a destructuring pattern). Variables declared with var are not local to the loop, i.e., they are in the same scope the for...of loop is in.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "import": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import",
        "title": "import",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since May 2018.\n\n* Some parts of this feature may have varying levels of support.\n\nThe static import declaration is used to import read-only live bindings which are exported by another module. The imported bindings are called live bindings because they are updated by the module that exported the binding, but cannot be re-assigned by the importing module.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": [],
        "with": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import/with",
          "title": "Import attributes",
          "description": "Since April 2025, this feature works across the latest devices and browser versions. This feature might not work in older devices or browsers.\n\n* Some parts of this feature may have varying levels of support.\n\nNote:\nA previous version of this proposal used the assert keyword instead of with. The assertion feature is now non-standard. Check the browser compatibility table for details.",
          "syntax": [],
          "parameters": [
            {
              "name": "keyN",
              "description": "An attribute key. Can be an identifier or a string literal. All keys must be unique and must be known to the runtime."
            },
            {
              "name": "\"dataN\"",
              "description": "An attribute value. Must be a string literal."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        }
      },
      "label": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label",
        "title": "Labeled statement",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nA labeled statement is any statement that is prefixed with an identifier. You can jump to this label using a break or continue statement nested within the labeled statement.\n\nAny JavaScript identifier that is not a reserved word.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "let": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let",
        "title": "let",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nThe let declaration declares re-assignable, block-scoped local variables, optionally initializing each to a value.\n\nThe name of the variable to declare. Each must be a legal JavaScript identifier or a destructuring binding pattern.",
        "syntax": [],
        "parameters": [
          {
            "name": "nameN",
            "description": "The name of the variable to declare. Each must be a legal JavaScript identifier or a destructuring binding pattern."
          },
          {
            "name": "valueN Optional",
            "description": "Initial value of the variable. It can be any legal expression. Default value is undefined."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "switch": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch",
        "title": "switch",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe switch statement evaluates an expression, matching the expression's value against a series of case clauses, and executes statements after the first case clause with a matching value, until a break statement is encountered. The default clause of a switch statement will be jumped to if no case matches the expression's value.\n\nAn expression whose result is matched against each case clause.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "return": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/return",
        "title": "return",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe return statement ends function execution and specifies a value to be returned to the function caller.\n\nThe expression whose value is to be returned. If omitted, undefined is returned.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "try...catch": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch",
        "title": "try...catch",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe try...catch statement is comprised of a try block and either a catch block, a finally block, or both. The code in the try block is executed first, and if it throws an exception, the code in the catch block will be executed. The code in the finally block will always be executed before control flow exits the entire construct.\n\nThe statements to be executed.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "with": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/with",
        "title": "with",
        "description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nNote:\nUse of the with statement is not recommended, as it may be the source of confusing bugs and compatibility issues, makes optimization impossible, and is forbidden in strict mode. The recommended alternative is to assign the object whose properties you want to access to a temporary variable.\n\nThe with statement extends the scope chain for a statement.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "var": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var",
        "title": "var",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe var statement declares function-scoped or globally-scoped variables, optionally initializing each to a value.\n\nThe name of the variable to declare. Each must be a legal JavaScript identifier or a destructuring binding pattern.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "throw": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/throw",
        "title": "throw",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe throw statement throws a user-defined exception. Execution of the current function will stop (the statements after throw won't be executed), and control will be passed to the first catch block in the call stack. If no catch block exists among caller functions, the program will terminate.\n\nThe expression to throw.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "while": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/while",
        "title": "while",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe while statement creates a loop that executes a specified statement as long as the test condition evaluates to true. The condition is evaluated before executing the statement.\n\nAn expression evaluated before each pass through the loop. If this condition evaluates to true, statement is executed. When condition evaluates to false, execution continues with the statement after the while loop.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      }
    },
    "Functions": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions",
      "title": "Functions",
      "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nGenerally speaking, a function is a \"subprogram\" that can be called by code external (or internal, in the case of recursion) to the function. Like the program itself, a function is composed of a sequence of statements called the function body. Values can be passed to a function as parameters, and the function will return a value.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": [],
      "Default parameters": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters",
        "title": "Default parameters",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nDefault function parameters allow named parameters to be initialized with default values if no value or undefined is passed.\n\nIn JavaScript, function parameters default to undefined. However, it's often useful to set a different default value. This is where default parameters can help.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "rest parameters": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters",
        "title": "Rest parameters",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nThe rest parameter syntax allows a function to accept an indefinite number of arguments as an array, providing a way to represent variadic functions in JavaScript.\n\nThere are some additional syntax restrictions:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "get": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get",
        "title": "get",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe get syntax binds an object property to a function that will be called when that property is looked up. It can also be used in classes.\n\nThere are some additional syntax restrictions:",
        "syntax": [],
        "parameters": [
          {
            "name": "prop",
            "description": "The name of the property to bind to the given function. In the same way as other properties in object initializers, it can be a string literal, a number literal, or an identifier."
          },
          {
            "name": "expression",
            "description": "You can also use expressions for a computed property name to bind to the given function."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Method definitions": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Method_definitions",
        "title": "Method definitions",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2015.\n\nMethod definition is a shorter syntax for defining a function property in an object initializer. It can also be used in classes.\n\nThe shorthand syntax is similar to the getter and setter syntax.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Arrow functions": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions",
        "title": "Arrow function expressions",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nAn arrow function expression is a compact alternative to a traditional function expression, with some semantic differences and deliberate limitations in usage:\n\nRest parameters, default parameters, and destructuring within params are supported, and always require parentheses:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "set": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set",
        "title": "set",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe set syntax binds an object property to a function to be called when there is an attempt to set that property. It can also be used in classes.\n\nThere are some additional syntax restrictions:",
        "syntax": [],
        "parameters": [
          {
            "name": "prop",
            "description": "The name of the property to bind to the given function. In the same way as other properties in object initializers, it can be a string literal, a number literal, or an identifier."
          },
          {
            "name": "val",
            "description": "An alias for the variable that holds the value attempted to be assigned to\nprop."
          },
          {
            "name": "expression",
            "description": "You can also use expressions for a computed property name to bind to the given function."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "arguments": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments",
        "title": "The arguments object",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\narguments is an array-like object accessible inside functions that contains the values of the arguments passed to that function.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      }
    },
    "Classes": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes",
      "title": "Classes",
      "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since March 2016.\n\n* Some parts of this feature may have varying levels of support.\n\nClasses are a template for creating objects. They encapsulate data with code to work on that data. Classes in JS are built on prototypes but also have some syntax and semantics that are unique to classes.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": [],
      "Public class fields": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Public_class_fields",
        "title": "Public class fields",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2022.\n\nPublic fields are writable, enumerable, and configurable properties defined on each class instance or class constructor.\n\nThere are some additional syntax restrictions:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Private properties": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_properties",
        "title": "Private properties",
        "description": "Private properties are counterparts of the regular class properties which are public, including class fields, class methods, etc. Private properties get created by using a hash # prefix and cannot be legally referenced outside of the class. The privacy encapsulation of these class properties is enforced by JavaScript itself. The only way to access a private property is via dot notation, and you can only do so within the class that defines the private property.\n\nPrivate properties were not native to the language before this syntax existed. In prototypal inheritance, its behavior may be emulated with WeakMap objects or closures, but they can't compare to the # syntax in terms of ergonomics.\n\nThere are some additional syntax restrictions:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "static": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static",
        "title": "static",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since March 2016.\n\nThe static keyword defines a static method or field for a class, or a static initialization block (see the link for more information about this usage). Static properties cannot be directly accessed on instances of the class. Instead, they're accessed on the class itself.\n\nStatic methods are often utility functions, such as functions to create or clone objects, whereas static properties are useful for caches, fixed-configuration, or any other data you don't need to be replicated across instances.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "extends": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/extends",
        "title": "extends",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since March 2016.\n\nThe extends keyword is used in class declarations or class expressions to create a class that is a child of another class.\n\nAn expression that evaluates to a constructor function (including a class) or null.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "constructor": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/constructor",
        "title": "constructor",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since March 2016.\n\nThe constructor method is a special method of a class for creating and initializing an object instance of that class.\n\nNote:\nThis page introduces the constructor syntax. For the constructor property present on all objects, see Object.prototype.constructor.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Static initialization blocks": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Static_initialization_blocks",
        "title": "Static initialization blocks",
        "description": "Since March 2023, this feature works across the latest devices and browser versions. This feature might not work in older devices or browsers.\n\nStatic initialization blocks are declared within a class. It contains statements to be evaluated during class initialization. This permits more flexible initialization logic than static properties, such as using try...catch or setting multiple fields from a single value. Initialization is performed in the context of the current class declaration, with access to private state, which allows the class to share information of its private properties with other classes or functions declared in the same scope (analogous to \"friend\" classes in C++).\n\nWithout static initialization blocks, complex static initialization might be achieved by calling a static method after the class declaration:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      }
    },
    "Global Objects": {
      "AggregateError": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AggregateError",
        "title": "AggregateError",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2020.\n\n* Some parts of this feature may have varying levels of support.\n\nThe AggregateError object represents an error when several errors need to be wrapped in a single error. It is thrown when multiple errors need to be reported by an operation, for example by Promise.any(), when all promises passed to it reject.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "AsyncGenerator": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator",
        "title": "AsyncGenerator",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since January 2020.\n\nThe AsyncGenerator object is returned by an async generator function and it conforms to both the async iterable protocol and the async iterator protocol.\n\nAsync generator methods always yield Promise objects.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "AsyncGeneratorFunction": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGeneratorFunction",
        "title": "AsyncGeneratorFunction",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since January 2020.\n\nThe AsyncGeneratorFunction object provides methods for async generator functions. In JavaScript, every async generator function is actually an AsyncGeneratorFunction object.\n\nNote that AsyncGeneratorFunction is not a global object. It can be obtained with the following code:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Array": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
        "title": "Array",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nThe Array object, as with arrays in other programming languages, enables storing a collection of multiple items under a single variable name, and has members for performing common array operations.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "AsyncFunction": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction",
        "title": "AsyncFunction",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since April 2017.\n\nThe AsyncFunction object provides methods for async functions. In JavaScript, every async function is actually an AsyncFunction object.\n\nNote that AsyncFunction is not a global object. It can be obtained with the following code:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "ArrayBuffer": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
        "title": "ArrayBuffer",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nThe ArrayBuffer object is used to represent a generic raw binary data buffer.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Atomics": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics",
        "title": "Atomics",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since December 2021.\n\n* Some parts of this feature may have varying levels of support.\n\nThe Atomics namespace object contains static methods for carrying out atomic operations. They are used with SharedArrayBuffer and ArrayBuffer objects.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "AsyncIterator": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncIterator",
        "title": "AsyncIterator",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since January 2020.\n\nAn AsyncIterator object is an object that conforms to the async iterator protocol by providing a next() method that returns a promise fulfilling to an iterator result object. The AsyncIterator.prototype object is a hidden global object that all built-in async iterators inherit from. It provides an [Symbol.asyncIterator]() method that returns the async iterator object itself, making the async iterator also async iterable.\n\nNote that AsyncIterator is not a global object, although it will be in the future with the async iterator helpers proposal. The AsyncIterator.prototype object shared by all built-in async iterators can be obtained with the following code:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "BigInt": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt",
        "title": "BigInt",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2020.\n\nBigInt values represent integer values which are too high or too low to be represented by the number primitive.\n\nA BigInt value, also sometimes just called a BigInt, is a bigint primitive, created by appending n to the end of an integer literal, or by calling the BigInt() function (without the new operator) and giving it an integer value or string value.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "BigInt64Array": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array",
        "title": "BigInt64Array",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2021.\n\nThe BigInt64Array typed array represents an array of 64-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0n unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n\nBigInt64Array is a subclass of the hidden TypedArray class.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "BigUint64Array": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array",
        "title": "BigUint64Array",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2021.\n\nThe BigUint64Array typed array represents an array of 64-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0n unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n\nBigUint64Array is a subclass of the hidden TypedArray class.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "decodeURIComponent": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent",
        "title": "decodeURIComponent()",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe decodeURIComponent() function decodes a Uniform Resource Identifier (URI) component previously created by encodeURIComponent() or by a similar routine.\n\nAn encoded component of a Uniform Resource Identifier.",
        "syntax": [],
        "parameters": [
          {
            "name": "encodedURI",
            "description": "An encoded component of a Uniform Resource Identifier."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Date": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
        "title": "Date",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nJavaScript Date objects represent a single moment in time in a platform-independent format. Date objects encapsulate an integral number that represents milliseconds since the midnight at the beginning of January 1, 1970, UTC (the epoch).",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "DataView": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
        "title": "DataView",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nThe DataView view provides a low-level interface for reading and writing multiple number types in a binary ArrayBuffer, without having to care about the platform's endianness.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "decodeURI": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURI",
        "title": "decodeURI()",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe decodeURI() function decodes a Uniform Resource Identifier (URI) previously created by encodeURI() or a similar routine.\n\nA complete, encoded Uniform Resource Identifier.",
        "syntax": [],
        "parameters": [
          {
            "name": "encodedURI",
            "description": "A complete, encoded Uniform Resource Identifier."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Boolean": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
        "title": "Boolean",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nBoolean values can be one of two values: true or false, representing the truth value of a logical proposition.\n\nBoolean values are typically produced by relational operators, equality operators, and logical NOT (!). They can also be produced by functions that represent conditions, such as Array.isArray(). Note that binary logical operators such as && and || return the values of the operands, which may or may not be boolean values.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "escape": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/escape",
        "title": "escape()",
        "description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nNote: escape() is a non-standard function implemented by browsers and was only standardized for cross-engine compatibility. It is not required to be implemented by all JavaScript engines and may not work everywhere. Use encodeURIComponent() or encodeURI() if possible.\n\nThe escape() function computes a new string in which certain characters have been replaced by hexadecimal escape sequences.",
        "syntax": [],
        "parameters": [
          {
            "name": "str",
            "description": "A string to be encoded."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "eval": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval",
        "title": "eval()",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nWarning:\nExecuting JavaScript from a string is an enormous security risk. It is far too easy for a bad actor to run arbitrary code when you use eval(). See Never use direct eval()!, below.\n\nThe eval() function evaluates JavaScript code represented as a string and returns its completion value. The source is parsed as a script.",
        "syntax": [],
        "parameters": [
          {
            "name": "script",
            "description": "A string representing a JavaScript expression, statement, or sequence of statements. The expression can include variables and properties of existing objects. It will be parsed as a script, so import declarations (which can only exist in modules) are not allowed."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Error": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
        "title": "Error",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nError objects are thrown when runtime errors occur. The Error object can also be used as a base object for user-defined exceptions. See below for standard built-in error types.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "encodeURIComponent": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent",
        "title": "encodeURIComponent()",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe encodeURIComponent() function encodes a URI by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two surrogate characters). Compared to encodeURI(), this function encodes more characters, including those that are part of the URI syntax.\n\nA string to be encoded as a URI component (a path, query string, fragment, etc.). Other values are converted to strings.",
        "syntax": [],
        "parameters": [
          {
            "name": "uriComponent",
            "description": "A string to be encoded as a URI component (a path, query string, fragment, etc.). Other values are converted to strings."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "encodeURI": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI",
        "title": "encodeURI()",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe encodeURI() function encodes a URI by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two surrogate characters). Compared to encodeURIComponent(), this function encodes fewer characters, preserving those that are part of the URI syntax.\n\nA string to be encoded as a URI.",
        "syntax": [],
        "parameters": [
          {
            "name": "uri",
            "description": "A string to be encoded as a URI."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "EvalError": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
        "title": "EvalError",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nThe EvalError object indicates an error regarding the global eval() function. This exception is not thrown by JavaScript anymore, however the EvalError object remains for compatibility.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "FinalizationRegistry": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry",
        "title": "FinalizationRegistry",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since April 2021.\n\n* Some parts of this feature may have varying levels of support.\n\nA FinalizationRegistry object lets you request a callback when a value is garbage-collected.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Float64Array": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
        "title": "Float64Array",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Float64Array typed array represents an array of 64-bit floating point numbers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0 unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n\nFloat64Array is a subclass of the hidden TypedArray class.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Float32Array": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
        "title": "Float32Array",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Float32Array typed array represents an array of 32-bit floating point numbers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0 unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n\nFloat32Array is a subclass of the hidden TypedArray class.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Float16Array": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float16Array",
        "title": "Float16Array",
        "description": "Since April 2025, this feature works across the latest devices and browser versions. This feature might not work in older devices or browsers.\n\nThe Float16Array typed array represents an array of 16-bit floating point numbers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0 unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n\nFloat16Array is a subclass of the hidden TypedArray class.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Generator": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
        "title": "Generator",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nThe Generator object is returned by a generator function and it conforms to both the iterable protocol and the iterator protocol.\n\nGenerator is a subclass of the hidden Iterator class.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Infinity": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
        "title": "Infinity",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Infinity global property is a numeric value representing infinity.\n\nThe same number value as Number.POSITIVE_INFINITY.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "globalThis": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis",
        "title": "globalThis",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since January 2020.\n\nThe globalThis global property contains the global this value, which is usually akin to the global object.\n\nThe global this object.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Function": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
        "title": "Function",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nThe Function object provides methods for functions. In JavaScript, every function is actually a Function object.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": [],
        "toString": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/toString",
          "title": "Function.prototype.toString()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nThe toString() method of Function instances returns a string representing the source code of this function.",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        }
      },
      "GeneratorFunction": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
        "title": "GeneratorFunction",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nThe GeneratorFunction object provides methods for generator functions. In JavaScript, every generator function is actually a GeneratorFunction object.\n\nNote that GeneratorFunction is not a global object. It can be obtained with the following code:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Int8Array": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
        "title": "Int8Array",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Int8Array typed array represents an array of 8-bit signed integers. The contents are initialized to 0 unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n\nInt8Array is a subclass of the hidden TypedArray class.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "InternalError": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
        "title": "InternalError",
        "description": "Non-standard: This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.\n\nThe InternalError object indicates an error that occurred internally in the JavaScript engine.\n\nExample cases are mostly when something is too large, e.g.:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Intl": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl",
        "title": "Intl",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2017.\n\n* Some parts of this feature may have varying levels of support.\n\nThe Intl namespace object contains several constructors as well as functionality common to the internationalization constructors and other language sensitive functions. Collectively, they comprise the ECMAScript Internationalization API, which provides language sensitive string comparison, number formatting, date and time formatting, and more.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Int32Array": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
        "title": "Int32Array",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Int32Array typed array represents an array of 32-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0 unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n\nInt32Array is a subclass of the hidden TypedArray class.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Int16Array": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
        "title": "Int16Array",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Int16Array typed array represents an array of 16-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0 unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n\nInt16Array is a subclass of the hidden TypedArray class.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Map": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
        "title": "Map",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nThe Map object holds key-value pairs and remembers the original insertion order of the keys.\nAny value (both objects and primitive values) may be used as either a key or a value.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Iterator": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator",
        "title": "Iterator",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\n* Some parts of this feature may have varying levels of support.\n\nAn Iterator object is an object that conforms to the iterator protocol by providing a next() method that returns an iterator result object. All built-in iterators inherit from the Iterator class. The Iterator class provides a [Symbol.iterator]() method that returns the iterator object itself, making the iterator also iterable. It also provides some helper methods for working with iterators.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "JSON": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
        "title": "JSON",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nThe JSON namespace object contains static methods for parsing values from and converting values to JavaScript Object Notation (JSON).",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "isNaN": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN",
        "title": "isNaN()",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe isNaN() function determines whether a value is NaN, first converting the value to a number if necessary. Because coercion inside the isNaN() function can be surprising, you may prefer to use Number.isNaN().\n\nThe value to be tested.",
        "syntax": [],
        "parameters": [
          {
            "name": "value",
            "description": "The value to be tested."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "isFinite": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite",
        "title": "isFinite()",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe isFinite() function determines whether a value is finite, first converting the value to a number if necessary. A finite number is one that's not NaN or \u00c2\u00b1Infinity. Because coercion inside the isFinite() function can be surprising, you may prefer to use Number.isFinite().\n\nThe value to be tested.",
        "syntax": [],
        "parameters": [
          {
            "name": "value",
            "description": "The value to be tested."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Math": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math",
        "title": "Math",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nThe Math namespace object contains static properties and methods for mathematical constants and functions.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Object": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#static_methods",
        "title": "Object",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nThe Object type represents one of JavaScript's data types. It is used to store various keyed collections and more complex entities. Objects can be created using the Object() constructor or the object initializer / literal syntax.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Number": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
        "title": "Number",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nNumber values represent floating-point numbers like 37 or -9.25.\n\nThe Number constructor contains constants and methods for working with numbers. Values of other types can be converted to numbers using the Number() function.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "parseFloat": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseFloat",
        "title": "parseFloat()",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe parseFloat() function parses a string argument and returns a floating point number.\n\nThe value to parse, coerced to a string. Leading whitespace in this argument is ignored.",
        "syntax": [],
        "parameters": [
          {
            "name": "string",
            "description": "The value to parse, coerced to a string. Leading whitespace in this argument is ignored."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "NaN": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
        "title": "NaN",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe NaN global property is a value representing Not-A-Number.\n\nThe same number value as Number.NaN.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "ReferenceError": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
        "title": "ReferenceError",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nThe ReferenceError object represents an error when a variable that doesn't exist (or hasn't yet been initialized) in the current scope is referenced.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "parseInt": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt",
        "title": "parseInt()",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe parseInt() function parses a string argument and returns an integer of the specified radix (the base in mathematical numeral systems).\n\nA string starting with an integer. Leading whitespace in this argument is ignored.",
        "syntax": [],
        "parameters": [
          {
            "name": "string",
            "description": "A string starting with an integer. Leading whitespace in this argument is ignored."
          },
          {
            "name": "radix Optional",
            "description": "An integer between 2 and 36 that represents the radix (the base in mathematical numeral systems) of the string. It is converted to a 32-bit integer; if it's nonzero and outside the range of [2, 36] after conversion, the function will always return NaN. If 0 or not provided, the radix will be inferred based on string's value. Be careful \u00e2\u0080\u0094 this does not always default to 10! The description below explains in more detail what happens when radix is not provided."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Proxy": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
        "title": "Proxy",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nThe Proxy object enables you to create a proxy for another object, which can intercept and redefine fundamental operations for that object.\n\nThe Proxy object allows you to create an object that can be used in place of the original object, but which may redefine fundamental Object operations like getting, setting, and defining properties. Proxy objects are commonly used to log property accesses, validate, format, or sanitize inputs, and so on.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "RangeError": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
        "title": "RangeError",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nThe RangeError object indicates an error when a value is not in the set or range of allowed values.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Promise": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
        "title": "Promise",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nThe Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Set": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
        "title": "Set",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nThe Set object lets you store unique values of any type, whether primitive values or object references.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Reflect": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
        "title": "Reflect",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nThe Reflect namespace object contains static methods for invoking interceptable JavaScript object internal methods. The methods are the same as those of proxy handlers.\n\nUnlike most global objects, Reflect is not a constructor. You cannot use it with the new operator or invoke the Reflect object as a function. All properties and methods of Reflect are static (just like the Math object).",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "RegExp": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
        "title": "RegExp",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nThe RegExp object is used for matching text with a pattern.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "SharedArrayBuffer": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer",
        "title": "SharedArrayBuffer",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since December 2021.\n\n* Some parts of this feature may have varying levels of support.\n\nThe SharedArrayBuffer object is used to represent a generic raw binary data buffer, similar to the ArrayBuffer object, but in a way that they can be used to create views on shared memory. A SharedArrayBuffer is not a Transferable Object, unlike an ArrayBuffer which is transferable.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "String": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
        "title": "String",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nThe String object is used to represent and manipulate a\nsequence of characters.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "TypeError": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
        "title": "TypeError",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nThe TypeError object represents an error when an operation could not be performed, typically (but not exclusively) when a value is not of the expected type.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Symbol": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
        "title": "Symbol",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nSymbol is a built-in object whose constructor returns a symbol primitive \u00e2\u0080\u0094 also called a Symbol value or just a Symbol \u00e2\u0080\u0094 that's guaranteed to be unique. Symbols are often used to add unique property keys to an object that won't collide with keys any other code might add to the object, and which are hidden from any mechanisms other code will typically use to access the object. That enables a form of weak encapsulation, or a weak form of information hiding.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "TypedArray": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray",
        "title": "TypedArray",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nA TypedArray object describes an array-like view of an\nunderlying binary data buffer.\nThere is no global property named TypedArray, nor is there a\ndirectly visible TypedArray constructor. Instead, there are a number of\ndifferent global properties, whose values are typed array constructors for specific\nelement types, listed below. On the following pages you will find common properties and\nmethods that can be used with any typed array containing elements of any type.",
        "syntax": [],
        "parameters": [
          {
            "name": "typedArray",
            "description": "When called with an instance of a TypedArray subclass, the typedArray gets copied into a new typed array. For a non-bigint TypedArray constructor, the typedArray parameter can only be of one of the non-bigint types (such as Int32Array). Similarly, for a bigint TypedArray constructor (BigInt64Array or BigUint64Array), the typedArray parameter can only be of one of the bigint types. Each value in typedArray is converted to the corresponding type of the constructor before being copied into the new array. The length of the new typed array will be same as the length of the typedArray argument."
          },
          {
            "name": "object",
            "description": "When called with an object that's not a TypedArray instance, a new typed array is created in the same way as the TypedArray.from() method."
          },
          {
            "name": "length Optional",
            "description": "When called with a non-object, the parameter will be treated as a number specifying the length of the typed array. An internal array buffer is created in memory, of size length multiplied by BYTES_PER_ELEMENT bytes, filled with zeros. Omitting all parameters is equivalent to using 0 as length."
          },
          {
            "name": "buffer, byteOffset Optional, length Optional",
            "description": "When called with an ArrayBuffer or SharedArrayBuffer instance, and optionally a byteOffset and a length argument, a new typed array view is created that views the specified buffer. The byteOffset (in bytes) and length (in number of elements, each occupying BYTES_PER_ELEMENT bytes) parameters specify the memory range that will be exposed by the typed array view. If both are omitted, all of buffer is viewed; if only length is omitted, the remainder of buffer starting from byteOffset is viewed. If length is omitted, the typed array becomes length-tracking."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Temporal": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal",
        "title": "Temporal",
        "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe Temporal object enables date and time management in various scenarios, including built-in time zone and calendar representation, wall-clock time conversions, arithmetics, formatting, and more. It is designed as a full replacement for the Date object.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "SyntaxError": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
        "title": "SyntaxError",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nThe SyntaxError object represents an error when trying to interpret syntactically invalid code. It is thrown when the JavaScript engine encounters tokens or token order that does not conform to the syntax of the language when parsing code.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Uint8Array": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
        "title": "Uint8Array",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nThe Uint8Array typed array represents an array of 8-bit unsigned integers. The contents are initialized to 0 unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "undefined": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
        "title": "undefined",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe undefined global property represents the primitive\nvalue undefined. It is one of JavaScript's\nprimitive types.\n\nThe primitive value undefined.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Uint16Array": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
        "title": "Uint16Array",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Uint16Array typed array represents an array of 16-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0 unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n\nUint16Array is a subclass of the hidden TypedArray class.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Uint8ClampedArray": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
        "title": "Uint8ClampedArray",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Uint8ClampedArray typed array represents an array of 8-bit unsigned integers clamped to 0\u00e2\u0080\u0093255. The contents are initialized to 0 unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n\nUint8ClampedArray is a subclass of the hidden TypedArray class.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Uint32Array": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
        "title": "Uint32Array",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Uint32Array typed array represents an array of 32-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0 unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n\nUint32Array is a subclass of the hidden TypedArray class.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "unescape": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/unescape",
        "title": "unescape()",
        "description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nNote: unescape() is a non-standard function implemented by browsers and was only standardized for cross-engine compatibility. It is not required to be implemented by all JavaScript engines and may not work everywhere. Use decodeURIComponent() or decodeURI() if possible.\n\nThe unescape() function computes a new string in which hexadecimal escape sequences are replaced with the characters that they represent. The escape sequences might be introduced by a function like escape().",
        "syntax": [],
        "parameters": [
          {
            "name": "str",
            "description": "A string to be decoded."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "WeakMap": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
        "title": "WeakMap",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nA WeakMap is a collection of key/value pairs whose keys must be objects or non-registered symbols, with values of any arbitrary JavaScript type, and which does not create strong references to its keys. That is, an object's presence as a key in a WeakMap does not prevent the object from being garbage collected. Once an object used as a key has been collected, its corresponding values in any WeakMap become candidates for garbage collection as well \u00e2\u0080\u0094 as long as they aren't strongly referred to elsewhere. The only primitive type that can be used as a WeakMap key is symbol \u00e2\u0080\u0094 more specifically, non-registered symbols \u00e2\u0080\u0094 because non-registered symbols are guaranteed to be unique and cannot be re-created.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "WeakRef": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakRef",
        "title": "WeakRef",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since April 2021.\n\n* Some parts of this feature may have varying levels of support.\n\nA WeakRef object lets you hold a weak reference to another object, without preventing that object from getting garbage-collected.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "WeakSet": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
        "title": "WeakSet",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nA WeakSet is a collection of garbage-collectable values, including objects and non-registered symbols. A value in the WeakSet may only occur once. It is unique in the WeakSet's collection.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "URIError": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
        "title": "URIError",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nThe URIError object represents an error when a global URI handling function was used in a wrong way.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      }
    },
    "Operators": {
      "Addition assignment": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Addition_assignment",
        "title": "Addition assignment (+=)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe addition assignment (+=) operator performs addition (which is either numeric addition or string concatenation) on the two operands and assigns the result to the left operand.\n\nx += y is equivalent to x = x + y, except that the expression x is only evaluated once.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "async function*": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/async_function*",
        "title": "async function* expression",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since January 2020.\n\nThe async function* keywords can be used to define an async generator function inside an expression.\n\nYou can also define async generator functions using the async function* declaration.",
        "syntax": [],
        "parameters": [
          {
            "name": "name Optional",
            "description": "The function name. Can be omitted, in which case the function is anonymous. The name is only local to the function body."
          },
          {
            "name": "paramN Optional",
            "description": "The name of a formal parameter for the function. For the parameters' syntax, see the Functions reference."
          },
          {
            "name": "statements Optional",
            "description": "The statements which comprise the body of the function."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Addition": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Addition",
        "title": "Addition (+)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe addition (+) operator produces the sum of numeric operands or string concatenation.\n\nThe + operator is overloaded for two distinct operations: numeric addition and string concatenation. When evaluating, it first coerces both operands to primitives. Then, the two operands' types are tested:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Assignment": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment",
        "title": "Assignment (=)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe assignment (=) operator is used to assign a value to a variable or property. The assignment expression itself has a value, which is the assigned value. This allows multiple assignments to be chained in order to assign a single value to multiple variables.\n\nA valid assignment target, including an identifier or a property accessor. It can also be a destructuring pattern.",
        "syntax": [],
        "parameters": [
          {
            "name": "x",
            "description": "A valid assignment target, including an identifier or a property accessor. It can also be a destructuring pattern."
          },
          {
            "name": "y",
            "description": "An expression specifying the value to be assigned to x."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "async function": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/async_function",
        "title": "async function expression",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since April 2017.\n\nThe async function keywords can be used to define an async function inside an expression.\n\nYou can also define async functions using the async function declaration or the arrow syntax.",
        "syntax": [],
        "parameters": [
          {
            "name": "name Optional",
            "description": "The function name. Can be omitted, in which case the function is anonymous. The name is only local to the function body."
          },
          {
            "name": "paramN Optional",
            "description": "The name of a formal parameter for the function. For the parameters' syntax, see the Functions reference."
          },
          {
            "name": "statements Optional",
            "description": "The statements which comprise the body of the function."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "await": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await",
        "title": "await",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since March 2017.\n\n* Some parts of this feature may have varying levels of support.\n\nThe await operator is used to wait for a Promise and get its fulfillment value. It can only be used inside an async function or at the top level of a module.",
        "syntax": [],
        "parameters": [
          {
            "name": "expression",
            "description": "A Promise, a thenable object, or any value to wait for."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Bitwise AND assignment": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_AND_assignment",
        "title": "Bitwise AND assignment (&=)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe bitwise AND assignment (&=) operator performs bitwise AND on the two operands and assigns the result to the left operand.\n\nx &= y is equivalent to x = x & y, except that the expression x is only evaluated once.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Bitwise OR": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_OR",
        "title": "Bitwise OR (|)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe bitwise OR (|) operator returns a number or BigInt whose binary representation has a 1 in each bit position for which the corresponding bits of either or both operands are 1.\n\nThe | operator is overloaded for two types of operands: number and BigInt. For numbers, the operator returns a 32-bit integer. For BigInts, the operator returns a BigInt. It first coerces both operands to numeric values and tests the types of them. It performs BigInt OR if both operands become BigInts; otherwise, it converts both operands to 32-bit integers and performs number bitwise OR. A TypeError is thrown if one operand becomes a BigInt but the other becomes a number.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Bitwise AND": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_AND",
        "title": "Bitwise AND (&)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe bitwise AND (&) operator returns a number or BigInt whose binary representation has a 1 in each bit position for which the corresponding bits of both operands are 1.\n\nThe & operator is overloaded for two types of operands: number and BigInt. For numbers, the operator returns a 32-bit integer. For BigInts, the operator returns a BigInt. It first coerces both operands to numeric values and tests the types of them. It performs BigInt AND if both operands become BigInts; otherwise, it converts both operands to 32-bit integers and performs number bitwise AND. A TypeError is thrown if one operand becomes a BigInt but the other becomes a number.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Bitwise NOT": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_NOT",
        "title": "Bitwise NOT (~)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe bitwise NOT (~) operator returns a number or BigInt whose binary representation has a 1 in each bit position for which the corresponding bit of the operand is 0, and a 0 otherwise.\n\nThe ~ operator is overloaded for two types of operands: number and BigInt. For numbers, the operator returns a 32-bit integer. For BigInts, the operator returns a BigInt. It first coerces the operand to a numeric value and tests the type of it. It performs BigInt NOT if the operand becomes a BigInt; otherwise, it converts the operand to a 32-bit integer and performs number bitwise NOT.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Bitwise XOR": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR",
        "title": "Bitwise XOR (^)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe bitwise XOR (^) operator returns a number or BigInt whose binary representation has a 1 in each bit position for which the corresponding bits of either but not both operands are 1.\n\nThe ^ operator is overloaded for two types of operands: number and BigInt. For numbers, the operator returns a 32-bit integer. For BigInts, the operator returns a BigInt. It first coerces both operands to numeric values and tests the types of them. It performs BigInt XOR if both operands become BigInts; otherwise, it converts both operands to 32-bit integers and performs number bitwise XOR. A TypeError is thrown if one operand becomes a BigInt but the other becomes a number.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Bitwise XOR assignment": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR_assignment",
        "title": "Bitwise XOR assignment (^=)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe bitwise XOR assignment (^=) operator performs bitwise XOR on the two operands and assigns the result to the left operand.\n\nx ^= y is equivalent to x = x ^ y, except that the expression x is only evaluated once.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Bitwise OR assignment": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_OR_assignment",
        "title": "Bitwise OR assignment (|=)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe bitwise OR assignment (|=) operator performs bitwise OR on the two operands and assigns the result to the left operand.\n\nx |= y is equivalent to x = x | y, except that the expression x is only evaluated once.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "class": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/class",
        "title": "class expression",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since March 2016.\n\nThe class keyword can be used to define a class inside an expression.\n\nYou can also define classes using the class declaration.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Comma operator": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comma_operator",
        "title": "Comma operator (,)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe comma (,) operator evaluates each of its operands (from left to right) and returns the value of the last operand. This is commonly used to provide multiple updaters to a for loop's afterthought.\n\nOne or more expressions, the last of which is returned as the value of the compound expression.",
        "syntax": [],
        "parameters": [
          {
            "name": "expr1, expr2, expr3, \u00e2\u0080\u00a6",
            "description": "One or more expressions, the last of which is returned as the value of the compound expression."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Division": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Division",
        "title": "Division (/)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe division (/) operator produces the quotient of its operands where the left operand is the dividend and the right operand is the divisor.\n\nThe / operator is overloaded for two types of operands: number and BigInt. It first coerces both operands to numeric values and tests the types of them. It performs BigInt division if both operands become BigInts; otherwise, it performs number division. A TypeError is thrown if one operand becomes a BigInt but the other becomes a number.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Decrement": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Decrement",
        "title": "Decrement (--)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe decrement (--) operator decrements (subtracts one from) its operand and returns the value before or after the decrement, depending on where the operator is placed.\n\nThe -- operator is overloaded for two types of operands: number and BigInt. It first coerces the operand to a numeric value and tests the type of it. It performs BigInt decrement if the operand becomes a BigInt; otherwise, it performs number decrement.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "delete": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete",
        "title": "delete",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe delete operator removes a property from an object. If the property's value is an object and there are no more references to the object, the object held by that property is eventually released automatically.\n\nNote:\nThe syntax allows a wider range of expressions following the delete operator, but only the above forms lead to meaningful behaviors.",
        "syntax": [],
        "parameters": [
          {
            "name": "object",
            "description": "The name of an object, or an expression evaluating to an object."
          },
          {
            "name": "property",
            "description": "The property to delete."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Conditional operator": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_operator",
        "title": "Conditional (ternary) operator",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe conditional (ternary) operator is the only JavaScript operator that takes three operands:\na condition followed by a question mark (?), then an expression to execute if the condition is truthy followed by a colon (:), and finally the expression to execute if the condition is falsy.\nThis operator is frequently used as an alternative to an if...else statement.\n\nAn expression whose value is used as a condition.",
        "syntax": [],
        "parameters": [
          {
            "name": "condition",
            "description": "An expression whose value is used as a condition."
          },
          {
            "name": "exprIfTrue",
            "description": "An expression which is executed if the condition evaluates to a truthy value (one which equals or can be converted to true)."
          },
          {
            "name": "exprIfFalse",
            "description": "An expression which is executed if the condition is falsy (that is, has a value which can be converted to false)."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Destructuring": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring",
        "title": "Destructuring",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since August 2016.\n\nThe destructuring syntax is a JavaScript syntax that makes it possible to unpack values from arrays, or properties from objects, into distinct variables. It can be used in locations that receive data (such as the left-hand side of an assignment or anywhere that creates new identifier bindings).\n\nThe object and array literal expressions provide an easy way to create ad hoc packages of data.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Exponentiation assignment": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Exponentiation_assignment",
        "title": "Exponentiation assignment (**=)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since March 2017.\n\nThe exponentiation assignment (**=) operator performs exponentiation on the two operands and assigns the result to the left operand.\n\nx **= y is equivalent to x = x ** y, except that the expression x is only evaluated once.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Exponentiation": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Exponentiation",
        "title": "Exponentiation (**)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since March 2017.\n\nThe exponentiation (**) operator returns the result of raising the first operand to the power of the second operand. It is equivalent to Math.pow(), except it also accepts BigInts as operands.\n\nThe ** operator is overloaded for two types of operands: number and BigInt. It first coerces both operands to numeric values and tests the types of them. It performs BigInt exponentiation if both operands become BigInts; otherwise, it performs number exponentiation. A TypeError is thrown if one operand becomes a BigInt but the other becomes a number.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Division assignment": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Division_assignment",
        "title": "Division assignment (/=)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe division assignment (/=) operator performs division on the two operands and assigns the result to the left operand.\n\nx /= y is equivalent to x = x / y, except that the expression x is only evaluated once.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "function": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function",
        "title": "function expression",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe function keyword can be used to define a function inside an expression.\n\nYou can also define functions using the function declaration or the arrow syntax.",
        "syntax": [],
        "parameters": [
          {
            "name": "name Optional",
            "description": "The function name. Can be omitted, in which case the function is anonymous. The name is only local to the function body."
          },
          {
            "name": "paramN Optional",
            "description": "The name of a formal parameter for the function. For the parameters' syntax, see the Functions reference."
          },
          {
            "name": "statements Optional",
            "description": "The statements which comprise the body of the function."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Equality": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Equality",
        "title": "Equality (==)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe equality (==) operator checks whether its two operands are equal,\nreturning a Boolean result.\nUnlike the strict equality operator,\nit attempts to convert and compare operands that are of different types.\n\nThe equality operators (== and !=) provide the IsLooselyEqual semantic. This can be roughly summarized as follows:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "function*": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function*",
        "title": "function* expression",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nThe function* keyword can be used to define a generator function inside an expression.\n\nYou can also define generator functions using the function* declaration.",
        "syntax": [],
        "parameters": [
          {
            "name": "name Optional",
            "description": "The function name. Can be omitted, in which case the function is anonymous. The name is only local to the function body."
          },
          {
            "name": "paramN Optional",
            "description": "The name of a formal parameter for the function. For the parameters' syntax, see the Functions reference."
          },
          {
            "name": "statements Optional",
            "description": "The statements which comprise the body of the function."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "import.meta": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import.meta",
        "title": "import.meta",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since January 2020.\n\n* Some parts of this feature may have varying levels of support.\n\nThe import.meta meta-property exposes context-specific metadata to a JavaScript module. It contains information about the module, such as the module's URL.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": [],
        "resolve": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import.meta/resolve",
          "title": "import.meta.resolve()",
          "description": "Since March 2023, this feature works across the latest devices and browser versions. This feature might not work in older devices or browsers.\n\nimport.meta.resolve() is a built-in function defined on the import.meta object of a JavaScript module that resolves a module specifier to a URL using the current module's URL as base.\n\nA string that specifies a potentially importable module. This may be a relative path (such as \"./lib/helper.js\"), a bare name (such as \"my-module\"), or an absolute URL (such as \"https://example.com/lib/helper.js\").",
          "syntax": [],
          "parameters": [
            {
              "name": "moduleName",
              "description": "A string that specifies a potentially importable module. This may be a relative path (such as \"./lib/helper.js\"), a bare name (such as \"my-module\"), or an absolute URL (such as \"https://example.com/lib/helper.js\")."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        }
      },
      "Greater than": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Greater_than",
        "title": "Greater than (>)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe greater than (>) operator returns true if the left\noperand is greater than the right operand, and false otherwise.\n\nThe operands are compared using the same algorithm as the Less than operator, except the two operands are swapped. x > y is generally equivalent to y < x, except that x > y coerces x to a primitive before y, while y < x coerces y to a primitive before x. Because coercion may have side effects, the order of the operands may matter.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Greater than or equal": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Greater_than_or_equal",
        "title": "Greater than or equal (>=)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe greater than or equal (>=) operator returns true if\nthe left operand is greater than or equal to the right operand, and false\notherwise.\n\nThe operands are compared using the same algorithm as the Less than operator, with the result negated. x >= y is generally equivalent to !(x < y), except for two cases where x >= y and x < y are both false:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Grouping": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Grouping",
        "title": "Grouping operator ( )",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe grouping ( ) operator controls the precedence of evaluation in expressions. It also acts as a container for arbitrary expressions in certain syntactic constructs, where ambiguity or syntax errors would otherwise occur.\n\nAny expression to be evaluated, including comma-joined expressions.",
        "syntax": [],
        "parameters": [
          {
            "name": "expression",
            "description": "Any expression to be evaluated, including comma-joined expressions."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "in": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in",
        "title": "in",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe in operator returns true if the specified property is in the specified object or its prototype chain.\n\nThe in operator cannot be used to search for values in other collections. To test if a certain value exists in an array, use Array.prototype.includes(). For sets, use Set.prototype.has().",
        "syntax": [],
        "parameters": [
          {
            "name": "prop",
            "description": "A string or symbol representing a property name (non-symbols will be coerced to strings). Can also be a private property identifier."
          },
          {
            "name": "object",
            "description": "Object to check if it (or its prototype chain) contains the property with specified name (prop)."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "import": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import",
        "title": "import()",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since January 2020.\n\n* Some parts of this feature may have varying levels of support.\n\nThe import() syntax, commonly called dynamic import, is a function-like expression that allows loading an ECMAScript module asynchronously and dynamically into a potentially non-module environment.",
        "syntax": [],
        "parameters": [
          {
            "name": "moduleName",
            "description": "The module to import from. The evaluation of the specifier is host-specified, but always follows the same algorithm as static import declarations."
          },
          {
            "name": "options",
            "description": "An object containing import options. The following key is recognized:\n\nwith\n\nThe import attributes."
          },
          {
            "name": "with",
            "description": "The import attributes."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Inequality": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Inequality",
        "title": "Inequality (!=)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe inequality (!=) operator checks whether its two operands are not\nequal, returning a Boolean result.\nUnlike the strict inequality operator,\nit attempts to convert and compare operands that are of different types.\n\nThe inequality operator checks whether its operands are not equal. It is the negation\nof the equality\noperator so the following two lines will always give the same result:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Increment": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Increment",
        "title": "Increment (++)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe increment (++) operator increments (adds one to) its operand and returns the value before or after the increment, depending on where the operator is placed.\n\nThe ++ operator is overloaded for two types of operands: number and BigInt. It first coerces the operand to a numeric value and tests the type of it. It performs BigInt increment if the operand becomes a BigInt; otherwise, it performs number increment.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Left shift assignment": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Left_shift_assignment",
        "title": "Left shift assignment (<<=)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe left shift assignment (<<=) operator performs left shift on the two operands and assigns the result to the left operand.\n\nx <<= y is equivalent to x = x << y, except that the expression x is only evaluated once.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Less than": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Less_than",
        "title": "Less than (<)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe less than (<) operator returns true if the left operand is less than the right operand, and false otherwise.\n\nThe operands are compared with multiple rounds of coercion, which can be summarized as follows:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "instanceof": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof",
        "title": "instanceof",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe instanceof operator tests to see if the prototype property of a constructor appears anywhere in the prototype chain of an object. The return value is a boolean value. Its behavior can be customized with Symbol.hasInstance.\n\nThe object to test.",
        "syntax": [],
        "parameters": [
          {
            "name": "object",
            "description": "The object to test."
          },
          {
            "name": "constructor",
            "description": "Constructor to test against."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Left shift": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Left_shift",
        "title": "Left shift (<<)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe left shift (<<) operator returns a number or BigInt whose binary representation is the first operand shifted by the specified number of bits to the left. Excess bits shifted off to the left are discarded, and zero bits are shifted in from the right.\n\nThe << operator is overloaded for two types of operands: number and BigInt. For numbers, the operator returns a 32-bit integer. For BigInts, the operator returns a BigInt. It first coerces both operands to numeric values and tests the types of them. It performs BigInt left shift if both operands become BigInts; otherwise, it converts both operands to 32-bit integers and performs number left shift. A TypeError is thrown if one operand becomes a BigInt but the other becomes a number.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Less than or equal": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Less_than_or_equal",
        "title": "Less than or equal (<=)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe less than or equal (<=) operator returns true if the left operand is less than or equal to the right operand, and false otherwise.\n\nThe operands are compared using the same algorithm as the Less than operator, with the operands swapped and the result negated. x <= y is generally equivalent to !(y < x), except for two cases where x <= y and x > y are both false:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Logical AND": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND",
        "title": "Logical AND (&&)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe logical AND (&&) (logical conjunction) operator for a set of boolean operands will be true if and only if all the operands are true. Otherwise it will be false.\n\nMore generally, the operator returns the value of the first falsy operand encountered when evaluating from left to right, or the value of the last operand if they are all truthy.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Logical OR assignment": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR_assignment",
        "title": "Logical OR assignment (||=)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2020.\n\nThe logical OR assignment (||=) operator only evaluates the right operand and assigns to the left if the left operand is falsy.\n\nLogical OR assignment short-circuits, meaning that x ||= y is equivalent to x || (x = y), except that the expression x is only evaluated once.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Logical OR": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR",
        "title": "Logical OR (||)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe logical OR (||) (logical disjunction) operator for a set of operands\nis true if and only if one or more of its operands is true. It is typically used with\nboolean (logical) values. When it is, it returns a Boolean value. However,\nthe || operator actually returns the value of one of the specified\noperands, so if this operator is used with non-Boolean values, it will return a\nnon-Boolean value.\n\nIf x can be converted to true, returns\nx; else, returns y.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Logical NOT": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_NOT",
        "title": "Logical NOT (!)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe logical NOT (!) (logical complement, negation) operator takes truth to\nfalsity and vice versa. It is typically used with boolean (logical)\nvalues. When used with non-Boolean values, it returns false if its single\noperand can be converted to true; otherwise, returns true.\n\nReturns false if its single operand can be converted to true;\notherwise, returns true.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Logical AND assignment": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND_assignment",
        "title": "Logical AND assignment (&&=)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2020.\n\nThe logical AND assignment (&&=) operator only evaluates the right operand and assigns to the left if the left operand is truthy.\n\nLogical AND assignment short-circuits, meaning that x &&= y is equivalent to x && (x = y), except that the expression x is only evaluated once.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Multiplication assignment": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Multiplication_assignment",
        "title": "Multiplication assignment (*=)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe multiplication assignment (*=) operator performs multiplication on the two operands and assigns the result to the left operand.\n\nx *= y is equivalent to x = x * y, except that the expression x is only evaluated once.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "null": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null",
        "title": "null",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe null value represents the intentional absence of any object value. It\nis one of JavaScript's primitive values and\nis treated as falsy for boolean operations.\n\nThe value null is written with a literal: null.\nnull is not an identifier for a property of the global object, like\nundefined can be. Instead,\nnull expresses a lack of identification, indicating that a variable points\nto no object. In APIs, null is often retrieved in a place where an object\ncan be expected but no object is relevant.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Multiplication": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Multiplication",
        "title": "Multiplication (*)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe multiplication (*) operator produces the product of the operands.\n\nThe * operator is overloaded for two types of operands: number and BigInt. It first coerces both operands to numeric values and tests the types of them. It performs BigInt multiplication if both operands become BigInts; otherwise, it performs number multiplication. A TypeError is thrown if one operand becomes a BigInt but the other becomes a number.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "new.target": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target",
        "title": "new.target",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2017.\n\nThe new.target meta-property lets you detect whether a function or constructor was called using the new operator. In constructors and functions invoked using the new operator, new.target returns a reference to the constructor or function that new was called upon. In normal function calls, new.target is undefined.\n\nnew.target is guaranteed to be a constructable function value or undefined.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "new": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new",
        "title": "new",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe new operator lets developers create an instance of a user-defined object type or of one of the built-in object types that has a constructor function.\n\nA class or function that specifies the type of the object instance. The expression can be anything with sufficient precedence, including an identifier, a property access, or another new expression, but optional chaining is not allowed.",
        "syntax": [],
        "parameters": [
          {
            "name": "constructor",
            "description": "A class or function that specifies the type of the object instance. The expression can be anything with sufficient precedence, including an identifier, a property access, or another new expression, but optional chaining is not allowed."
          },
          {
            "name": "arg1, arg2, \u00e2\u0080\u00a6, argN",
            "description": "A list of values that the constructor will be called with. new Foo is equivalent to new Foo(), i.e., if no argument list is specified, Foo is called without arguments."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Optional chaining": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining",
        "title": "Optional chaining (?.)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2020.\n\nThe optional chaining (?.) operator accesses an object's property or calls a function. If the object accessed or function called using this operator is undefined or null, the expression short circuits and evaluates to undefined instead of throwing an error.\n\nThe ?. operator is like the . chaining operator, except that instead of causing an error if a reference is nullish (null or undefined), the expression short-circuits with a return value of undefined. When used with function calls, it returns undefined if the given function does not exist.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Operator precedence": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence",
        "title": "Operator precedence",
        "description": "Operator precedence determines how operators are parsed concerning each other. Operators with higher precedence become the operands of operators with lower precedence.\n\nConsider an expression describable by the representation below, where both OP1 and OP2 are fill-in-the-blanks for OPerators.\n\nThe combination above has two possible interpretations:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Nullish coalescing": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing",
        "title": "Nullish coalescing operator (??)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2020.\n\nThe nullish coalescing (??) operator is a logical\noperator that returns its right-hand side operand when its left-hand side operand is\nnull or undefined, and otherwise returns its left-hand side\noperand.\n\nThe nullish coalescing operator can be seen as a special case of the logical OR (||) operator. The latter returns the right-hand side operand if the left operand is any falsy value, not only null or undefined. In other words, if you use || to provide some default value to another variable foo, you may encounter unexpected behaviors if you consider some falsy values as usable (e.g., '' or 0). See below for more examples.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Object initializer": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer",
        "title": "Object initializer",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nAn object initializer is a comma-delimited list of zero or more pairs of property names and associated values of an object, enclosed in curly braces ({}). Objects can also be initialized using Object.create() or by invoking a constructor function with the new operator.\n\nAn object initializer is an expression that describes the initialization of an Object. Objects consist of properties, which are used to describe an object. The values of object properties can either contain primitive data types or other objects.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Nullish coalescing assignment": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_assignment",
        "title": "Nullish coalescing assignment (??=)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2020.\n\nThe nullish coalescing assignment (??=) operator, also known as the logical nullish assignment operator, only evaluates the right operand and assigns to the left if the left operand is nullish (null or undefined).\n\nNullish coalescing assignment short-circuits, meaning that x ??= y is equivalent to x ?? (x = y), except that the expression x is only evaluated once.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Remainder": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Remainder",
        "title": "Remainder (%)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe remainder (%) operator returns the remainder left over when one operand is divided by a second operand. It always takes the sign of the dividend.\n\nThe % operator is overloaded for two types of operands: number and BigInt. It first coerces both operands to numeric values and tests the types of them. It performs BigInt remainder if both operands become BigInts; otherwise, it performs number remainder. A TypeError is thrown if one operand becomes a BigInt but the other becomes a number.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Property accessors": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors",
        "title": "Property accessors",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nProperty accessors provide access to an object's properties by using the dot notation or the bracket notation.\n\nOne can think of an object as an associative array (a.k.a. map, dictionary, hash, lookup table). The keys in this array are the names of the object's properties.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Remainder assignment": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Remainder_assignment",
        "title": "Remainder assignment (%=)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe remainder assignment (%=) operator performs remainder on the two operands and assigns the result to the left operand.\n\nx %= y is equivalent to x = x % y, except that the expression x is only evaluated once.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Right shift": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Right_shift",
        "title": "Right shift (>>)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe right shift (>>) operator returns a number or BigInt whose binary representation is the first operand shifted by the specified number of bits to the right. Excess bits shifted off to the right are discarded, and copies of the leftmost bit are shifted in from the left. This operation is also called \"sign-propagating right shift\" or \"arithmetic right shift\", because the sign of the resulting number is the same as the sign of the first operand.\n\nThe >> operator is overloaded for two types of operands: number and BigInt. For numbers, the operator returns a 32-bit integer. For BigInts, the operator returns a BigInt. It first coerces both operands to numeric values and tests the types of them. It performs BigInt right shift if both operands become BigInts; otherwise, it converts both operands to 32-bit integers and performs number right shift. A TypeError is thrown if one operand becomes a BigInt but the other becomes a number.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Right shift assignment": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Right_shift_assignment",
        "title": "Right shift assignment (>>=)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe right shift assignment (>>=) operator performs right shift on the two operands and assigns the result to the left operand.\n\nx >>= y is equivalent to x = x >> y, except that the expression x is only evaluated once.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Spread syntax": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax",
        "title": "Spread syntax (...)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since October 2015.\n\nThe spread (...) syntax allows an iterable, such as an array or string, to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected. In an object literal, the spread syntax enumerates the properties of an object and adds the key-value pairs to the object being created.\n\nSpread syntax looks exactly like rest syntax. In a way, spread syntax is the opposite of rest syntax. Spread syntax \"expands\" an array into its elements, while rest syntax collects multiple elements and \"condenses\" them into a single element. See rest parameters and rest property.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Subtraction assignment": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Subtraction_assignment",
        "title": "Subtraction assignment (-=)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe subtraction assignment (-=) operator performs subtraction on the two operands and assigns the result to the left operand.\n\nx -= y is equivalent to x = x - y, except that the expression x is only evaluated once.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Strict equality": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality",
        "title": "Strict equality (===)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe strict equality (===) operator checks whether its two operands are\nequal, returning a Boolean result. Unlike the equality operator,\nthe strict equality operator always considers operands of different types to be\ndifferent.\n\nThe strict equality operators (=== and !==) provide the IsStrictlyEqual semantic.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Strict inequality": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_inequality",
        "title": "Strict inequality (!==)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe strict inequality (!==) operator checks whether its two operands are\nnot equal, returning a Boolean result. Unlike the inequality\noperator, the strict inequality operator always considers operands of different types to\nbe different.\n\nThe strict inequality operator checks whether its operands are not equal.\nIt is the negation of the\nstrict equality operator\nso the following two lines will always give the same result:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Subtraction": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Subtraction",
        "title": "Subtraction (-)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe subtraction (-) operator subtracts the two operands, producing their difference.\n\nThe - operator is overloaded for two types of operands: number and BigInt. It first coerces both operands to numeric values and tests the types of them. It performs BigInt subtraction if both operands become BigInts; otherwise, it performs number subtraction. A TypeError is thrown if one operand becomes a BigInt but the other becomes a number.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "super": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super",
        "title": "super",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since March 2016.\n\nThe super keyword is used to access properties on an object literal or class's [[Prototype]], or invoke a superclass's constructor.\n\nThe super.prop and super[expr] expressions are valid in any method definition in both classes and object literals. The super(...args) expression is valid in class constructors.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "this": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this",
        "title": "this",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe this keyword refers to the context where a piece of code, such as a function's body, is supposed to run. Most typically, it is used in object methods, where this refers to the object that the method is attached to, thus allowing the same method to be reused on different objects.\n\nThe value of this in JavaScript depends on how a function is invoked (runtime binding), not how it is defined. When a regular function is invoked as a method of an object (obj.method()), this points to that object. When invoked as a standalone function (not attached to an object: func()), this typically refers to the global object (in non-strict mode) or undefined (in strict mode). The Function.prototype.bind() method can create a function whose this binding doesn't change, and methods Function.prototype.apply() and Function.prototype.call() can also set the this value for a particular call.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "typeof": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof",
        "title": "typeof",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe typeof operator returns a string indicating the type of the operand's value.\n\nAn expression representing the object or primitive whose type is to be returned.",
        "syntax": [],
        "parameters": [
          {
            "name": "operand",
            "description": "An expression representing the object or primitive whose type is to be returned."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Unary negation": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Unary_negation",
        "title": "Unary negation (-)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe unary negation (-) operator precedes its operand and negates it.\n\nThe - operator is overloaded for two types of operands: number and BigInt. It first coerces the operand to a numeric value and tests the type of it. It performs BigInt negation if the operand becomes a BigInt; otherwise, it performs number negation.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Unary plus": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Unary_plus",
        "title": "Unary plus (+)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe unary plus (+) operator precedes its operand and evaluates to its\noperand but attempts to convert it into a number, if it isn't already.\n\nAlthough unary negation (-) also can convert non-numbers, unary plus is the fastest and preferred way of converting something into a number, because it does not perform any other operations on the number.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "yield*": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield*",
        "title": "yield*",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nThe yield* operator can be used within generator (sync or async) functions to delegate to another iterable object, such as a Generator. Inside async generator functions, it can additionally be used to delegate to another async iterable object, such as an AsyncGenerator.\n\nAn iterable object.",
        "syntax": [],
        "parameters": [
          {
            "name": "expression Optional",
            "description": "An iterable object."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "void": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/void",
        "title": "void operator",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe void operator evaluates the given\nexpression and then returns undefined.\n\nThis operator allows evaluating expressions that produce a value into places where an\nexpression that evaluates to undefined is desired.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Unsigned right shift assignment": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift_assignment",
        "title": "Unsigned right shift assignment (>>>=)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe unsigned right shift assignment (>>>=) operator performs unsigned right shift on the two operands and assigns the result to the left operand.\n\nx >>>= y is equivalent to x = x >>> y, except that the expression x is only evaluated once.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "yield": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield",
        "title": "yield",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nThe yield operator is used to pause and resume a generator function.\n\nThe value to yield from the generator function via the iterator protocol. If omitted, undefined is yielded.",
        "syntax": [],
        "parameters": [
          {
            "name": "expression Optional",
            "description": "The value to yield from the generator function via the iterator protocol. If omitted, undefined is yielded."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Unsigned right shift": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift",
        "title": "Unsigned right shift (>>>)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe unsigned right shift (>>>) operator returns a number whose binary representation is the first operand shifted by the specified number of bits to the right. Excess bits shifted off to the right are discarded, and zero bits are shifted in from the left. This operation is also called \"zero-filling right shift\", because the sign bit becomes 0, so the resulting number is always positive. Unsigned right shift does not accept BigInt values.\n\nUnlike other arithmetic and bitwise operators, the unsigned right shift operator does not accept BigInt values. This is because it fills the leftmost bits with zeroes, but conceptually, BigInts have an infinite number of leading sign bits, so there's no \"leftmost bit\" to fill with zeroes.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      }
    },
    "Regular expressions": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions",
      "title": "Regular expressions",
      "description": "A regular expression (regex for short) allow developers to match strings against a pattern, extract submatch information, or simply test if the string conforms to that pattern. Regular expressions are used in many programming languages, and JavaScript's syntax is inspired by Perl.\n\nYou are encouraged to read the regular expressions guide to get an overview of the available regex syntaxes and how they work.\n\nRegular expressions are a important concept in formal language theory. They are a way to describe a possibly infinite set of character strings (called a language). A regular expression, at its core, needs the following features:",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": [],
      "Backreference": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Backreference",
        "title": "Backreference: \\1, \\2",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nA backreference refers to the submatch of a previous capturing group and matches the same text as that group. For named capturing groups, you may prefer to use the named backreference syntax.\n\nNote: N is not a literal character.",
        "syntax": [],
        "parameters": [
          {
            "name": "N",
            "description": "A positive integer referring to the number of a capturing group."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Character class": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class",
        "title": "Character class: [...], [^...]",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nA character class matches any character in or not in a custom set of characters. When the v flag is enabled, it can also be used to match finite-length strings.\n\nCan be a single character, another square-bracket-enclosed character class, a character class escape, a Unicode character class escape, or a string using the \\q syntax.",
        "syntax": [],
        "parameters": [
          {
            "name": "operand1, operand2",
            "description": "Can be a single character, another square-bracket-enclosed character class, a character class escape, a Unicode character class escape, or a string using the \\q syntax."
          },
          {
            "name": "substring",
            "description": "A literal string."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Input boundary assertion": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Input_boundary_assertion",
        "title": "Input boundary assertion: ^, $",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nAn input boundary assertion checks if the current position in the string is an input boundary. An input boundary is the start or end of the string; or, if the m flag is set, the start or end of a line.\n\n^ asserts that the current position is the start of input. $ asserts that the current position is the end of input. Both are assertions, so they don't consume any characters.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Literal character": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Literal_character",
        "title": "Literal character: a, b",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nA literal character specifies exactly itself to be matched in the input text.\n\nA single character that is not one of the syntax characters described below.",
        "syntax": [],
        "parameters": [
          {
            "name": "c",
            "description": "A single character that is not one of the syntax characters described below."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Character escape": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_escape",
        "title": "Character escape: \\n, \\u{...}",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nA character escape represents a character that may not be able to be conveniently represented in its literal form.\n\nNote: , is not part of the syntax.",
        "syntax": [],
        "parameters": [
          {
            "name": "HHH",
            "description": "A hexadecimal number representing the Unicode code point of the character. The \\xHH form must have two hexadecimal digits; the \\uHHHH form must have four; the \\u{HHH} form may have 1 to 6 hexadecimal digits."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Disjunction": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Disjunction",
        "title": "Disjunction: |",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nA disjunction specifies multiple alternatives. Any alternative matching the input causes the entire disjunction to be matched.\n\nOne alternative pattern, composed of a sequence of atoms and assertions. Successfully matching one alternative causes the entire disjunction to be matched.",
        "syntax": [],
        "parameters": [
          {
            "name": "alternativeN",
            "description": "One alternative pattern, composed of a sequence of atoms and assertions. Successfully matching one alternative causes the entire disjunction to be matched."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Named capturing group": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_capturing_group",
        "title": "Named capturing group: (?<name>...)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2020.\n\n* Some parts of this feature may have varying levels of support.\n\nA named capturing group is a particular kind of capturing group that allows to give a name to the group. The group's matching result can later be identified by this name instead of by its index in the pattern.",
        "syntax": [],
        "parameters": [
          {
            "name": "pattern",
            "description": "A pattern consisting of anything you may use in a regex literal, including a disjunction."
          },
          {
            "name": "name",
            "description": "The name of the group. Must be a valid identifier."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Modifier": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Modifier",
        "title": "Modifier: (?ims-ims:...)",
        "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nA modifier overrides flag settings in a specific part of a regular expression. It can be used to enable or disable flags that change the meanings of certain regex syntax elements. These flags are i, m, and s.\n\nNote:\nJavaScript only has the \"bounded\" modifier form, where the pattern is placed inside the modifier group. Most other languages that support modifiers have an \"unbounded\" form, where the modifier is applied until the end of the closest containing group.",
        "syntax": [],
        "parameters": [
          {
            "name": "flags1 Optional",
            "description": "A string of flags to enable. Can contain any combination of i, m, and s."
          },
          {
            "name": "flags2 Optional",
            "description": "A string of flags to disable. Can contain any combination of i, m, and s, but must not contain any flags included in flags1."
          },
          {
            "name": "pattern",
            "description": "A pattern consisting of anything you may use in a regex literal, including a disjunction."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Lookahead assertion": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Lookahead_assertion",
        "title": "Lookahead assertion: (?=...), (?!...)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nA lookahead assertion \"looks ahead\": it attempts to match the subsequent input with the given pattern, but it does not consume any of the input \u00e2\u0080\u0094 if the match is successful, the current position in the input stays the same.\n\nA pattern consisting of anything you may use in a regex literal, including a disjunction.",
        "syntax": [],
        "parameters": [
          {
            "name": "pattern",
            "description": "A pattern consisting of anything you may use in a regex literal, including a disjunction."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Named backreference": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_backreference",
        "title": "Named backreference: \\k<name>",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2020.\n\nA named backreference refers to the submatch of a previous named capturing group and matches the same text as that group. For unnamed capturing groups, you need to use the normal backreference syntax.\n\nThe name of the group. Must be a valid identifier and refer to an existent named capturing group.",
        "syntax": [],
        "parameters": [
          {
            "name": "name",
            "description": "The name of the group. Must be a valid identifier and refer to an existent named capturing group."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Lookbehind assertion": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Lookbehind_assertion",
        "title": "Lookbehind assertion: (?<=...), (?<!...)",
        "description": "Since March 2023, this feature works across the latest devices and browser versions. This feature might not work in older devices or browsers.\n\nA lookbehind assertion \"looks behind\": it attempts to match the previous input with the given pattern, but it does not consume any of the input \u00e2\u0080\u0094 if the match is successful, the current position in the input stays the same. It matches each atom in its pattern in the reverse order.\n\nA pattern consisting of anything you may use in a regex literal, including a disjunction.",
        "syntax": [],
        "parameters": [
          {
            "name": "pattern",
            "description": "A pattern consisting of anything you may use in a regex literal, including a disjunction."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Word boundary assertion": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Word_boundary_assertion",
        "title": "Word boundary assertion: \\b, \\B",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nA word boundary assertion checks if the current position in the string is a word boundary. A word boundary is where the next character is a word character and the previous character is not a word character, or vice versa.\n\n\\b asserts that the current position in the string is a word boundary. \\B negates the assertion: it asserts that the current position is not a word boundary. Both are assertions, so unlike other character escapes or character class escapes, \\b and \\B don't consume any characters.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Quantifier": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Quantifier",
        "title": "Quantifier: *, +, ?, {n}, {n,}, {n,m}",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nA quantifier repeats an atom a certain number of times. The quantifier is placed after the atom it applies to.\n\nA single atom.",
        "syntax": [],
        "parameters": [
          {
            "name": "atom",
            "description": "A single atom."
          },
          {
            "name": "count",
            "description": "A non-negative integer. The number of times the atom should be repeated."
          },
          {
            "name": "min",
            "description": "A non-negative integer. The minimum number of times the atom can be repeated."
          },
          {
            "name": "max Optional",
            "description": "A non-negative integer. The maximum number of times the atom can be repeated. If omitted, the atom can be repeated as many times as needed."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Wildcard": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Wildcard",
        "title": "Wildcard: .",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nA wildcard matches all characters except line terminators. It also matches line terminators if the s flag is set.\n\n. matches any character except line terminators. If the s flag is set, . also matches line terminators.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Non-capturing group": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Non-capturing_group",
        "title": "Non-capturing group: (?:...)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nA non-capturing group groups a subpattern, allowing you to apply a quantifier to the entire group or use disjunctions within it. It acts like the grouping operator in JavaScript expressions, and unlike capturing groups, it does not memorize the matched text, allowing for better performance and avoiding confusion when the pattern also contains useful capturing groups.\n\nA pattern consisting of anything you may use in a regex literal, including a disjunction.",
        "syntax": [],
        "parameters": [
          {
            "name": "pattern",
            "description": "A pattern consisting of anything you may use in a regex literal, including a disjunction."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Unicode character class escape": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Unicode_character_class_escape",
        "title": "Unicode character class escape: \\p{...}, \\P{...}",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2020.\n\nA unicode character class escape is a kind of character class escape that matches a set of characters specified by a Unicode property. It's only supported in Unicode-aware mode. When the v flag is enabled, it can also be used to match finite-length strings.\n\nA lone Unicode property name or value, following the same syntax as value. It specifies the value for the General_Category property, or a binary property name. In v mode, it can also be a binary Unicode property of strings.",
        "syntax": [],
        "parameters": [
          {
            "name": "loneProperty",
            "description": "A lone Unicode property name or value, following the same syntax as value. It specifies the value for the General_Category property, or a binary property name. In v mode, it can also be a binary Unicode property of strings.\n\nNote: ICU syntax allows omitting the Script property name as well, but JavaScript does not support this, because most of the time Script_Extensions is more useful than Script."
          },
          {
            "name": "property",
            "description": "A Unicode property name. Must be made of ASCII letters (A\u00e2\u0080\u0093Z, a\u00e2\u0080\u0093z) and underscores (_), and must be one of the non-binary property names."
          },
          {
            "name": "value",
            "description": "A Unicode property value. Must be made of ASCII letters (A\u00e2\u0080\u0093Z, a\u00e2\u0080\u0093z), underscores (_), and digits (0\u00e2\u0080\u00939), and must be one of the supported values listed in PropertyValueAliases.txt."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      }
    },
    "Errors": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors",
      "title": "JavaScript error reference",
      "description": "Below, you'll find a list of errors which are thrown by JavaScript. These errors can be a helpful debugging aid, but the reported problem isn't always immediately clear. The pages below will provide additional details about these errors. Each error is an object based upon the Error object, and has a name and a message.\n\nErrors displayed in the Web console may include a link to the corresponding page below to help you quickly comprehend the problem in your code.\n\nFor a beginner's introductory tutorial on fixing JavaScript errors, see What went wrong? Troubleshooting JavaScript.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": [],
      "Too much recursion": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Too_much_recursion",
        "title": "InternalError: too much recursion",
        "description": "The JavaScript exception \"too much recursion\" or \"Maximum call stack size exceeded\"\noccurs when there are too many function calls, or a function is missing a base case.\n\nInternalError in Firefox; RangeError in Chrome and Safari.\n\nA function that calls itself is called a recursive function. Once a condition\nis met, the function stops calling itself. This is called a base case.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Promise any all rejected": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Promise_any_all_rejected",
        "title": "AggregateError: No Promise in Promise.any was resolved",
        "description": "The JavaScript exception \"No Promise in Promise.any was resolved\" occurs when all promises passed to Promise.any() are rejected. It is the only built-in usage of AggregateError.\n\nPromise.any() only rejects when all promises passed to it are rejected. You should access errors to get the array of rejection reasons. See Using promises for more information on how to handle asynchronously rejected promises. This error is also raised when Promise.any() receives an empty iterable.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Property access denied": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Property_access_denied",
        "title": "Error: Permission denied to access property \"x\"",
        "description": "The JavaScript exception \"Permission denied to access property\" occurs when there was\nan attempt to access an object for which you have no permission.\n\nDOMException.\n\nThere was attempt to access an object for which you have no permission. This is likely\nan <iframe> element loaded from a different domain for which you\nviolated the same-origin policy.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Not a valid code point": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Not_a_valid_code_point",
        "title": "RangeError: argument is not a valid code point",
        "description": "The JavaScript exception \"Invalid code point\" occurs when NaN values,\nnegative Integers (-1), non-Integers (5.4), or values larger than 0x10FFFF (1114111) are\nused with String.fromCodePoint().\n\nString.fromCodePoint() throws this error when passed NaN\nvalues, negative Integers (-1), non-Integers (5.4), or values larger than 0x10FFFF\n(1114111).\n\nA code point is a value in the\nUnicode codespace; that is, the range of integers from 0 to\n0x10FFFF.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Invalid array length": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_array_length",
        "title": "RangeError: invalid array length",
        "description": "The JavaScript exception \"Invalid array length\" occurs when specifying an array length that is either negative, a floating number or exceeds the maximum supported by the platform (i.e., when creating an Array or ArrayBuffer, or when setting the length property).\n\nThe maximum allowed array length depends on the platform, browser and browser version.\nFor Array the maximum length is 232-1.\nFor ArrayBuffer the maximum is 231-1 (2GiB-1) on 32-bit systems.\nFrom Firefox version 89 the maximum value of ArrayBuffer is 233 (8GiB) on 64-bit systems.\n\nNote: Array and ArrayBuffer are independent data structures (the implementation of one does not affect the other).",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "BigInt negative exponent": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/BigInt_negative_exponent",
        "title": "RangeError: BigInt negative exponent",
        "description": "The JavaScript exception \"BigInt negative exponent\" occurs when a BigInt is raised to the power of a negative BigInt value.\n\nRangeError.\n\nThe exponent of an exponentiation operation must be positive. Since negative exponents would take the reciprocal of the base, the result will be between -1 and 1 in almost all cases, which gets rounded to 0n. To catch mistakes, negative exponents are not allowed. Check if the exponent is non-negative before doing exponentiation.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Invalid date": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_date",
        "title": "RangeError: invalid date",
        "description": "The JavaScript exception \"invalid date\" occurs when an invalid date is attempted to be converted to an ISO date string.\n\nYou are converting an invalid date value to an ISO date string. This usually happens in one of three ways:\n\nAn invalid date is produced when you attempt to parse an invalid date string, or set the timestamp to an out-of-bounds value. Invalid dates usually cause all date methods to return NaN or other special values. However, such dates do not have valid ISO string representations, so an error is thrown when you attempt to do so.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Form must be one of": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Form_must_be_one_of",
        "title": "RangeError: form must be one of 'NFC', 'NFD', 'NFKC', or 'NFKD'",
        "description": "The JavaScript exception \"form must be one of 'NFC', 'NFD', 'NFKC', or 'NFKD'\" occurs when an unrecognized string is passed to the String.prototype.normalize() method.\n\nThe String.prototype.normalize() method only accepts the following four values as its form argument: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\". If you pass any other value, an error will be thrown. Read the reference of normalize() to learn about different normalization forms.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "BigInt division by zero": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/BigInt_division_by_zero",
        "title": "RangeError: BigInt division by zero",
        "description": "The JavaScript exception \"BigInt division by zero\" occurs when a BigInt is divided by 0n.\n\nRangeError.\n\nThe divisor of a division or remainder operator is 0n. In Number arithmetic, this produces Infinity, but there's no \"infinity value\" in BigInts, so an error is issued. Check if the divisor is 0n before doing the division.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Negative repetition count": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Negative_repetition_count",
        "title": "RangeError: repeat count must be non-negative",
        "description": "The JavaScript exception \"repeat count must be non-negative\" occurs when the\nString.prototype.repeat() method is used with a count\nargument that is a negative number.\n\nThe String.prototype.repeat() method has been used. It has a\ncount parameter indicating the number of times to repeat the string. It\nmust be between 0 and less than positive Infinity and cannot be a negative\nnumber. The range of allowed values can be described like this: [0, +\u00e2\u0088\u009e).",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Precision range": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Precision_range",
        "title": "RangeError: precision is out of range",
        "description": "The JavaScript exception \"precision is out of range\" occurs when a number that's\noutside of the allowed range was passed into toExponential, toFixed, or toPrecision.\n\nThere was an out of range precision argument in one of these methods:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Bad radix": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Bad_radix",
        "title": "RangeError: radix must be an integer",
        "description": "The JavaScript exception \"radix must be an integer at least 2 and no greater than 36\"\noccurs when the optional radix parameter of the\nNumber.prototype.toString() or\nthe BigInt.prototype.toString() method was specified and is not between 2\nand 36.\n\nThe optional radix parameter of the\nNumber.prototype.toString() or\nthe BigInt.prototype.toString() method was specified. Its value must be an\ninteger (a number) between 2 and 36, specifying the base of the number system to be used\nfor representing numeric values. For example, the decimal (base 10) number 169 is\nrepresented in hexadecimal (base 16) as A9.\n\nWhy is this parameter's value limited to 36? A radix that is larger than 10 uses\nalphabetical characters as digits; therefore, the radix can't be larger than 36, since\nthe Latin alphabet (used by English and many other languages) only has 26 characters.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Resulting string too large": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Resulting_string_too_large",
        "title": "RangeError: repeat count must be less than infinity",
        "description": "The JavaScript exception \"repeat count must be less than infinity\" occurs when the\nString.prototype.repeat() method is used with a count\nargument that is infinity.\n\nThe String.prototype.repeat() method has been used. It has a\ncount parameter indicating the number of times to repeat the string. It\nmust be between 0 and less than positive Infinity and cannot be a negative\nnumber. The range of allowed values can be described like this: [0, +\u00e2\u0088\u009e).\n\nThe resulting string can also not be larger than the maximum string size, which can\ndiffer in JavaScript engines. In Firefox (SpiderMonkey) the maximum string size is\n230 - 2 (~2GiB).",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Cant be converted to BigInt because it isnt an integer": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cant_be_converted_to_BigInt_because_it_isnt_an_integer",
        "title": "RangeError: x can't be converted to BigInt because it isn't an integer",
        "description": "The JavaScript exception \"x can't be converted to BigInt because it isn't an integer\" occurs when the BigInt() function is used on a number that isn't an integer.\n\nRangeError.\n\nWhen using the BigInt() function to convert a number to a BigInt, the number must be an integer (such that Number.isInteger returns true).",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Super not called": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Super_not_called",
        "title": "ReferenceError: must call super constructor before using 'this' in derived class constructor",
        "description": "The JavaScript exception \"must call super constructor before using 'this' in derived class constructor\" occurs when the super() is not called for a given derived class constructor, and the derived constructor tries to access the value of this, or the derived constructor has already returned and the return value is not an object.\n\nThe super() call can only be called at most once for each new call to a derived class constructor. Often, you need to call it exactly once, because if you don't call it, the parent constructor cannot initialize the value of this, so you cannot access this in the derived constructor and the this is not considered a valid constructed object (and throws if the derived constructor completes in this state). The way around it is to return an object from the derived class constructor, in which case the object returned will be used as the constructed object instead of this, allowing you to not call super(). This is rarely done though.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Undeclared var": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Undeclared_var",
        "title": "ReferenceError: assignment to undeclared variable \"x\"",
        "description": "The JavaScript strict mode-only exception \"Assignment to undeclared variable\" occurs when the value has been assigned to an undeclared variable.\n\nReferenceError in strict mode only.\n\nA value has been assigned to an undeclared variable.\nIn other words, there was an assignment without the var keyword.\nThere are some differences between declared and undeclared variables, which might lead to unexpected results and that's why JavaScript presents an error in strict mode.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Super called twice": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Super_called_twice",
        "title": "ReferenceError: super() called twice in derived class constructor",
        "description": "The JavaScript exception \"super() called twice in derived class constructor\" occurs when the super() is called a second time for a given derived class constructor.\n\nThe super() call can only be called at most once for each new call to a derived class constructor. This is because super() is responsible for initializing the parent class, and calling it more than once would result in the parent constructor being called multiple times.\n\nThe best way to prevent this is to ensure that super() is placed outside of any control flow structure. Otherwise, make sure that all code paths in the constructor lead to only one super() call.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Not defined": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Not_defined",
        "title": "ReferenceError: \"x\" is not defined",
        "description": "The JavaScript exception \"variable is not defined\" occurs when there is a\nnon-existent variable referenced somewhere.\n\nReferenceError.\n\nThere is a non-existent variable referenced somewhere. This variable needs to be\ndeclared, or you need to make sure it is available in your current script or scope.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Cant access lexical declaration before init": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cant_access_lexical_declaration_before_init",
        "title": "ReferenceError: can't access lexical declaration 'X' before initialization",
        "description": "The JavaScript exception \"can't access lexical declaration 'X' before initialization\" occurs when a lexical variable was accessed before it was initialized.\nThis happens within any scope (global, module, function, or block) when let or const variables are accessed before the place where they are declared is executed.\n\nA lexical variable was accessed before it was initialized.\nThis happens within any scope (global, module, function, or block) when variables declared with let or const are accessed before the place where they are declared has been executed.\n\nNote that it is the execution order of access and variable declaration that matters, not the order in which the statements appear in the code.\nFor more information, see the description of Temporal Dead Zone.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Regex backslash at end of pattern": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Regex_backslash_at_end_of_pattern",
        "title": "SyntaxError: \\ at end of pattern",
        "description": "The JavaScript exception \"\\ at end of pattern\" occurs when a regular expression pattern ends with an unescaped backslash (\\). In a regex literal, the backslash would cause the closing slash / to be a literal character, so this can only appear when using the RegExp() constructor.\n\nA backslash cannot appear literally in a regular expression. It either precedes another character to escape it, or is itself escaped by another backslash. A backslash at the end of a regular expression pattern is invalid because it is not escaping anything.\n\nThis error can only happen when using the RegExp() constructor. Consider the following code, which intends to match a single backslash character:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Strict non simple params": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Strict_non_simple_params",
        "title": "SyntaxError: \"use strict\" not allowed in function with non-simple parameters",
        "description": "The JavaScript exception \"\"use strict\" not allowed in function\" occurs\nwhen a \"use strict\" directive is used at the top of a function with\ndefault parameters,\nrest parameters, or\ndestructuring parameters.\n\nSyntaxError.\n\nA \"use strict\" directive is written at the top of a function that has one\nof the following parameters:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Reserved identifier": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Reserved_identifier",
        "title": "SyntaxError: \"x\" is a reserved identifier",
        "description": "The JavaScript exception \"variable is a reserved identifier\" occurs\nwhen reserved keywords are used as identifiers.\n\nReserved keywords will throw in\nif they are used as identifiers. These are reserved in\nstrict mode and sloppy mode:\n\nThe following are only reserved when they are found in strict mode code:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Deprecated octal literal": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Deprecated_octal_literal",
        "title": "SyntaxError: \"0\"-prefixed octal literals are deprecated",
        "description": "The JavaScript strict mode-only exception \"0-prefixed octal literals are deprecated; use the \"0o\" prefix instead\" occurs when deprecated octal literals (0 followed by digits) are used.\n\nSyntaxError in strict mode only.\n\nOctal literals are deprecated. When you prefix a decimal integer with 0, you actually change it to an octal literal, which may be surprising. The standardized syntax uses a leading zero followed by a lowercase or uppercase Latin letter \"O\" (0o or 0O).",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Bad strict arguments eval": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Bad_strict_arguments_eval",
        "title": "SyntaxError: 'arguments'/'eval' can't be defined or assigned to in strict mode code",
        "description": "The JavaScript strict mode-only exception \"'arguments' can't be defined or assigned to in strict mode code\" or \"'eval' can't be defined or assigned to in strict mode code\" occurs when attempting to create a binding called arguments or eval, or assign to such a name.\n\nIn strict mode, the names arguments and eval behave as if they are reserved words: you cannot make they refer to anything other than the arguments object in functions or the global eval function.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Arguments not allowed": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Arguments_not_allowed",
        "title": "SyntaxError: arguments is not valid in fields",
        "description": "The JavaScript exception \"SyntaxError: arguments is not valid in fields\" occurs when the arguments identifier is read in a class field initializer or in a static initialization block, outside of a non-arrow function.\n\nA class field initializer expression or a class static initialization block does not have arguments in its scope. Trying to access it is a syntax error.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Bad await": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Bad_await",
        "title": "SyntaxError: await is only valid in async functions, async generators and modules",
        "description": "The JavaScript exception \"await is only valid in async functions, async generators and modules\" occurs when an await expression is used outside of async functions or modules or other async contexts.\n\nSyntaxError.\n\nJavaScript execution is never blocking: an await can never block the execution of the program. Instead, it pauses the execution of the surrounding async task, while allowing other tasks to continue running. Therefore, await cannot be used in sync tasks, such as functions, generator functions, or top level of scripts. It is not always apparent whether the current file is a script or a module \u00e2\u0080\u0094 see the Modules guide for more information.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Invalid for-of initializer": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_for-of_initializer",
        "title": "SyntaxError: a declaration in the head of a for-of loop can't have an initializer",
        "description": "The JavaScript exception \"a declaration in the head of a for-of loop can't have an initializer\" occurs when the head of a for...of loop contains an initializer expression such as for (const i = 0 of iterable). This is not allowed in for-of loops.\n\nThe head of a for...of loop contains an initializer expression. That is, a variable is declared and assigned a value for (const i = 0 of iterable). This is not allowed in for-of loops. You might want a for loop that does allow an initializer.\n\nYou need to remove the initializer (value = 50) in the head of the for-of loop. Maybe you intended to make 50 an offset value, in that case you could add it to the loop body, for example.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Delete in strict mode": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Delete_in_strict_mode",
        "title": "SyntaxError: applying the 'delete' operator to an unqualified name is deprecated",
        "description": "The JavaScript strict mode-only exception \"applying the 'delete' operator to an unqualified name is deprecated\" occurs when variables are attempted to be deleted using the delete operator.\n\nSyntaxError in strict mode only.\n\nNormal variables in JavaScript can't be deleted using the delete operator. In strict mode, an attempt to delete a variable will throw an error and is not allowed.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "await yield in parameter": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/await_yield_in_parameter",
        "title": "SyntaxError: await/yield expression can't be used in parameter",
        "description": "The JavaScript exception \"await expression can't be used in parameter\" or \"yield expression can't be used in parameter\" occurs when the default parameter expression contains the await or yield keyword and has the effect of pausing default parameter evaluation.\n\nThe default expression must be able to evaluate synchronously. If it contains an await or yield expression, it will pause the evaluation of the default expression, which is not allowed.\n\nNote:\nThis error is only generated when await or yield are valid operators in this function context. Otherwise, await or yield would be parsed as an identifier, and either not cause an error, or cause an error like \"reserved identifier\", or \"unexpected token\" if there's an expression following it.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Regex character class escape in class range": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Regex_character_class_escape_in_class_range",
        "title": "SyntaxError: character class escape cannot be used in class range in regular expression",
        "description": "The JavaScript exception \"character class escape cannot be used in class range in regular expression\" occurs when a Unicode-aware regular expression pattern contains a character class where a boundary of a character range is another character class, such as a character class escape.\n\nA character class can specify a range of characters by using a hyphen (-) between two characters. For example, [a-z] matches any lowercase letter from a to z. The two bounds of the range must represent single characters in order for the range to make sense. If one of the bounds actually represents multiple characters, an error is generated. In non-v-mode character classes, only character class escapes are allowed inside character classes; in v-mode character classes, this can also happen if one the bounds is another [...] character class.\n\nIn Unicode-unaware mode, this syntax causes the - to become a literal character instead of generating an error, but this is a deprecated syntax and you should not rely on it.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Duplicate parameter": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Duplicate_parameter",
        "title": "SyntaxError: duplicate formal argument x",
        "description": "The JavaScript exception \"duplicate formal argument x\" or \"duplicate argument names not allowed in this context\" occurs when a function creates two or more parameter bindings with the same name, and the function is not a non-strict function with only simple parameters.\n\nHaving two formal parameters of the same name is likely a mistake\u00e2\u0080\u0094the second occurrence would cause the first occurrence to be inaccessible through the parameter name. In legacy JavaScript, this was allowed. Therefore, to not break existing code, this is only an error if the code is guaranteed to not be legacy\u00e2\u0080\u0094either because it is in strict mode or it uses modern parameter syntax (rest, default, or destructured parameters).",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Regex duplicate capture group name": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Regex_duplicate_capture_group_name",
        "title": "SyntaxError: duplicate capture group name in regular expression",
        "description": "The JavaScript exception \"duplicate capture group name in regular expression\" occurs when a regular expression pattern contains two or more named capturing groups with the same name, and these capture groups could be matched at the same time.\n\nAll named capturing groups in a regular expression pattern must have unique names. A more recent feature allows named capturing groups to share names, as long as they belong to different disjunction alternatives and cannot be matched at the same time (see browser compatibility for this). However, it is still an error if the named capturing groups with the same name could be matched at the same time, as that would make other features, such as named backreferences, ambiguous.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Bad continue": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Bad_continue",
        "title": "SyntaxError: continue must be inside loop",
        "description": "The JavaScript exception \"continue must be inside loop\" occurs when a continue statement is not inside a loop statement.\n\nSyntaxError.\n\ncontinue statements can be used to continue a loop, and using them elsewhere is a syntax error. Alternatively, you can provide a label to the continue statement to continue any loop with that label \u00e2\u0080\u0094 however, if the label does not reference a containing statement, another error SyntaxError: label not found will be thrown, and if the label references a statement that is not a loop, a syntax error is still thrown.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Cant use nullish coalescing unparenthesized": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cant_use_nullish_coalescing_unparenthesized",
        "title": "SyntaxError: cannot use `??` unparenthesized within `||` and `&&` expressions",
        "description": "The JavaScript exception \"cannot use ?? unparenthesized within || and && expressions\" occurs when an nullish coalescing operator is used with a logical OR or logical AND in the same expression without parentheses.\n\nThe operator precedence chain looks like this:\n\nHowever, the precedence between ?? and &&/|| is intentionally undefined, because the short circuiting behavior of logical operators can make the expression's evaluation counter-intuitive. Therefore, the following combinations are all syntax errors, because the language doesn't know how to parenthesize the operands:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Unnamed function statement": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Unnamed_function_statement",
        "title": "SyntaxError: function statement requires a name",
        "description": "The JavaScript exception \"function statement requires a name\" occurs\nwhen there is a function statement\nin the code that requires a name.\n\nThere is a function statement in the code that requires a name.\nYou'll need to check how functions are defined and if you need to provide a name for it, or if the function in question needs to be a function expression, an IIFE, or if the function code is placed correctly in this context at all.\n\nA function statement (or function declaration) requires a name.\nThis won't work:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Either be both static or non-static": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Either_be_both_static_or_non-static",
        "title": "SyntaxError: getter and setter for private name #x should either be both static or non-static",
        "description": "The JavaScript exception \"mismatched placement\" occurs when a private getter and setter are mismatched in whether or not they are static.\n\nPrivate getters and setters for the same name must either be both static, or both non-static. This limitation does not exist for public methods.\n\nSince foo is private, the methods must be either both static:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Invalid for-in initializer": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_for-in_initializer",
        "title": "SyntaxError: for-in loop head declarations may not have initializers",
        "description": "The JavaScript strict mode-only exception\n\"for-in loop head declarations may not have initializers\"\noccurs when the head of a for...in contains\nan initializer expression, such as for (var i = 0 in obj). This is not\nallowed in for-in loops in strict mode. In addition, lexical declarations with initializers like for (const i = 0 in obj) are not allowed outside strict mode either.\n\nSyntaxError.\n\nThe head of a for...in loop contains an initializer expression.\nThat is, a variable is declared and assigned a value for (var i = 0 in obj).\nIn non-strict mode, this head declaration is silently ignored and behaves like for (var i in obj).\nIn strict mode, however, a SyntaxError is thrown. In addition, lexical declarations with initializers like for (const i = 0 in obj) are not allowed outside strict mode either, and will always produce a SyntaxError.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Function label": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Function_label",
        "title": "SyntaxError: functions cannot be labelled",
        "description": "The JavaScript exception \"functions cannot be labelled\" occurs when a function declaration has a label before it.\n\nFunction declarations are never supposed to be labeled, because labels should only apply to statements, not declarations. There's no way to actually jump to this label. However, due to some legacy JavaScript syntax rules, the error condition is a bit more complicated than necessary:\n\nThe error message may say something along the lines of \"invalid place for a function declaration to appear\", because when the parser sees a label, it expects a statement to follow, and a function declaration is not a statement. It depends on whether the error's perspective is that a label cannot be followed by a function, or that a function cannot be preceded by a label.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Getter no arguments": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Getter_no_arguments",
        "title": "SyntaxError: getter functions must have no arguments",
        "description": "The JavaScript exception \"getter functions must have no arguments\" occurs when a getter is declared and the parameter list is non-empty.\n\nThe get property syntax looks like a function, but it is stricter and not all function syntax is allowed. A getter is always invoked with no arguments, so defining it with any parameter is likely an error.\n\nNote that this error only applies to property getters using the get syntax. If you define the getter using Object.defineProperty(), etc., the getter is defined as a normal function, although it's likely still an error if the getter expects any arguments, as it will be called without any.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "import decl module top level": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/import_decl_module_top_level",
        "title": "SyntaxError: import declarations may only appear at top level of a module",
        "description": "The JavaScript exception \"import declarations may only appear at top level of a module\" occurs when an import declaration is not at the top level of a module. This might be because the import declaration is nested in other constructs (functions, blocks, etc.), or more often because the current file is not treated as a module.\n\nYou may have an import declaration that's nested in another construct, such as a function or a block. The import declaration must be at the top level of the module. If you want to conditionally import a module, or lazily import it on demand, use dynamic import instead.\n\nIf the import is already at the top level of the code, it may be because the file is not interpreted as a module. Runtimes require external hints to determine whether a file is a module or not, and here are several ways to provide such hints:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Invalid assignment left-hand side": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_assignment_left-hand_side",
        "title": "SyntaxError: invalid assignment left-hand side",
        "description": "The JavaScript exception \"invalid assignment left-hand side\" occurs when there was an unexpected assignment somewhere. It may be triggered when a single = sign was used instead of == or ===.\n\nSyntaxError or ReferenceError, depending on the syntax.\n\nThere was an unexpected assignment somewhere. This might be due to a mismatch of an assignment operator and an equality operator, for example. While a single = sign assigns a value to a variable, the == or === operators compare a value.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Identifier after number": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Identifier_after_number",
        "title": "SyntaxError: identifier starts immediately after numeric literal",
        "description": "The JavaScript exception \"identifier starts immediately after numeric literal\" occurs\nwhen an identifier started with a digit. Identifiers can only start with a letter,\nunderscore (_), or dollar sign ($).\n\nThe names of variables, called identifiers, conform to certain rules,\nwhich your code must adhere to!\n\nA JavaScript identifier must start with a letter, underscore (_), or dollar sign ($).\nThey can't start with a digit! Only subsequent characters can be digits (0-9).",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Regex incomplete quantifier": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Regex_incomplete_quantifier",
        "title": "SyntaxError: incomplete quantifier in regular expression",
        "description": "The JavaScript exception \"incomplete quantifier in regular expression\" occurs when a regular expression pattern contains a {, but it does not start a valid quantifier.\n\nA { character in a regular expression pattern starts a quantifier. A valid quantifier is in the form {n}, {n,}, or {n,m}, where n and m are non-negative integers and m is not less than n. If the { character does not start a valid quantifier, a SyntaxError occurs.\n\nIn Unicode-unaware mode, this syntax causes the { to become a literal character instead of generating an error, but this is a deprecated syntax and you should not rely on it.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Illegal character": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Illegal_character",
        "title": "SyntaxError: illegal character",
        "description": "The JavaScript exception \"illegal character\" occurs when the lexer reads a character that's not part of a string literal, and the character cannot constitute a valid token in the language.\n\nThere is an invalid character that the interpreter doesn't understand. You should either put it in a string literal or replace it with another character. Use an editor that supports syntax highlighting and carefully check your code\nagainst mismatches like a minus sign (-) versus a dash (\u00e2\u0080\u0093)\nor simple quotes (\") versus non-standard quotation marks (\u00e2\u0080\u009c).\n\nSome characters look similar, but will cause the parser to fail interpreting your code.\nFamous examples of this are quotes, the minus or semicolon\n(greek question mark (U+37e) looks same).",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Regex invalid class set operation": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Regex_invalid_class_set_operation",
        "title": "SyntaxError: invalid class set operation in regular expression",
        "description": "The JavaScript exception \"invalid class set operation in regular expression\" occurs when a double punctuator sequence appears in a v-mode character class but it is not recognized by the syntax.\n\nThere are three possible ways this could happen:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Invalid BigInt syntax": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_BigInt_syntax",
        "title": "SyntaxError: invalid BigInt syntax",
        "description": "The JavaScript exception \"invalid BigInt syntax\" occurs when a string value is being coerced to a BigInt but it failed to be parsed as an integer.\n\nSyntaxError.\n\nWhen using the BigInt() function to convert a string to a BigInt, the string will be parsed in the same way as source code, and the resulting value must be an integer value.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Regex invalid decimal escape": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Regex_invalid_decimal_escape",
        "title": "SyntaxError: invalid decimal escape in regular expression",
        "description": "The JavaScript exception \"invalid decimal escape in regular expression\" occurs when a legacy octal escape sequence is used in a Unicode-aware regular expression pattern.\n\nIn a regular expression, \\0 followed by another digit is a legacy octal escape sequence. The same syntax is banned in template strings and strict-mode string literals. In regexes, this feature is disabled by the Unicode-aware modes (u and v). \\0 not followed by another digit is a valid escape sequence that represents the null character (U+0000).\n\n\\ followed by a non-zero digit is a backreference, and is invalid in Unicode-aware mode if it doesn't refer to a capturing group; see invalid identity escape for more information.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Regex invalid capture group name": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Regex_invalid_capture_group_name",
        "title": "SyntaxError: invalid capture group name in regular expression",
        "description": "The JavaScript exception \"invalid capture group name in regular expression\" occurs when a named capturing group or named backreference contains an invalid identifier.\n\nEach named capturing group must have a name that is a valid identifier. You cannot use arbitrary strings as the group identifier.\n\nOr you might be building the regex dynamically:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Regex invalid char in class": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Regex_invalid_char_in_class",
        "title": "SyntaxError: invalid character in class in regular expression",
        "description": "The JavaScript exception \"invalid character in class in regular expression\" occurs when a character appears in a v-mode character class but it's not allowed to appear literally.\n\nNormally, character classes can contain almost all characters literally. However, the v mode made the character class syntax more sophisticated, and in order to leave room for future syntax extensions, some syntax characters are forbidden from appearing literally in a character class. They include: (, ), [, ], {, }, /, -, |. If you want to match these literal characters, escape them; for example: /[\\|]/v.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Regex invalid property name": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Regex_invalid_property_name",
        "title": "SyntaxError: invalid property name in regular expression",
        "description": "The JavaScript exception \"invalid property name in regular expression\" or \"invalid class property name in regular expression\" occurs when the \\p and \\P Unicode character class escapes are not followed by a valid Unicode property name and/or value.\n\nIn Unicode-aware mode, the \\p and \\P escape sequences are used to match characters or character sequences based on their Unicode properties. The \\p escape sequence matches characters with the specified Unicode property, while the \\P escape sequence matches characters without the specified Unicode property. The syntax is:\n\nIf it's not followed by {, then a recognizable property name/value, then }, this syntax error is thrown. For more information on what lone properties and property names are allowed, see the Unicode character class escape reference.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Regex invalid identity escape": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Regex_invalid_identity_escape",
        "title": "SyntaxError: invalid identity escape in regular expression",
        "description": "The JavaScript exception \"invalid identity escape in regular expression\" occurs when a Unicode-aware regular expression pattern contains an escape sequence that does not represent a recognized escape sequence.\n\nIn Unicode-unaware mode, \\ could be used to escape any character, including those without a defined meaning. In these cases, the escaped character represents itself. For example, \\q would match the character q. This severely limits the ability to add new escape sequences in the future, so in Unicode-aware mode, only recognized escape sequences are allowed. Do not add \\ redundantly.\n\nThis error is also thrown when the \\x character escape is not followed by two hexadecimal digits.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Regex invalid named capture reference": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Regex_invalid_named_capture_reference",
        "title": "SyntaxError: invalid named capture reference in regular expression",
        "description": "The JavaScript exception \"invalid named capture reference in regular expression\" occurs when a regular expression pattern contains a named backreference that does not refer to a named capture group before it. The similar error message \"invalid named reference in regular expression\" is thrown when the sequence \\k is encountered but is not followed by <.\n\nYou are using the escape sequence \\k which is parsed as a named backreference, but the \\k is either syntactically invalid or does not refer to a named capture group in the pattern.\n\n\\k only starts a named backreference when the pattern contains a named capturing group or when the pattern is Unicode-aware; otherwise, it is an identity escape for the character k.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Regex invalid range in character class": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Regex_invalid_range_in_character_class",
        "title": "SyntaxError: invalid range in character class",
        "description": "The JavaScript exception \"invalid range in character class\" occurs when a character class in a regular expression uses a range, but the start of the range is greater than the end.\n\nIn character classes, you can join two characters with a hyphen - to represent an inclusive interval of characters based on their Unicode code points. For example, [a-z] matches any lowercase letter. However, if the end of the range is less than the start, the range cannot match anything and is likely a mistake.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Regex invalid group": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Regex_invalid_group",
        "title": "SyntaxError: invalid regexp group",
        "description": "The JavaScript exception \"invalid regexp group\" occurs when the sequence (? does not start a valid group syntax. Recognized group syntaxes that start with (? include:\n\n(? followed by any other character would cause this error.\n\n? is not an atom, so it does not make sense to appear at the start of a capturing group (? is a quantifier and should be placed after an atom). Maybe you want to match the ? character literally, in which case you should escape it with a backslash (\\?). Maybe you remembered the regex syntax wrong, and you intend to use one of the recognized group syntaxes listed above. Maybe you are using a feature that is not supported by the current JavaScript engine.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Missing colon after property id": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Missing_colon_after_property_id",
        "title": "SyntaxError: missing : after property id",
        "description": "The JavaScript exception \"missing : after property id\" occurs when objects are created\nusing the object initializer syntax.\nA colon (:) separates keys and values for the\nobject's properties. Somehow, this colon is missing or misplaced.\n\nWhen creating objects with the object initializer syntax,\na colon (:) separates keys and values for the object's properties.\n\nThis code fails, as the equal sign can't be used this way in this object initializer\nsyntax.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Regex invalid unicode escape": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Regex_invalid_unicode_escape",
        "title": "SyntaxError: invalid unicode escape in regular expression",
        "description": "The JavaScript exception \"invalid unicode escape in regular expression\" occurs when the \\c and \\u character escapes are not followed by valid characters.\n\nIn Unicode-aware mode mode, the \\c escape sequence must be followed by a letter from A to Z or a to z, and the \\u escape sequence must either be followed by 4 hexadecimal digits, or 1 to 6 hexadecimal digits enclosed in curly braces ({}). Furthermore, when using the \\u{xxx} escape sequence, the digits must represent a valid Unicode code point, which means its value cannot exceed 10FFFF.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Label not found": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Label_not_found",
        "title": "SyntaxError: label not found",
        "description": "The JavaScript exception \"label not found\" occurs when a break or continue statement references a label that does not exist on any statement that contains the break or continue statement.\n\nSyntaxError.\n\nIn JavaScript, labels are very limited: you can only use them with break and continue statements, and you can only jump to them from a statement contained within the labeled statement. You cannot jump to this label from anywhere in the program.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Bad regexp flag": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Bad_regexp_flag",
        "title": "SyntaxError: invalid regular expression flag \"x\"",
        "description": "The JavaScript exception \"invalid regular expression flag\" occurs when the flags in a regular expression contain any flag that is not one of: d, g, i, m, s, u, v, or y. It may also be raised if the expression contains more than one instance of a valid flag, or when the u and v flags are used together.\n\nThe regular expression contains invalid flags, or valid flags have been used more than once in the expression.\n\nThe valid (allowed) flags are d, g, i, m, s, u, v, and y. They are introduced in more detail in Regular expressions > Advanced searching with flags.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "JSON bad parse": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/JSON_bad_parse",
        "title": "SyntaxError: JSON.parse: bad parsing",
        "description": "The JavaScript exceptions thrown by JSON.parse() occur when string failed\nto be parsed as JSON.\n\nJSON.parse() parses a string as JSON. This string has to be valid JSON\nand will throw this error if incorrect syntax was encountered.\n\nBoth lines will throw a SyntaxError:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Missing curly after function body": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_function_body",
        "title": "SyntaxError: missing } after function body",
        "description": "The JavaScript exception \"missing } after function body\" occurs when there is a syntax\nmistake when creating a function somewhere. Check if any closing curly braces or\nparenthesis are in the correct order.\n\nThere is a syntax mistake when creating a function somewhere. Also check if any closing\ncurly braces or parenthesis are in the correct order. Indenting or formatting the code\na bit nicer might also help you to see through the jungle.\n\nOftentimes, there is a missing curly bracket in your function code:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Missing curly after property list": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_property_list",
        "title": "SyntaxError: missing } after property list",
        "description": "The JavaScript exception \"missing } after property list\" occurs when there is a mistake\nin the object initializer syntax somewhere.\nMight be in fact a missing curly bracket, but could also be a missing comma.\n\nThere is a mistake in the object initializer\nsyntax somewhere. Might be in fact a missing curly bracket, but could\nalso be a missing comma, for example. Also check if any closing curly braces or\nparenthesis are in the correct order. Indenting or formatting the code a bit nicer might\nalso help you to see through the jungle.\n\nOftentimes, there is a missing comma in your object initializer code:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Missing parenthesis after condition": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_condition",
        "title": "SyntaxError: missing ) after condition",
        "description": "The JavaScript exception \"missing ) after condition\" occurs when there is an error with\nhow an\nif\ncondition is written. It must appear in parenthesis after the if keyword.\n\nThere is an error with how an\nif\ncondition is written. In any programming language, code needs to make decisions and\ncarry out actions accordingly depending on different inputs. The if statement executes a\nstatement if a specified condition is truthy. In JavaScript, this condition must appear\nin parenthesis after the if keyword, like this:\n\nIt might just be an oversight, carefully check all you parenthesis in your code.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Missing bracket after list": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Missing_bracket_after_list",
        "title": "SyntaxError: missing ] after element list",
        "description": "The JavaScript exception \"missing ] after element list\" occurs when there is an error\nwith the array initializer syntax somewhere. Likely there is a closing square bracket\n(]) or a comma (,) missing.\n\nSyntaxError.\n\nThere is an error with the array initializer syntax somewhere. Likely there is a\nclosing square bracket (]) or a comma (,) missing.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Missing parenthesis after argument list": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_argument_list",
        "title": "SyntaxError: missing ) after argument list",
        "description": "The JavaScript exception \"missing ) after argument list\" occurs when there is an error\nwith how a function is called. This might be a typo, a missing operator, or an unescaped\nstring.\n\nSyntaxError.\n\nThere is an error with how a function is called. This might be a typo, a missing\noperator, or an unescaped string, for example.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Regex negated char class with strings": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Regex_negated_char_class_with_strings",
        "title": "SyntaxError: negated character class with strings in regular expression",
        "description": "The JavaScript exception \"negated character class with strings in regular expression\" occurs when a v-mode character class is negated and may be able to match a string (more than one character).\n\nIn v mode, character classes are able to match more than 1 character. For example, /[\\q{abc}]/v would match the sequence \"abc\", and /[\\p{RGI_Emoji_Flag_Sequence}]/v would match any character sequence that represents an emoji flag. However, negated character classes [^...] are not allowed to match strings, so /[^\\p{RGI_Emoji_Flag_Sequence}]/v is invalid, because it's unclear how many characters it should match. For more information, see the v-mode character class reference.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "No variable name": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/No_variable_name",
        "title": "SyntaxError: missing variable name",
        "description": "The JavaScript exception \"missing variable name\" is a common error.\nIt is usually caused by omitting a variable name or a typographic error.\n\nA variable is missing a name. The cause is most likely a typo or a forgotten variable name.\nMake sure that you've provided the name of the variable before the = sign.\n\nWhen declaring multiple variables at the same time, make sure that the previous lines/declaration does not end with a comma instead of a semicolon.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Missing initializer in const": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Missing_initializer_in_const",
        "title": "SyntaxError: missing = in const declaration",
        "description": "The JavaScript exception \"missing = in const declaration\" occurs when a const\ndeclaration was not given a value in the same statement (like\nconst RED_FLAG;). You need to provide one\n(const RED_FLAG = \"#ff0\").\n\nA constant is a value that cannot be altered by the program during normal execution. It\ncannot change through re-assignment, and it can't be redeclared. In JavaScript,\nconstants are declared using the\nconst\nkeyword. An initializer for a constant is required; that is, you must specify its value\nin the same statement in which it's declared (which makes sense, given that it can't be\nchanged later).\n\nUnlike var or let, you must specify a value for a\nconst declaration. This throws:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Missing formal parameter": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Missing_formal_parameter",
        "title": "SyntaxError: missing formal parameter",
        "description": "The JavaScript exception \"missing formal parameter\" occurs when your function\ndeclaration is missing valid parameters.\n\n\"Formal parameter\" is a fancy way of saying \"function parameter\". Your function\ndeclaration is missing valid parameters. In the declaration of a function, the\nparameters must be identifiers, not any\nvalue like numbers, strings, or objects. Declaring functions and calling functions are\ntwo separate steps. Declarations require identifier as parameters, and only when calling\n(invoking) the function, you provide the values the function should use.\n\nIn JavaScript, identifiers can contain\nonly alphanumeric characters (or \"$\" or \"_\"), and may not start with a digit. An\nidentifier differs from a string in that a string is data, while an\nidentifier is part of the code.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Missing name after dot operator": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Missing_name_after_dot_operator",
        "title": "SyntaxError: missing name after . operator",
        "description": "The JavaScript exception \"missing name after . operator\" occurs when there is a problem\nwith how the dot operator (.) is used\nfor property access.\n\nThe dot operator (.) is used for property access.\nYou will have to specify the name of the property that you want to access.\nFor computed property access, you might need to change your property access from using a\ndot to using square brackets. These will allow you to compute an expression. Maybe you\nintended to do concatenation instead? A plus operator (+) is needed in that\ncase. Please see the examples below.\n\nProperty accessors\nin JavaScript use either the dot (.) or square brackets ([]), but not both.\nSquare brackets allow computed property access.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Deprecated octal escape sequence": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Deprecated_octal_escape_sequence",
        "title": "SyntaxError: octal escape sequences can't be used in untagged template literals or in strict mode code",
        "description": "The JavaScript exception \"octal escape sequences can't be used in untagged template literals or in strict mode code\" occurs when octal escape sequences are used in strict mode string literals or untagged template literals.\n\nThe string escape sequence of the form \\ followed by any number of digits, except a single 0, is deprecated. If you want to represent a character by its code point value, you should use the \\x or \\u escape sequence instead, such as \\x01 or \\u0001 instead of \\1.\n\nUntagged template literals are never allowed to contain octal escape sequences, whether in strict mode or not. However, tagged template literals can contain any form of escape sequence, and will cause the template array received by the tag function to contain undefined.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Bad new optional": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Bad_new_optional",
        "title": "SyntaxError: new keyword cannot be used with an optional chain",
        "description": "The JavaScript exception \"new keyword cannot be used with an optional chain\" occurs when the constructor of a new expression is an optional chain, or if there's an optional chain between the constructor and the parenthesized list of arguments.\n\nThere are two ways to get this error. The first one is if the constructor expression is an optional chain expression, like this:\n\nThe second one is if ?. occurs between the constructor and the arguments list, like this:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Regex numbers out of order in quantifier": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Regex_numbers_out_of_order_in_quantifier",
        "title": "SyntaxError: numbers out of order in {} quantifier.",
        "description": "The JavaScript exception \"numbers out of order in {} quantifier\" occurs when a quantifier in a regular expression uses the {n,m} syntax but m is less than n.\n\nThe {n,m} syntax in a regular expression is used to specify that the preceding item is to be matched at least n times, but not more than m times. If m is less than n, the quantifier is nonsensical because, for example, a character cannot appear at least 2 times but not more than 1 time. Therefore, an error is thrown.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Parameter after rest parameter": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Parameter_after_rest_parameter",
        "title": "SyntaxError: parameter after rest parameter",
        "description": "The JavaScript exception \"parameter after rest parameter\" occurs when a rest parameter is followed by anything else in a parameter list, including another rest parameter, a formal parameter, or a trailing comma.\n\nA rest parameter must be the last parameter in a function definition. This is because the rest parameter collects all the remaining arguments passed to the function, so it doesn't make sense to have any parameters after it. The next non-whitespace character must be the closing parenthesis of the parameter list.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Regex nothing to repeat": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Regex_nothing_to_repeat",
        "title": "SyntaxError: nothing to repeat",
        "description": "The JavaScript exception \"nothing to repeat\" or \"invalid quantifier in regular expression\" occurs when a quantifier in a regular expression is applied to nothing or applied to an assertion.\n\nQuantifiers are used to specify how many times a character or group of characters can appear in a regular expression. For example, a{3} matches the character a exactly three times. Therefore, if the thing preceding the quantifier is not something that matches characters, the quantifier is invalid. For example: quantifiers at the start of a capturing group, at the start of a disjunction alternative, etc., cannot repeat anything. Assertions don't consume characters, so it also doesn't make sense to repeat them.\n\nIn Unicode-unaware mode, there's a deprecated syntax that allows the lookahead assertions to be quantified. This is a deprecated syntax and you should not rely on it.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Cant delete private fields": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cant_delete_private_fields",
        "title": "SyntaxError: private fields can't be deleted",
        "description": "The JavaScript exception \"SyntaxError: private fields can't be deleted\" occurs when delete is used on a private property of a class or an object.\n\nThere's code trying to delete a private property (field or method) of an object or a class. This is forbidden by JavaScript\u00e2\u0080\u0094private properties cannot be added or removed on the fly.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Undeclared private field or method": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Undeclared_private_field_or_method",
        "title": "SyntaxError: reference to undeclared private field or method #x",
        "description": "The JavaScript exception \"reference to undeclared private field or method #x\" occurs when a private name is used, but this private name is not declared in the class scope.\n\nUnlike normal string or symbol properties, which return undefined if the property does not exist, private names are very strict and can only be legally accessed if they actually exist. Accessing an undeclared private name will result in a syntax error, while accessing a private name that is declared but doesn't exist on the object will result in a type error.\n\nYou cannot access a private field that is not declared in the class scope.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Redeclared parameter": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Redeclared_parameter",
        "title": "SyntaxError: redeclaration of formal parameter \"x\"",
        "description": "The JavaScript exception \"redeclaration of formal parameter\" occurs when the same\nvariable name occurs as a function parameter and is then redeclared using a\nlet assignment in a function body again.\n\nThe same variable name occurs as a function parameter and is then redeclared using a\nlet assignment in a function body again. Redeclaring the\nsame variable within the same function or block scope using let is not\nallowed in JavaScript.\n\nIn this case, the variable \"arg\" redeclares the argument.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Regex raw bracket": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Regex_raw_bracket",
        "title": "SyntaxError: raw bracket is not allowed in regular expression with unicode flag",
        "description": "The JavaScript exception \"raw bracket is not allowed in regular expression with unicode flag\" occurs when a Unicode-aware regular expression pattern contains a raw bracket ({, }, ]) that is not part of a quantifier or character class.\n\nIn Unicode-unaware mode, {, }, and ] that are not part of a quantifier or character class are treated as literal characters. This may hide errors in your code and is therefore deprecated and disallowed in Unicode-aware mode. You should either check whether you have invalid syntax or you should escape the characters to match them literally.\n\nIf { appears in a context that accepts a quantifier, it is treated as the start of a quantifier. If what follows it is not a valid quantifier, another syntax error, incomplete quantifier, is thrown.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Duplicate proto": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Duplicate_proto",
        "title": "SyntaxError: property name __proto__ appears more than once in object literal",
        "description": "The JavaScript exception \"property name __proto__ appears more than once in object literal\" occurs when an object literal contains multiple occurrences of the __proto__ field, which is used to set the prototype of this new object.\n\nThe __proto__ key, unlike other property keys, is a special syntax in an object literal. It is used to set the prototype of the object being created and is not allowed to appear more than once in an object literal. Note that this restriction only applies to the __proto__ prototype setter syntax: if it actually has the effect of creating a property called __proto__, then it can appear multiple times. See prototype setter for the exact syntax restrictions.\n\nWorth noting that the __proto__ key in object literals is a special syntax and is not deprecated, unlike the Object.prototype.__proto__ accessor property.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Bad super call": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Bad_super_call",
        "title": "SyntaxError: super() is only valid in derived class constructors",
        "description": "The JavaScript exception \"super() is only valid in derived class constructors\" occurs when the super() call is used somewhere that's not the body of a constructor in a class with extends keyword.\n\nThe super() call is used to invoke the base constructor of a derived class, so the base class can initialize the this object. Using it anywhere else doesn't make sense.\n\nsuper() can also be defined in an arrow function that's nested within the constructor. However, it cannot be defined in any other kind of function.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "String literal EOL": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/String_literal_EOL",
        "title": "SyntaxError: string literal contains an unescaped line break",
        "description": "The JavaScript error \"string literal contains an unescaped line break\" occurs when there is an unterminated\nstring literal somewhere. String literals must be enclosed by single\n(') or double (\") quotes and cannot split across multiple lines.\n\nThere is an unterminated\nstring literal somewhere. String literals must be\nenclosed by single (') or double (\") quotes. JavaScript makes\nno distinction between single-quoted strings and double-quoted strings.\nEscape sequences work\nin strings created with either single or double quotes.\nTo fix this error, check if:\n\nYou can't split a string across multiple lines like this in JavaScript:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Rest with default": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Rest_with_default",
        "title": "SyntaxError: rest parameter may not have a default",
        "description": "The JavaScript exception \"rest parameter may not have a default\" occurs when a rest parameter has a default value. Because the rest parameter always creates an array, the default value would never apply.\n\nA default parameter gives a parameter a default value if the argument is not passed or passed as undefined. A rest parameter collects all the remaining arguments passed to the function and always creates an array. Therefore, it doesn't make sense to have a default value for a rest parameter.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Setter one argument": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Setter_one_argument",
        "title": "SyntaxError: setter functions must have one argument",
        "description": "The JavaScript exception \"setter functions must have one argument\" occurs when a setter is declared and the parameter list is not consisted of exactly one formal parameter.\n\nThe set property syntax looks like a function, but it is stricter and not all function syntax is allowed. A setter is always invoked with exactly one argument, so defining it with any other number of parameters is likely an error. This parameter can be destructured or have a default value, but it cannot be a rest parameter.\n\nNote that this error only applies to property setters using the set syntax. If you define the setter using Object.defineProperty(), etc., the setter is defined as a normal function, although it's likely still an error if the setter expects any other number of arguments, as it will be called with exactly one.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Bad return": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Bad_return",
        "title": "SyntaxError: return not in function",
        "description": "The JavaScript exception \"return not in function\" occurs when a return statement is called outside of a function.\n\nSyntaxError.\n\nA return statement is called outside of a function. Maybe there are missing curly braces somewhere? The return statement must be in a function, because it ends function execution and specifies a value to be returned to the function caller.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Bad optional template": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Bad_optional_template",
        "title": "SyntaxError: tagged template cannot be used with optional chain",
        "description": "The JavaScript exception \"tagged template cannot be used with optional chain\" occurs when the tag expression of a tagged template literal is an optional chain, or if there's an optional chain between the tag and the template.\n\nThere are two ways to get this error. The first one is if the tag expression is an optional chain expression, like this:\n\nThe second one is if ?. occurs between the tag and the template, like this:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Unexpected token": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Unexpected_token",
        "title": "SyntaxError: Unexpected token",
        "description": "The JavaScript exceptions \"unexpected token\" occur when the parser does not see a token it recognizes at the given position, so it cannot make sense of the structure of the program. This might be a simple typo.\n\nA specific language construct was expected, but something else was provided. This might\nbe a simple typo.\n\nFor example, when chaining expressions, trailing commas are not allowed.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Unparenthesized unary expr lhs exponentiation": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Unparenthesized_unary_expr_lhs_exponentiation",
        "title": "SyntaxError: unparenthesized unary expression can't appear on the left-hand side of '**'",
        "description": "The JavaScript exception \"unparenthesized unary expression can't appear on the left-hand side of '**'\" occurs when a unary operator (one of typeof, void, delete, await, !, ~, +, -) is used on the left operand of the exponentiation operator without parentheses.\n\nYou likely wrote something like this:\n\nWhether it should be evaluated as (-a) ** b or -(a ** b) is ambiguous. In mathematics, -x2 means -(x ** 2) \u00e2\u0080\u0094 and that's how many languages, including Python, Haskell, and PHP, handle it. But making the unary minus operator take precedence over ** breaks symmetry with a ** -b, which is unambiguously a ** (-b). Therefore, the language forbids this syntax and requires you to parenthesize either side to resolve the ambiguity.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Hash outside class": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Hash_outside_class",
        "title": "SyntaxError: Unexpected '#' used outside of class body",
        "description": "The JavaScript exception \"Unexpected '#' used outside of class body\" occurs when a hash\n(\"#\") is encountered in an unexpected context, most notably\noutside of a class declaration.\nHashes are valid at the beginning of a file as a hashbang comment,\nor inside of a class as part of a private field. You may encounter this error if you forget\nthe quotation marks when trying to access a DOM identifier as well.\n\nWe encountered a # somewhere unexpected. This may be due to code moving around and no\nlonger being part of a class, a hashbang comment found on a line other than the first\nline of a file, or accidentally forgetting the quotation marks around a DOM identifier.\n\nFor each case, there might be something slightly wrong. For example",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Bad break": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Bad_break",
        "title": "SyntaxError: unlabeled break must be inside loop or switch",
        "description": "The JavaScript exception \"unlabeled break must be inside loop or switch\" occurs when a break statement is not inside a loop or a switch statement.\n\nSyntaxError.\n\nbreak statements can be used to exit a loop or a switch statement, and using them elsewhere is a syntax error. Alternatively, you can provide a label to the break statement to break out of any statement with that label \u00e2\u0080\u0094 however, if the label does not reference a containing statement, another error SyntaxError: label not found will be thrown.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Deprecated caller or arguments usage": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Deprecated_caller_or_arguments_usage",
        "title": "TypeError: 'caller', 'callee', and 'arguments' properties may not be accessed",
        "description": "The JavaScript strict mode-only exception\n\"'caller', 'callee', and 'arguments' properties may not be accessed on strict mode functions or the arguments objects for calls to them\" occurs when the\ndeprecated arguments.callee, Function.prototype.caller, or Function.prototype.arguments properties\nare used.\n\nTypeError in strict mode only.\n\nIn strict mode, the arguments.callee,\nFunction.prototype.caller, or Function.prototype.arguments properties are used\nand shouldn't be. They are deprecated, because they leak the function caller, are\nnon-standard, hard to optimize and potentially a performance-harmful feature.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "is not iterable": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/is_not_iterable",
        "title": "TypeError: 'x' is not iterable",
        "description": "The JavaScript exception \"is not iterable\" occurs when the value which is spread into an array or function call, given as the\nright-hand side of for...of,\nas argument of a function such as Promise.all or Set(),\nor as the right-hand side of an array destructuring,\nis not an iterable object. This error is also encountered when Array.fromAsync() or for await...of is used with a non-async iterable.\n\nThe value which is spread into an array or function call, given as the right-hand side of for...of,\nor as argument of a function such as Promise.all or Set(),\nor as the source of an array destructuring pattern,\nis not an iterable object.\nAn iterable can be a built-in iterable type such as\nArray, String or Map, a generator result, or\nan object implementing the iterable protocol.\n\nThe non-iterable might turn to be undefined in some runtime environments.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Unexpected type": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Unexpected_type",
        "title": "TypeError: \"x\" is (not) \"y\"",
        "description": "The JavaScript exception \"x is (not) y\" occurs when there was an\nunexpected type. Oftentimes, unexpected undefined or null\nvalues.\n\nTypeError.\n\nThere was an unexpected type. This occurs oftentimes with undefined or\nnull values.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Bad super prop": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Bad_super_prop",
        "title": "SyntaxError: use of super property/member accesses only valid within methods or eval code within methods",
        "description": "The JavaScript exception \"use of super property/member accesses only valid within methods or eval code within methods\" occurs when the super.x or super[x] syntax is used outside of a method.\n\nThe super.x syntax is used to access properties on the prototype of the current object. It can be used in methods of both object literals and classes, field initializers, and static initialization blocks, but not in other contexts.\n\nYou can't use super.x outside of a method in an object:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Deprecated source map pragma": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Deprecated_source_map_pragma",
        "title": "SyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead",
        "description": "The JavaScript warning \"Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead\" occurs when there is a deprecated source map syntax in a JavaScript source.\n\nA warning that a SyntaxError occurred. JavaScript execution won't be halted.\n\nThere is a deprecated source map syntax in a JavaScript source.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "No non-null object": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/No_non-null_object",
        "title": "TypeError: \"x\" is not a non-null object",
        "description": "The JavaScript exception \"is not a non-null object\" occurs when an object is expected\nsomewhere and wasn't provided. null is not an object and won't work.\n\nAn object is expected somewhere and wasn't provided. null is not an\nobject and won't work. You must provide a proper object in the given situation.\n\nWhen methods like Object.create() or\nObject.defineProperty() and Object.defineProperties() are\nused, the optional descriptor parameter expects a property descriptor object. Providing\nno object (like just a number), will throw an error:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Not a constructor": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Not_a_constructor",
        "title": "TypeError: \"x\" is not a constructor",
        "description": "The JavaScript exception \"is not a constructor\" occurs when there was an attempt to use\nan object or a variable as a constructor, but that object or variable is not a\nconstructor.\n\nThere was an attempt to use an object or a variable as a constructor, but that object\nor variable is not a constructor. See constructor\nor the new operator\nfor more information on what a constructor is.\n\nThere are many global objects, like String or Array, which\nare constructable using new. However, some global objects are not and their\nproperties and methods are static. The following JavaScript standard built-in objects\nare not a constructor: Math, JSON, Symbol,\nReflect, Intl, Atomics.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Read-only": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Read-only",
        "title": "TypeError: \"x\" is read-only",
        "description": "The JavaScript strict mode-only exception\n\"is read-only\" occurs when a global variable or object\nproperty that was assigned to is a read-only property.\n\nTypeError in strict mode only.\n\nThe global variable or object property that was assigned to is a read-only property.\n(Technically, it is a non-writable data property.)",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Already executing generator": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Already_executing_generator",
        "title": "TypeError: already executing generator",
        "description": "The JavaScript exception \"TypeError: already executing generator\" occurs when a generator is continued using one of its methods (such as next()) while executing the generator function's body itself.\n\nThe generator's methods, next(), return(), and throw(), are meant to continue the execution of a generator function when it's paused after a yield expression or before the first statement. If a call to one of these methods is made while executing the generator function, the error is thrown. If you want to return or throw within the generator function, use the return statement or the throw statement, respectively.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Not a function": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Not_a_function",
        "title": "TypeError: \"x\" is not a function",
        "description": "The JavaScript exception \"is not a function\" occurs when there was an attempt to call a\nvalue from a function, but the value is not actually a function.\n\nIt attempted to call a value from a function, but the value is not actually a function.\nSome code expects you to provide a function, but that didn't happen.\n\nMaybe there is a typo in the function name? Maybe the object you are calling the method\non does not have this function? For example, JavaScript Objects have no\nmap function, but the JavaScript Array object does.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Cant assign to property": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cant_assign_to_property",
        "title": "TypeError: can't assign to property \"x\" on \"y\": not an object",
        "description": "The JavaScript strict mode exception \"can't assign to property\" occurs when attempting\nto create a property on primitive value\nsuch as a symbol, a string, a number or a boolean. Primitive values cannot hold any property.\n\nTypeError.\n\nIn strict mode, a TypeError is raised when attempting to\ncreate a property on primitive value such\nas a symbol, a string, a number or a boolean. Primitive values cannot hold any property.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Cant convert BigInt to number": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cant_convert_BigInt_to_number",
        "title": "TypeError: can't convert BigInt to number",
        "description": "The JavaScript exception \"can't convert BigInt to number\" occurs when an arithmetic operation involves a mix of BigInt and Number values.\n\nTypeError.\n\nThe two sides of an arithmetic operator must both be BigInts or both not. If an operation involves a mix of BigInts and numbers, it's ambiguous whether the result should be a BigInt or number, since there may be loss of precision in both cases.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Builtin ctor no new": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Builtin_ctor_no_new",
        "title": "TypeError: calling a builtin X constructor without new is forbidden",
        "description": "The JavaScript exception \"calling a builtin X constructor without new is forbidden\" occurs when you try to call a builtin constructor without using the new keyword. All modern constructors, such as Promise and Map, must be called with new.\n\nIn JavaScript, calling a function without new and constructing a function with new are two distinct operations, and functions can behave differently depending on how they are called.\n\nApart from the following legacy constructors, all modern constructors must be called with new:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Get set missing private": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Get_set_missing_private",
        "title": "TypeError: can't access/set private field or method: object is not the right class",
        "description": "The JavaScript exception \"can't access private field or method: object is not the right class\" or \"can't set private field: object is not the right class\" occurs when a private field or method is get or set on an object that does not have this private property defined.\n\nYou are trying to get or set a private field or method on an object, but that object does not contain this private property. Private instance properties can only be accessed on instances of the class (including its subclasses) that declares them; private static properties can only be accessed on the class itself that declares them, and not on subclasses.\n\nThis error occurs when the private name exists in the class scope but the object it's accessed on is invalid, If the private name does not exist, you will get a syntax error instead.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "BigInt not serializable": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/BigInt_not_serializable",
        "title": "TypeError: BigInt value can't be serialized in JSON",
        "description": "The JavaScript exception \"BigInt value can't be serialized in JSON\" occurs when a BigInt is encountered in JSON.stringify with no custom serialization method provided.\n\nYou are trying to serialize a BigInt value using JSON.stringify, which does not support BigInt values by default.Sometimes, JSON stringification happens implicitly in libraries, as part of data serialization. For example, sending data to the server, storing it in external storage, or transferring it between threads would all require serialization, which is often done using JSON.\n\nThere are several ways to handle this:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Cant convert x to BigInt": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cant_convert_x_to_BigInt",
        "title": "TypeError: can't convert x to BigInt",
        "description": "The JavaScript exception \"x can't be converted to BigInt\" occurs when attempting to convert a Symbol, null, or undefined value to a BigInt, or if an operation expecting a BigInt parameter receives a number.\n\nTypeError.\n\nWhen using the BigInt() function to convert a value to a BigInt, the value would first be converted to a primitive. Then, if it's not one of BigInt, string, number, and boolean, the error is thrown.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Cant define property object not extensible": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cant_define_property_object_not_extensible",
        "title": "TypeError: can't define property \"x\": \"obj\" is not extensible",
        "description": "The JavaScript exception \"can't define property \"x\": \"obj\" is not extensible\" occurs\nwhen Object.preventExtensions() marked an object as no longer extensible,\nso that it will never have properties beyond the ones it had at the time it was marked\nas non-extensible.\n\nUsually, an object is extensible and new properties can be added to it. However, in\nthis case Object.preventExtensions() marked an object as no longer\nextensible, so that it will never have properties beyond the ones it had at the time it\nwas marked as non-extensible.\n\nIn strict mode,\nattempting to add new properties to a non-extensible object throws a\nTypeError. In sloppy mode, the addition of the \"x\" property is silently\nignored.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Cant set prototype": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cant_set_prototype",
        "title": "TypeError: can't set prototype of this object",
        "description": "The JavaScript exception \"can't set prototype of this object\" occurs when attempting to set the prototype of an object, but the object's prototype is frozen, either by being a built-in immutable prototype object, or by being non-extensible.\n\nYou are using one of the prototype-mutating methods\u00e2\u0080\u0094most notably, Object.setPrototypeOf()\u00e2\u0080\u0094on an object whose prototype is immutable. Some built-in objects have immutable prototypes, such as Object.prototype and window, for security reasons. User objects can also prevent prototype changes by using Object.preventExtensions(), Object.seal(), or Object.freeze().\n\nA selected few built-in objects have immutable prototypes. For example, you cannot change the prototype of Object.prototype:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Non configurable array element": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Non_configurable_array_element",
        "title": "TypeError: can't delete non-configurable array element",
        "description": "The JavaScript exception \"can't delete non-configurable array element\" occurs when it\nwas attempted to shorten the length\nof an array, but one of the array's elements is non-configurable.\n\nIt was attempted to shorten the length\nof an array, but one of the array's elements is non-configurable.\nWhen shortening an array, the elements beyond the new array length will be deleted,\nwhich failed in this situation.\n\nThe configurable attribute controls whether the property can be deleted\nfrom the object and whether its attributes (other than writable) can be\nchanged.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Cant redefine property": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cant_redefine_property",
        "title": "TypeError: can't redefine non-configurable property \"x\"",
        "description": "The JavaScript exception \"can't redefine non-configurable property\" occurs when it was\nattempted to redefine a property, but that property is non-configurable.\n\nIt was attempted to redefine a property, but that property is non-configurable. The\nconfigurable attribute controls whether the property can be deleted from\nthe object and whether its attributes (other than writable) can be changed.\nUsually, properties in an object created by an\nobject initializer are configurable. However, for example, when using\nObject.defineProperty(), the property isn't configurable by default.\n\nThe Object.defineProperty() creates non-configurable properties if you\nhaven't specified them as configurable.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Class ctor no new": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Class_ctor_no_new",
        "title": "TypeError: class constructors must be invoked with 'new'",
        "description": "The JavaScript exception \"class constructors must be invoked with 'new'\" occurs when a class constructor is called without the new keyword. All class constructors must be called with new.\n\nIn JavaScript, calling a function without new and constructing a function with new are two distinct operations, and functions can behave differently depending on how they are called.\n\nTraditionally, JavaScript functions have been used as both constructors and normal functions, and can detect how they were called using new.target. However, class constructors are always constructors and cannot be called as normal functions.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "in operator no object": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/in_operator_no_object",
        "title": "TypeError: cannot use 'in' operator to search for 'x' in 'y'",
        "description": "The JavaScript exception \"right-hand side of 'in' should be an object\" occurs when the\nin operator\nwas used to search in strings, or in numbers, or other primitive types. It can only be\nused to check if a property is in an object.\n\nThe in operator can only be used\nto check if a property is in an object.\nYou can't search in strings, or in numbers, or other primitive types.\n\nUnlike in other programming languages (e.g., Python), you can't search in strings using\nthe in operator.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Invalid derived return": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_derived_return",
        "title": "TypeError: derived class constructor returned invalid value x",
        "description": "The JavaScript exception \"derived class constructor returned invalid value x\" occurs when a derived class constructor returns a value that is not an object or undefined.\n\nTypically, a constructor does not need to return anything\u00e2\u0080\u0094the value of this is automatically returned when the class is constructed. A constructor can also return an object, and this object will override this as the newly constructed instance. However, returning something that's neither an object nor undefined is usually a mistake, because that value is ignored. In base classes and function constructors (using the function syntax), returning such a value is silently ignored, while in derived classes, it throws an error.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Cyclic object value": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cyclic_object_value",
        "title": "TypeError: cyclic object value",
        "description": "The JavaScript exception \"cyclic object value\" occurs when object references were found\nin JSON. JSON.stringify() doesn't try\nto solve them and fails accordingly.\n\nThe JSON format per se doesn't support object\nreferences (although an IETF draft exists),\nhence JSON.stringify() doesn't try to solve them and fails accordingly.\n\nIn a circular structure like the following:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Cyclic prototype": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cyclic_prototype",
        "title": "TypeError: can't set prototype: it would cause a prototype chain cycle",
        "description": "The JavaScript exception \"TypeError: can't set prototype: it would cause a prototype chain cycle\" occurs when an object's prototype is set to an object such that the prototype chain becomes circular (a and b both have each other in their prototype chains).\n\nA loop, also called a cycle, was introduced in a prototype chain. That means that when walking this prototype chain, the same place would be accessed over and over again, instead of eventually reaching null.\n\nThis error is thrown at the time of setting the prototype. In an operation like Object.setPrototypeOf(a, b), if a already exists in the prototype chain of b, this error will be thrown.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Array sort argument": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Array_sort_argument",
        "title": "TypeError: invalid Array.prototype.sort argument",
        "description": "The JavaScript exception \"invalid Array.prototype.sort argument\" occurs when the argument of Array.prototype.sort() (and its related methods: Array.prototype.toSorted(), TypedArray.prototype.sort(), TypedArray.prototype.toSorted()) isn't either undefined or a function which compares its operands.\n\nThe argument of Array.prototype.sort() (and its related methods: Array.prototype.toSorted(), TypedArray.prototype.sort(), TypedArray.prototype.toSorted()) is expected to be either undefined or a function which compares its operands.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Private double initialization": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Private_double_initialization",
        "title": "TypeError: Initializing an object twice is an error with private fields/methods",
        "description": "The JavaScript exception \"Initializing an object twice is an error with private fields/methods\" occurs when an object that was created via a class constructor goes through the class construction again, and the class contains a private property. This is usually caused by the return override trick.\n\nFor any object, if it already contains a private field or method, it would be an error to install the same field again. Private properties are installed on the value of this when the class constructor is called, so this error could happen if the this value is an already-constructed instance of this class.\n\nUsually, this in a constructor is a newly created object which doesn't have any preexisting properties. However, it can be overridden by the return value of the base class. If the base class returns another object, that object would replace the current object as the value of this:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Invalid const assignment": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_const_assignment",
        "title": "TypeError: invalid assignment to const \"x\"",
        "description": "The JavaScript exception \"invalid assignment to const\" occurs when it was attempted to\nalter a constant value. JavaScript\nconst\ndeclarations can't be re-assigned or redeclared.\n\nA constant is a value that cannot be altered by the program during normal execution. It\ncannot change through re-assignment, and it can't be redeclared. In JavaScript,\nconstants are declared using the\nconst\nkeyword.\n\nAssigning a value to the same constant name in the same block-scope will throw.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "invalid right hand side instanceof operand": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/invalid_right_hand_side_instanceof_operand",
        "title": "TypeError: invalid 'instanceof' operand 'x'",
        "description": "The JavaScript exception \"invalid 'instanceof' operand\" occurs when the right-hand side\noperands of the instanceof operator\nisn't used with a constructor object, i.e., an object which has a prototype property and is callable.\n\nThe instanceof operator expects\nthe right-hand-side operands to be a constructor object,\ni.e., an object which has a prototype property and is callable. It can also be an object with a Symbol.hasInstance method. This error can occur if:\n\nTo fix these errors, you will either need to replace\nthe instanceof operator\nwith the typeof operator,\nor to make sure you use the function name, instead of the result of its evaluation.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Private setter only": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Private_setter_only",
        "title": "TypeError: getting private setter-only property",
        "description": "The JavaScript exception \"getting private setter-only property\" occurs when reading the value of a private property for which only a setter is defined.\n\nThere is an attempt to get the value of a private property for which only a setter is specified. Unlike normal objects, where an undefined getter just means the property would always return undefined, for private properties, this is an error.\n\nHere, #name has no getter, so trying to read it using this.#name will throw an error.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "No properties": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/No_properties",
        "title": "TypeError: null/undefined has no properties",
        "description": "The JavaScript exception \"null (or undefined) has no properties\" occurs when you\nattempt to access properties of null and undefined. They\ndon't have any.\n\nTypeError.\n\nBoth null and undefined have no properties you could access. Therefore, you cannot use property accessors on them, or destructure them.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Constructor cant be used directly": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Constructor_cant_be_used_directly",
        "title": "TypeError: Iterator/AsyncIterator constructor can't be used directly",
        "description": "The JavaScript exception \"Iterator constructor can't be used directly\" or \"AsyncIterator constructor can't be used directly\" occurs when you try to use the Iterator() or AsyncIterator() constructors directly to create instances. These constructors are abstract classes and should only be inherited from.\n\nThe Iterator and AsyncIterator constructors are abstract classes and should not be used directly. They check the value of new.target and throw if it is the same as the constructor itself. The only way to use these constructors is to inherit from them in a subclass and call super() in the subclass constructor. The subclass must also define a next() method to be useful.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Cant delete": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cant_delete",
        "title": "TypeError: property \"x\" is non-configurable and can't be deleted",
        "description": "The JavaScript exception \"property is non-configurable and can't be deleted\" occurs\nwhen it was attempted to delete a property, but that property is non-configurable.\n\nTypeError in strict mode only.\n\nIt was attempted to delete a property, but that property is non-configurable. The\nconfigurable attribute controls whether the property can be deleted from\nthe object and whether its attributes (other than writable) can be changed.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "More arguments needed": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/More_arguments_needed",
        "title": "TypeError: More arguments needed",
        "description": "The JavaScript exception \"more arguments needed\" occurs when there is an error with how\na function is called. More arguments need to be provided.\n\nTypeError.\n\nThere is an error with how a function is called. More arguments need to be provided.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Requires global RegExp": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Requires_global_RegExp",
        "title": "TypeError: matchAll/replaceAll must be called with a global RegExp",
        "description": "The JavaScript exception \"TypeError: matchAll/replaceAll must be called with a global RegExp\" occurs when the String.prototype.matchAll() or String.prototype.replaceAll() method is used with a RegExp object that does not have the global flag set.\n\nThe String.prototype.matchAll() and String.prototype.replaceAll() methods require a RegExp object with the global flag set. This flag indicates that the regular expression can match all locations of the input string, instead of stopping at the first match. Although the g flag is redundant when using these methods (because these methods always do a global replacement), they are still required to make the intention clear.\n\nIt's worth noting that the g flag validation is done in the matchAll and replaceAll methods. If you use the [Symbol.matchAll]() method of RegExp instead, you won't get this error, but there will only be a single match.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Key not weakly held": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Key_not_weakly_held",
        "title": "TypeError: WeakSet key/WeakMap value 'x' must be an object or an unregistered symbol",
        "description": "The JavaScript exception \"WeakSet key (or WeakMap value) 'x' must be an object or an unregistered symbol\" occurs when an value of invalid type is used as a key in a WeakSet or as a value in a WeakMap.\n\nWeakSet and WeakMap require the keys to be garbage collectable. Only objects and non-registered symbols (that is, symbols not returned by Symbol.for()) are valid. For more information, see Memory management. If you want to add keys that are strings, numbers, or other primitive values, you should store them in a regular Set or Map instead.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Reduce of empty array with no initial value": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Reduce_of_empty_array_with_no_initial_value",
        "title": "TypeError: Reduce of empty array with no initial value",
        "description": "The JavaScript exception \"reduce of empty array with no initial value\" occurs when a\nreduce function is used.\n\nIn JavaScript, there are several reduce functions:\n\nThese functions optionally take an initialValue (which will be used as the\nfirst argument to the first call of the callback). However, if no initial\nvalue is provided, it will use the first element of the Array or\nTypedArray as the initial value. This error is raised when an empty array\nis provided because no initial value can be returned in that case.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Getter only": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Getter_only",
        "title": "TypeError: setting getter-only property \"x\"",
        "description": "The JavaScript strict mode-only exception \"setting getter-only property\" occurs when there is an attempt to set a new value to a property for which only a getter is specified, or when setting a private property that similarly only has a getter defined.\n\nTypeError in strict mode only.\n\nThere is an attempt to set a new value to a property for which only a getter is specified.\nWhile this will be silently ignored in non-strict mode, it will throw a\nTypeError in strict mode. Classes are always in strict mode, so assigning to a getter-only private property always throws this error.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Malformed URI": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Malformed_URI",
        "title": "URIError: malformed URI sequence",
        "description": "The JavaScript exception \"malformed URI sequence\" occurs when URI encoding or decoding\nwasn't successful.\n\nURI encoding or decoding wasn't successful. An argument given to either the\ndecodeURI, encodeURI, encodeURIComponent, or\ndecodeURIComponent function was not valid, so that the function was unable\nencode or decode properly.\n\nEncoding replaces each instance of certain characters by one, two, three, or four\nescape sequences representing the UTF-8 encoding of the character. An\nURIError will be thrown if there is an attempt to encode a surrogate which\nis not part of a high-low pair, for example:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Called on incompatible type": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Called_on_incompatible_type",
        "title": "TypeError: X.prototype.y called on incompatible type",
        "description": "The JavaScript exception \"called on incompatible target (or object)\" occurs when a\nfunction (on a given object), is called with a this not corresponding to\nthe type expected by the function.\n\nWhen this error is thrown, a function (on a given object), is called with a\nthis not corresponding to the type expected by the function.\n\nThis issue can arise when using the Function.prototype.call() or\nFunction.prototype.apply() methods, and providing a this\nargument which does not have the expected type.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Stmt after return": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Stmt_after_return",
        "title": "Warning: unreachable code after return statement",
        "description": "The JavaScript warning \"unreachable code after return statement\" occurs when using an\nexpression after a return statement, or when using a\nsemicolon-less return statement but including an expression directly after.\n\nWarning\n\nUnreachable code after a return statement might occur in these situations:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Already has pragma": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Already_has_pragma",
        "title": "Warning: -file- is being assigned a //# sourceMappingURL, but already has one",
        "description": "The JavaScript warning \"-file- is being assigned a //# sourceMappingURL, but already has one.\" occurs when a source map has been specified more than once for a given JavaScript source.\n\nA warning. JavaScript execution won't be halted.\n\nA source map has been specified more than once for a given JavaScript source.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      }
    },
    "JavaScript technologies overview": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/JavaScript_technologies_overview",
      "title": "JavaScript technologies overview",
      "description": "Whereas HTML defines a webpage's structure and content and CSS sets the formatting and appearance, JavaScript adds interactivity to a webpage and creates rich web applications.\n\nHowever, the umbrella term \"JavaScript\" as understood in a web browser context contains several very different elements. One of them is the core language (ECMAScript), another is the collection of the Web APIs, including the DOM (Document Object Model).\n\nThe core language of JavaScript is standardized by the ECMA TC39 committee as a language named ECMAScript. \"ECMAScript\" is the term for the language standard, but \"ECMAScript\" and \"JavaScript\" can be used interchangeably.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Execution model": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Execution_model",
      "title": "JavaScript execution model",
      "description": "This page introduces the basic infrastructure of the JavaScript runtime environment. The model is largely theoretical and abstract, without any platform-specific or implementation-specific details. Modern JavaScript engines heavily optimize the described semantics.\n\nThis page is a reference. It assumes you are already familiar with the execution model of other programming languages, such as C and Java. It makes heavy references to existing concepts in operating systems and programming languages.\n\nJavaScript execution requires the cooperation of two pieces of software: the JavaScript engine and the host environment.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Lexical grammar": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar",
      "title": "Lexical grammar",
      "description": "This page describes JavaScript's lexical grammar. JavaScript source text is just a sequence of characters \u00e2\u0080\u0094 in order for the interpreter to understand it, the string has to be parsed to a more structured representation. The initial step of parsing is called lexical analysis, in which the text gets scanned from left to right and is converted into a sequence of individual, atomic input elements. Some input elements are insignificant to the interpreter, and will be stripped after this step \u00e2\u0080\u0094 they include white space and comments. The others, including identifiers, keywords, literals, and punctuators (mostly operators), will be used for further syntax analysis. Line terminators and multiline comments are also syntactically insignificant, but they guide the process for automatic semicolons insertion to make certain invalid token sequences become valid.\n\nFormat-control characters have no visual representation but are used to control the interpretation of the text.\n\nIn JavaScript source text, <ZWNJ> and <ZWJ> are treated as identifier parts, while <BOM> (also called a zero-width no-break space <ZWNBSP> when not at the start of text) is treated as white space.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Iteration protocols": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols",
      "title": "Iteration protocols",
      "description": "Iteration protocols aren't new built-ins or syntax, but protocols. These protocols can be implemented by any object by following some conventions.\n\nThere are two protocols: The iterable protocol and the iterator protocol.\n\nThe iterable protocol allows JavaScript objects to define or customize their iteration behavior, such as what values are looped over in a for...of construct. Some built-in types are built-in iterables with a default iteration behavior, such as Array or Map, while other types (such as Object) are not.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Strict mode": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode",
      "title": "Strict mode",
      "description": "Note:\nSometimes you'll see the default, non-strict mode referred to as sloppy mode. This isn't an official term, but be aware of it, just in case.\n\nJavaScript's strict mode is a way to opt in to a restricted variant of JavaScript, thereby implicitly opting-out of \"sloppy mode\". Strict mode isn't just a subset: it intentionally has different semantics from normal code. Strict mode code and non-strict mode code can coexist, so scripts can opt into strict mode incrementally.\n\nStrict mode makes several changes to normal JavaScript semantics:",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Deprecated and obsolete features": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features",
      "title": "Deprecated and obsolete features",
      "description": "This page lists features of JavaScript that are deprecated (that is, still available but planned for removal) and obsolete (that is, no longer usable).\n\nThese deprecated features can still be used, but should be used with caution because they are not required to be implemented by every JavaScript engine. You should work to remove their use from your code.\n\nSome of these deprecated features are listed in the Annex B section of the ECMAScript specification. This section is described as normative optional \u00e2\u0080\u0094 that is, web browser hosts must implement these features, while non-web hosts may not. These features are likely stable because removing them will cause backward compatibility issues and break legacy websites. (JavaScript has the design goal of \"don't break the web\".) Still, they are not cross-platform portable and may not be supported by all analysis tools, so you are advised to not use them, as the introduction of Annex B states:",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Template literals": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals",
      "title": "Template literals (Template strings)",
      "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2015.\n\nTemplate literals are literals delimited with backtick (`) characters, allowing for multi-line strings, string interpolation with embedded expressions, and special constructs called tagged templates.\n\nTemplate literals are sometimes informally called template strings, because they are used most commonly for string interpolation (to create strings by doing substitution of placeholders). However, a tagged template literal may not result in a string; it can be used with a custom tag function to perform whatever operations you want on the different parts of the template literal.",
      "syntax": [],
      "parameters": [
        {
          "name": "string text",
          "description": "The string text that will become part of the template literal. Almost all characters are allowed literally, including line breaks and other whitespace characters. However, invalid escape sequences will cause a syntax error, unless a tag function is used."
        },
        {
          "name": "expression",
          "description": "An expression to be inserted in the current position, whose value is converted to a string or passed to tagFunction."
        },
        {
          "name": "tagFunction",
          "description": "If specified, it will be called with the template strings array and substitution expressions, and the return value becomes the value of the template literal. See tagged templates."
        }
      ],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Trailing commas": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Trailing_commas",
      "title": "Trailing commas",
      "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nTrailing commas (sometimes called \"final commas\") can be useful when adding new elements, parameters, or properties to JavaScript code. If you want to add a new property, you can add a new line without modifying the previously last line if that line already uses a trailing comma. This makes version-control diffs cleaner and editing code might be less troublesome.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    }
  },
  "contributors.txt": {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/contributors.txt",
    "title": "",
    "description": "",
    "syntax": [],
    "parameters": [],
    "return_value": "",
    "examples": [],
    "browser_compatibility": {},
    "see_also": [],
    "inheritance": [],
    "properties": [],
    "methods": [],
    "children": []
  }
}
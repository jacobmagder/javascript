{
  "Guide": {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide",
    "title": "JavaScript Guide",
    "description": "The JavaScript Guide shows you how to use JavaScript and gives an overview of the language. If you need exhaustive information about a language feature, have a look at the JavaScript reference.\n\nThis Guide is divided into the following chapters.\n\nOverview: Introduction",
    "syntax": [],
    "parameters": [],
    "return_value": "",
    "examples": [],
    "browser_compatibility": {},
    "see_also": [],
    "inheritance": [],
    "properties": [],
    "methods": [],
    "children": [],
    "Grammar and types": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#using_special_characters_in_strings",
      "title": "Grammar and types",
      "description": "This chapter discusses JavaScript's basic grammar, variable declarations, data types and literals.\n\nJavaScript borrows most of its syntax from Java, C, and C++, but it has also been influenced by Awk, Perl, and Python.\n\nJavaScript is case-sensitive and uses the Unicode character set. For example, the word Fr\u00c3\u00bch (which means \"early\" in German) could be used as a variable name.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Introduction": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Introduction#javascript_and_java",
      "title": "Introduction",
      "description": "This chapter introduces JavaScript and discusses some of its fundamental concepts.\n\nThis guide assumes you have the following basic background:\n\nThe JavaScript documentation on MDN includes the following:",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Control flow and error handling": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling#block_statement",
      "title": "Control flow and error handling",
      "description": "JavaScript supports a compact set of statements, specifically\ncontrol flow statements, that you can use to incorporate a great deal of interactivity\nin your application. This chapter provides an overview of these statements.\n\nThe JavaScript reference\ncontains exhaustive details about the statements in this chapter. The semicolon\n(;) character is used to separate statements in JavaScript code.\n\nAny JavaScript expression is also a statement.\nSee Expressions and operators\nfor complete information about expressions.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Expressions and operators": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_operators#unary_operators",
      "title": "Expressions and operators",
      "description": "This chapter describes JavaScript's expressions and operators, including assignment, comparison, arithmetic, bitwise, logical, string, ternary and more.\n\nAt a high level, an expression is a valid unit of code that resolves to a value. There are two types of expressions: those that have side effects (such as assigning values) and those that purely evaluate.\n\nThe expression x = 7 is an example of the first type. This expression uses the = operator to assign the value seven to the variable x. The expression itself evaluates to 7.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Loops and iteration": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration#for...in_statement",
      "title": "Loops and iteration",
      "description": "Loops offer a quick and easy way to do something repeatedly. This\nchapter of the JavaScript Guide\nintroduces the different iteration statements available to JavaScript.\n\nYou can think of a loop as a computerized version of the game where you tell someone to\ntake X steps in one direction, then Y steps in another. For example,\nthe idea \"Go five steps to the east\" could be expressed this way as a loop:\n\nThere are many different kinds of loops, but they all essentially do the same thing:\nthey repeat an action some number of times. (Note that it's possible that number could\nbe zero!)",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Numbers and strings": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Numbers_and_strings#math_object",
      "title": "Numbers and strings",
      "description": "This chapter introduces the two most fundamental data types in JavaScript: numbers and strings. We will introduce their underlying representations, and functions used to work with and perform calculations on them.\n\nIn JavaScript, numbers are implemented in double-precision 64-bit binary format IEEE 754 (i.e., a number between \u00c2\u00b12^\u00e2\u0088\u00921022 and \u00c2\u00b12^+1023, or about \u00c2\u00b110^\u00e2\u0088\u0092308 to \u00c2\u00b110^+308, with a numeric precision of 53 bits). Integer values up to \u00c2\u00b12^53 \u00e2\u0088\u0092 1 can be represented exactly.\n\nIn addition to being able to represent floating-point numbers, the number type has three symbolic values: Infinity, -Infinity, and NaN (not-a-number).",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Functions": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions#recursion",
      "title": "Functions",
      "description": "Functions are one of the fundamental building blocks in JavaScript. A function in JavaScript is similar to a procedure\u00e2\u0080\u0094a set of statements that performs a task or calculates a value, but for a procedure to qualify as a function, it should take some input and return an output where there is some obvious relationship between the input and the output. To use a function, you must define it somewhere in the scope from which you wish to call it.\n\nSee also the exhaustive reference chapter about JavaScript functions to get to know the details.\n\nA function definition (also called a function declaration, or function statement) consists of the function keyword, followed by:",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Keyed collections": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Keyed_collections#Set_object",
      "title": "Keyed collections",
      "description": "This chapter introduces collections of data which are indexed by a key; Map and Set objects contain elements which are iterable in the order of insertion.\n\nA Map object is a key/value map that can iterate its elements in insertion order.\n\nThe following code shows some basic operations with a Map. See also the Map reference page for more examples and the complete API. You can use a for...of loop to return an array of [key, value] for each iteration.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Regular expressions": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions#advanced_searching_with_flags",
      "title": "Regular expressions",
      "description": "Regular expressions are patterns used to match character combinations in strings.\nIn JavaScript, regular expressions are also objects. These patterns are used with the exec() and test() methods of RegExp, and with the match(), matchAll(), replace(), replaceAll(), search(), and split() methods of String.\nThis chapter describes JavaScript regular expressions. It provides a brief overview of each syntax element. For a detailed explanation of each one's semantics, read the regular expressions reference.\n\nYou construct a regular expression in one of two ways:\n\nUsing a regular expression literal, which consists of a pattern enclosed between slashes, as follows:",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": [],
      "Character classes": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Character_classes#looking_for_a_word_from_unicode_characters",
        "title": "Character classes",
        "description": "Character classes distinguish kinds of characters such as, for example, distinguishing between letters and digits.\n\nCharacter class:\n          Matches any one of the enclosed characters. You can\n          specify a range of characters by using a hyphen, but if the hyphen\n          appears as the first or last character enclosed in the square brackets,\n          it is taken as a literal hyphen to be included in the character class\n          as a normal character.\n\nFor example, [abcd] is the same as [a-d].\n          They match the \"b\" in \"brisket\", and the \"c\" in \"chop\".",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      }
    },
    "Representing dates times": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Representing_dates_times#date_object",
      "title": "Representing dates & times",
      "description": "Note:\nThe Date object is now considered legacy and should be avoided in new code. We will update this page with modern alternatives soon.\n\nJavaScript does not have a date data type. However, you can use the Date object and its methods to work with dates and times in your applications. The Date object has a large number of methods for setting, getting, and manipulating dates. It does not have any properties.\n\nJavaScript handles dates similarly to Java. The two languages have many of the same date methods, and both languages store dates as the number of milliseconds since midnight at the beginning of January 1, 1970, UTC, with a Unix Timestamp being the number of seconds since the same instant. The instant at the midnight at the beginning of January 1, 1970, UTC is called the epoch.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Working with objects": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_objects#Objects_and_properties",
      "title": "Working with objects",
      "description": "JavaScript is designed on an object-based paradigm. An object is a collection of properties, and a property is an association between a name (or key) and a value. A property's value can be a function, in which case the property is known as a method.\n\nObjects in JavaScript, just as in many other programming languages, can be compared to objects in real life. In JavaScript, an object is a standalone entity, with properties and type. Compare it with a cup, for example. A cup is an object, with properties. A cup has a color, a design, weight, a material it is made of, etc. The same way, JavaScript objects can have properties, which define their characteristics.\n\nIn addition to objects that are predefined in the browser, you can define your own objects. This chapter describes how to use objects, properties, and methods, and how to create your own objects.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Indexed collections": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#array_methods",
      "title": "Indexed collections",
      "description": "This chapter introduces collections of data which are ordered by an index value. This includes arrays and array-like constructs such as Array objects and TypedArray objects.\n\nAn array is an ordered list of values that you refer to with a name and an index.\n\nFor example, consider an array called emp, which contains employees' names indexed by their numerical employee number. So emp[0] would be employee number zero, emp[1] employee number one, and so on.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Typed arrays": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Typed_arrays",
      "title": "JavaScript typed arrays",
      "description": "JavaScript typed arrays are array-like objects that provide a mechanism for reading and writing raw binary data in memory buffers.\n\nTyped arrays are not intended to replace arrays for any kind of functionality. Instead, they provide developers with a familiar interface for manipulating binary data. This is useful when interacting with platform features, such as audio and video manipulation, access to raw data using WebSockets, and so forth. Each entry in a JavaScript typed array is a raw binary value in one of a number of supported formats, from 8-bit integers to 64-bit floating-point numbers.\n\nTyped array objects share many of the same methods as arrays with similar semantics. However, typed arrays are not to be confused with normal arrays, as calling Array.isArray() on a typed array returns false. Moreover, not all methods available for normal arrays are supported by typed arrays (e.g., push and pop).",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Iterators and generators": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_generators#Iterators",
      "title": "Iterators and generators",
      "description": "Iterators and Generators bring the concept of iteration directly into the core language and provide a mechanism for customizing the behavior of for...of loops.\n\nFor details, see also:\n\nIn JavaScript an iterator is an object which defines a sequence and potentially a return value upon its termination.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Internationalization": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Internationalization#number_formatting",
      "title": "Internationalization",
      "description": "The Intl object is the namespace for the ECMAScript Internationalization API, which provides a wide range of locale- and culture-sensitive data and operations.\n\nThe Intl object is very use-case driven. It provides a separate object for each use case that requires locale-specific logic. Currently, it provides the following functionalities:\n\nMost Intl APIs share a similar design (Intl.Locale is the only exception). You start by constructing an instance with the desired locale and options. This defines a set of rules for the desired operation (formatting, collation, segmentation, etc.). Then, when you call the method on the instance, such as format(), compare(), or segment(), the object applies the specified rule to the passed data.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Using classes": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_classes#private_fields",
      "title": "Using classes",
      "description": "JavaScript is a prototype-based language \u00e2\u0080\u0094 an object's behaviors are specified by its own properties and its prototype's properties. However, with the addition of classes, the creation of hierarchies of objects and the inheritance of properties and their values are much more in line with other object-oriented languages such as Java. In this section, we will demonstrate how objects can be created from classes.\n\nIn many other languages, classes, or constructors, are clearly distinguished from objects, or instances. In JavaScript, classes are mainly an abstraction over the existing prototypical inheritance mechanism \u00e2\u0080\u0094 all patterns are convertible to prototype-based inheritance. Classes themselves are normal JavaScript values as well, and have their own prototype chains. In fact, most plain JavaScript functions can be used as constructors \u00e2\u0080\u0094 you use the new operator with a constructor function to create a new object.\n\nWe will be playing with the well-abstracted class model in this tutorial, and discuss what semantics classes offer. If you want to dive deep into the underlying prototype system, you can read the Inheritance and the prototype chain guide.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Using promises": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises#timing",
      "title": "Using promises",
      "description": "A Promise is an object representing the eventual completion or failure of an asynchronous operation. Since most people are consumers of already-created promises, this guide will explain consumption of returned promises before explaining how to create them.\n\nEssentially, a promise is a returned object to which you attach callbacks, instead of passing callbacks into a function. Imagine a function, createAudioFileAsync(), which asynchronously generates a sound file given a configuration record and two callback functions: one called if the audio file is successfully created, and the other called if an error occurs.\n\nHere's some code that uses createAudioFileAsync():",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Enumerability and ownership of properties": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Enumerability_and_ownership_of_properties#traversing_object_properties",
      "title": "Enumerability and ownership of properties",
      "description": "Every property in JavaScript objects can be classified by three factors:\n\nEnumerable properties are those properties whose internal enumerable flag is set to true, which is the default for properties created via simple assignment or via a property initializer. Properties defined via Object.defineProperty and such are not enumerable by default. Most iteration means (such as for...in loops and Object.keys) only visit enumerable keys.\n\nOwnership of properties is determined by whether the property belongs to the object directly and not to its prototype chain.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Modules": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules#cyclic_imports",
      "title": "JavaScript modules",
      "description": "This guide gives you all you need to get started with JavaScript module syntax.\n\nJavaScript programs started off pretty small \u00e2\u0080\u0094 most of its usage in the early days was to do isolated scripting tasks, providing a bit of interactivity to your web pages where needed, so large scripts were generally not needed. Fast forward a few years and we now have complete applications being run in browsers with a lot of JavaScript, as well as JavaScript being used in other contexts (Node.js, for example).\n\nComplex projects necessitate a mechanism for splitting JavaScript programs into separate modules that can be imported when needed. Node.js has had this ability for a long time, and there are a number of JavaScript libraries and frameworks that enable module usage (for example, other CommonJS and AMD-based module systems like RequireJS, webpack, and Babel).",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Data structures": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Data_structures#primitive_values",
      "title": "JavaScript data types and data structures",
      "description": "Programming languages all have built-in data structures, but these often differ from one language to another. This article attempts to list the built-in data structures available in JavaScript and what properties they have. These can be used to build other data structures.\n\nThe language overview offers a similar summary of the common data types, but with more comparisons to other languages.\n\nJavaScript is a dynamic language with dynamic types. Variables in JavaScript are not directly associated with any particular value type, and any variable can be assigned (and re-assigned) values of all types:",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Equality comparisons and sameness": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Equality_comparisons_and_sameness#loose_equality_using",
      "title": "Equality comparisons and sameness",
      "description": "JavaScript provides three different value-comparison operations:\n\nWhich operation you choose depends on what sort of comparison you are looking to perform. Briefly:\n\nThey correspond to three of four equality algorithms in JavaScript:",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Language overview": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Language_overview",
      "title": "JavaScript language overview",
      "description": "JavaScript is a multi-paradigm, dynamic language with types and operators, standard built-in objects, and methods. Its syntax is based on the Java and C languages \u00e2\u0080\u0094 many structures from those languages apply to JavaScript as well. JavaScript supports object-oriented programming with object prototypes and classes. It also supports functional programming since functions are first-class objects that can be easily created via expressions and passed around like any other object.\n\nThis page serves as a quick overview of various JavaScript language features, written for readers with background in other languages, such as C or Java.\n\nLet's start off by looking at the building blocks of any language: the types. JavaScript programs manipulate values, and those values all belong to a type. JavaScript offers seven primitive types:",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Inheritance and the prototype chain": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain",
      "title": "Inheritance and the prototype chain",
      "description": "In programming, inheritance refers to passing down characteristics from a parent to a child so that a new piece of code can reuse and build upon the features of an existing one. JavaScript implements inheritance by using objects. Each object has an internal link to another object called its prototype. That prototype object has a prototype of its own, and so on until an object is reached with null as its prototype. By definition, null has no prototype and acts as the final link in this prototype chain. It is possible to mutate any member of the prototype chain or even swap out the prototype at runtime, so concepts like static dispatching do not exist in JavaScript.\n\nJavaScript is a bit confusing for developers experienced in class-based languages (like Java or C++), as it is dynamic and does not have static types. While this confusion is often considered to be one of JavaScript's weaknesses, the prototypal inheritance model itself is, in fact, more powerful than the classic model. It is, for example, fairly trivial to build a classic model on top of a prototypal model \u00e2\u0080\u0094 which is how classes are implemented.\n\nAlthough classes are now widely adopted and have become a new paradigm in JavaScript, classes do not bring a new inheritance pattern. While classes abstract most of the prototypal mechanism away, understanding how prototypes work under the hood is still useful.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Closures": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Closures#emulating_private_methods_with_closures",
      "title": "Closures",
      "description": "A closure is the combination of a function bundled together (enclosed) with references to its surrounding state (the lexical environment). In other words, a closure gives a function access to its outer scope. In JavaScript, closures are created every time a function is created, at function creation time.\n\nConsider the following example code:\n\ninit() creates a local variable called name and a function called displayName(). The displayName() function is an inner function that is defined inside init() and is available only within the body of the init() function. Note that the displayName() function has no local variables of its own. However, since inner functions have access to the variables of outer scopes, displayName() can access the variable name declared in the parent function, init().",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Meta programming": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Meta_programming#Reflection",
      "title": "Meta programming",
      "description": "The Proxy and Reflect objects allow you to intercept and define custom behavior for fundamental language operations (e.g., property lookup, assignment, enumeration, function invocation, etc.). With the help of these two objects you are able to program at the meta level of JavaScript.\n\nProxy objects allow you to intercept certain operations and to implement custom behaviors.\n\nFor example, getting a property on an object:",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Memory management": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Memory_management#weakmaps_and_weaksets",
      "title": "Memory management",
      "description": "Low-level languages like C, have manual memory management primitives such as malloc() and free(). In contrast, JavaScript automatically allocates memory when objects are created and frees it when they are not used anymore (garbage collection). This automaticity is a potential source of confusion: it can give developers the false impression that they don't need to worry about memory management.\n\nRegardless of the programming language, the memory life cycle is pretty much always the same:\n\nThe second part is explicit in all languages. The first and last parts are explicit in low-level languages but are mostly implicit in high-level languages like JavaScript.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    }
  },
  "Reference": {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference",
    "title": "JavaScript reference",
    "description": "The JavaScript reference serves as a repository of facts about the JavaScript language. The entire language is described here in detail. As you write JavaScript code, you'll refer to these pages often (thus the title \"JavaScript reference\").\n\nThe JavaScript language is intended to be used within some larger environment, be it a browser, server-side scripts, or similar. For the most part, this reference attempts to be environment-agnostic and does not target a web browser environment.\n\nIf you are new to JavaScript, start with the guide. Once you have a firm grasp of the fundamentals, you can use the reference to get more details on individual objects and language constructs.",
    "syntax": [],
    "parameters": [],
    "return_value": "",
    "examples": [],
    "browser_compatibility": {},
    "see_also": [],
    "inheritance": [],
    "properties": [],
    "methods": [],
    "children": [],
    "Statements": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements#difference_between_statements_and_declarations",
      "title": "Statements and declarations",
      "description": "JavaScript applications consist of statements with an appropriate syntax. A single statement may span multiple lines. Multiple statements may occur on a single line if each statement is separated by a semicolon. This isn't a keyword, but a group of keywords.\n\nFor an alphabetical listing see the sidebar on the left.\n\nSpecifies the value to be returned by a function.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": [],
      "for...in": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in#array_iteration_and_for...in",
        "title": "for...in",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe for...in statement iterates over all enumerable string properties of an object (ignoring properties keyed by symbols), including inherited enumerable properties.\n\nReceives a string property name on each iteration. May be either a declaration with const, let, or var, or an assignment target (e.g., a previously declared variable, an object property, or a destructuring pattern). Variables declared with var are not local to the loop, i.e., they are in the same scope the for...in loop is in.",
        "syntax": [],
        "parameters": [
          {
            "name": "variable",
            "description": "Receives a string property name on each iteration. May be either a declaration with const, let, or var, or an assignment target (e.g., a previously declared variable, an object property, or a destructuring pattern). Variables declared with var are not local to the loop, i.e., they are in the same scope the for...in loop is in."
          },
          {
            "name": "object",
            "description": "Object whose non-symbol enumerable properties are iterated over."
          },
          {
            "name": "statement",
            "description": "A statement to be executed on every iteration. May reference variable. You can use a block statement to execute multiple statements."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "var": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var#hoisting",
        "title": "var",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe var statement declares function-scoped or globally-scoped variables, optionally initializing each to a value.\n\nThe name of the variable to declare. Each must be a legal JavaScript identifier or a destructuring binding pattern.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "export": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#re-exporting_aggregating",
        "title": "export",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since May 2018.\n\nThe export declaration is used to export values from a JavaScript module. Exported values can then be imported into other programs with the import declaration or dynamic import. The value of an imported binding is subject to change in the module that exports it \u00e2\u0080\u0094 when a module updates the value of a binding that it exports, the update will be visible in its imported value.\n\nIn order to use the export declaration in a source file, the file must be interpreted by the runtime as a module. In HTML, this is done by adding type=\"module\" to the <script> tag, or by being imported by another module. Modules are automatically interpreted in strict mode.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "import": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import#named_import",
        "title": "import",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since May 2018.\n\n* Some parts of this feature may have varying levels of support.\n\nThe static import declaration is used to import read-only live bindings which are exported by another module. The imported bindings are called live bindings because they are updated by the module that exported the binding, but cannot be re-assigned by the importing module.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      }
    },
    "Functions": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions",
      "title": "Functions",
      "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nGenerally speaking, a function is a \"subprogram\" that can be called by code external (or internal, in the case of recursion) to the function. Like the program itself, a function is composed of a sequence of statements called the function body. Values can be passed to a function as parameters, and the function will return a value.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": [],
      "Default parameters": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters#destructured_parameter_with_default_value_assignment",
        "title": "Default parameters",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nDefault function parameters allow named parameters to be initialized with default values if no value or undefined is passed.\n\nIn JavaScript, function parameters default to undefined. However, it's often useful to set a different default value. This is where default parameters can help.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "rest parameters": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters",
        "title": "Rest parameters",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nThe rest parameter syntax allows a function to accept an indefinite number of arguments as an array, providing a way to represent variadic functions in JavaScript.\n\nThere are some additional syntax restrictions:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "get": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get",
        "title": "get",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe get syntax binds an object property to a function that will be called when that property is looked up. It can also be used in classes.\n\nThere are some additional syntax restrictions:",
        "syntax": [],
        "parameters": [
          {
            "name": "prop",
            "description": "The name of the property to bind to the given function. In the same way as other properties in object initializers, it can be a string literal, a number literal, or an identifier."
          },
          {
            "name": "expression",
            "description": "You can also use expressions for a computed property name to bind to the given function."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Method definitions": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Method_definitions",
        "title": "Method definitions",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2015.\n\nMethod definition is a shorter syntax for defining a function property in an object initializer. It can also be used in classes.\n\nThe shorthand syntax is similar to the getter and setter syntax.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Arrow functions": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions#cannot_be_used_as_methods",
        "title": "Arrow function expressions",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nAn arrow function expression is a compact alternative to a traditional function expression, with some semantic differences and deliberate limitations in usage:\n\nRest parameters, default parameters, and destructuring within params are supported, and always require parentheses:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "set": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set",
        "title": "set",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe set syntax binds an object property to a function to be called when there is an attempt to set that property. It can also be used in classes.\n\nThere are some additional syntax restrictions:",
        "syntax": [],
        "parameters": [
          {
            "name": "prop",
            "description": "The name of the property to bind to the given function. In the same way as other properties in object initializers, it can be a string literal, a number literal, or an identifier."
          },
          {
            "name": "val",
            "description": "An alias for the variable that holds the value attempted to be assigned to\nprop."
          },
          {
            "name": "expression",
            "description": "You can also use expressions for a computed property name to bind to the given function."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "arguments": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments#assigning_to_indices",
        "title": "The arguments object",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\narguments is an array-like object accessible inside functions that contains the values of the arguments passed to that function.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      }
    },
    "Classes": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes#static_methods_and_fields",
      "title": "Classes",
      "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since March 2016.\n\n* Some parts of this feature may have varying levels of support.\n\nClasses are a template for creating objects. They encapsulate data with code to work on that data. Classes in JS are built on prototypes but also have some syntax and semantics that are unique to classes.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": [],
      "Private properties": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_properties#returning_overriding_object",
        "title": "Private properties",
        "description": "Private properties are counterparts of the regular class properties which are public, including class fields, class methods, etc. Private properties get created by using a hash # prefix and cannot be legally referenced outside of the class. The privacy encapsulation of these class properties is enforced by JavaScript itself. The only way to access a private property is via dot notation, and you can only do so within the class that defines the private property.\n\nPrivate properties were not native to the language before this syntax existed. In prototypal inheritance, its behavior may be emulated with WeakMap objects or closures, but they can't compare to the # syntax in terms of ergonomics.\n\nThere are some additional syntax restrictions:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      }
    },
    "Global Objects": {
      "AggregateError": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AggregateError",
        "title": "AggregateError",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2020.\n\n* Some parts of this feature may have varying levels of support.\n\nThe AggregateError object represents an error when several errors need to be wrapped in a single error. It is thrown when multiple errors need to be reported by an operation, for example by Promise.any(), when all promises passed to it reject.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": [],
        "AggregateError": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AggregateError/AggregateError",
          "title": "AggregateError() constructor",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2020.\n\nThe AggregateError() constructor creates AggregateError objects.\n\nNote: AggregateError() can be called with or without new. Both create a new AggregateError instance.",
          "syntax": [],
          "parameters": [
            {
              "name": "errors",
              "description": "An iterable of errors, may not actually be Error instances."
            },
            {
              "name": "message Optional",
              "description": "An optional human-readable description of the aggregate error."
            },
            {
              "name": "options Optional",
              "description": "An object that has the following properties:\n\ncause Optional\n\nA property indicating the specific cause of the error.\nWhen catching and re-throwing an error with a more-specific or useful error message, this property can be used to pass the original error."
            },
            {
              "name": "cause Optional",
              "description": "A property indicating the specific cause of the error.\nWhen catching and re-throwing an error with a more-specific or useful error message, this property can be used to pass the original error."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "errors": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AggregateError/errors",
          "title": "AggregateError: errors",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2020.\n\nThe errors data property of an AggregateError instance contains an array representing the errors that were aggregated.\n\nAn Array containing values in the same order as the iterable passed as the first argument of the AggregateError() constructor.",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        }
      },
      "AsyncGenerator": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator",
        "title": "AsyncGenerator",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since January 2020.\n\nThe AsyncGenerator object is returned by an async generator function and it conforms to both the async iterable protocol and the async iterator protocol.\n\nAsync generator methods always yield Promise objects.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": [],
        "return": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator/return",
          "title": "AsyncGenerator.prototype.return()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since January 2020.\n\nThe return() method of AsyncGenerator instances acts as if a return statement is inserted in the generator's body at the current suspended position, which finishes the generator and allows the generator to perform any cleanup tasks when combined with a try...finally block.\n\nThe value to return.",
          "syntax": [],
          "parameters": [
            {
              "name": "value Optional",
              "description": "The value to return."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "throw": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator/throw",
          "title": "AsyncGenerator.prototype.throw()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since January 2020.\n\nThe throw() method of AsyncGenerator instances acts as if a throw statement is inserted in the generator's body at the current suspended position, which informs the generator of an error condition and allows it to handle the error, or perform cleanup and close itself.\n\nThe exception to throw. For debugging purposes, it is useful to make it an instanceof Error.",
          "syntax": [],
          "parameters": [
            {
              "name": "exception",
              "description": "The exception to throw. For debugging purposes, it is useful to make it an instanceof Error."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "next": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator/next",
          "title": "AsyncGenerator.prototype.next()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since January 2020.\n\nThe next() method of AsyncGenerator instances returns the next value in the sequence.\n\nAn optional value used to modify the internal state of the generator. A value passed to the next() method will be received by yield",
          "syntax": [],
          "parameters": [
            {
              "name": "value Optional",
              "description": "An optional value used to modify the internal state of the generator. A value passed to the next() method will be received by yield"
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        }
      },
      "AsyncGeneratorFunction": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGeneratorFunction",
        "title": "AsyncGeneratorFunction",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since January 2020.\n\nThe AsyncGeneratorFunction object provides methods for async generator functions. In JavaScript, every async generator function is actually an AsyncGeneratorFunction object.\n\nNote that AsyncGeneratorFunction is not a global object. It can be obtained with the following code:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": [],
        "AsyncGeneratorFunction": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGeneratorFunction/AsyncGeneratorFunction",
          "title": "AsyncGeneratorFunction() constructor",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since January 2020.\n\nThe AsyncGeneratorFunction() constructor creates AsyncGeneratorFunction objects.\n\nNote that AsyncGeneratorFunction is not a global object. It could be obtained by evaluating the following code.",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "prototype": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGeneratorFunction/prototype",
          "title": "AsyncGeneratorFunction.prototype.prototype",
          "description": "The prototype property of AsyncGeneratorFunction.prototype is shared by all async generator functions. Its value is AsyncGenerator.prototype. Each async generator function created with the async function* syntax or the AsyncGeneratorFunction() constructor also has its own prototype property, whose prototype is AsyncGeneratorFunction.prototype.prototype. When the async generator function is called, its prototype property becomes the prototype of the returned async generator object.\n\nThe same object as AsyncGenerator.prototype. AsyncGeneratorFunction.prototype.prototype is the technically more accurate name, but AsyncGenerator.prototype appeals to the intuition that it's the prototype of async generator objects.\n\nThe prototype property of each AsyncGeneratorFunction instance is an empty object with no properties, whose prototype is AsyncGeneratorFunction.prototype.prototype. It has the following property attributes:",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        }
      },
      "Array": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#mutating_initial_array_in_iterative_methods",
        "title": "Array",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nThe Array object, as with arrays in other programming languages, enables storing a collection of multiple items under a single variable name, and has members for performing common array operations.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "AsyncFunction": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction",
        "title": "AsyncFunction",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since April 2017.\n\nThe AsyncFunction object provides methods for async functions. In JavaScript, every async function is actually an AsyncFunction object.\n\nNote that AsyncFunction is not a global object. It can be obtained with the following code:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": [],
        "AsyncFunction": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction/AsyncFunction",
          "title": "AsyncFunction() constructor",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since April 2017.\n\nThe AsyncFunction() constructor creates AsyncFunction objects.\n\nNote that AsyncFunction is not a global object. It can be obtained with the following code:",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        }
      },
      "ArrayBuffer": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer#resizing_arraybuffers",
        "title": "ArrayBuffer",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nThe ArrayBuffer object is used to represent a generic raw binary data buffer.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Atomics": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics",
        "title": "Atomics",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since December 2021.\n\n* Some parts of this feature may have varying levels of support.\n\nThe Atomics namespace object contains static methods for carrying out atomic operations. They are used with SharedArrayBuffer and ArrayBuffer objects.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": [],
        "exchange": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/exchange",
          "title": "Atomics.exchange()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since December 2021.\n\nThe Atomics.exchange() static method exchanges a given value at a given position in the array and returns the old value at that position. This atomic operation guarantees that no other write happens between the read of the old value and the write of the new value.\n\nAn integer typed array. One of Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array, BigInt64Array, or BigUint64Array.",
          "syntax": [],
          "parameters": [
            {
              "name": "typedArray",
              "description": "An integer typed array. One of Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array, BigInt64Array, or BigUint64Array."
            },
            {
              "name": "index",
              "description": "The position in the typedArray to exchange a value."
            },
            {
              "name": "value",
              "description": "The number to exchange."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "store": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/store",
          "title": "Atomics.store()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since December 2021.\n\nThe Atomics.store() static\nmethod stores a given value at the given position in the array and returns that value.\n\nAn integer typed array. One of Int8Array, Uint8Array,\nInt16Array, Uint16Array, Int32Array,\nUint32Array, BigInt64Array, or\nBigUint64Array.",
          "syntax": [],
          "parameters": [
            {
              "name": "typedArray",
              "description": "An integer typed array. One of Int8Array, Uint8Array,\nInt16Array, Uint16Array, Int32Array,\nUint32Array, BigInt64Array, or\nBigUint64Array."
            },
            {
              "name": "index",
              "description": "The position in the typedArray to store a\nvalue in."
            },
            {
              "name": "value",
              "description": "The number to store."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "or": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/or",
          "title": "Atomics.or()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since December 2021.\n\nThe Atomics.or() static\nmethod computes a bitwise OR with a given value at a given position in the array, and\nreturns the old value at that position. This atomic operation guarantees that no other\nwrite happens until the modified value is written back.\n\nAn integer typed array. One of Int8Array, Uint8Array,\nInt16Array, Uint16Array, Int32Array,\nUint32Array, BigInt64Array, or\nBigUint64Array.",
          "syntax": [],
          "parameters": [
            {
              "name": "typedArray",
              "description": "An integer typed array. One of Int8Array, Uint8Array,\nInt16Array, Uint16Array, Int32Array,\nUint32Array, BigInt64Array, or\nBigUint64Array."
            },
            {
              "name": "index",
              "description": "The position in the typedArray to compute the bitwise OR."
            },
            {
              "name": "value",
              "description": "The number to compute the bitwise OR with."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "and": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/and",
          "title": "Atomics.and()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since December 2021.\n\nThe Atomics.and() static\nmethod computes a bitwise AND with a given value at a given position in the array, and\nreturns the old value at that position. This atomic operation guarantees that no other\nwrite happens until the modified value is written back.\n\nAn integer typed array. One of Int8Array, Uint8Array,\nInt16Array, Uint16Array, Int32Array,\nUint32Array, BigInt64Array, or\nBigUint64Array.",
          "syntax": [],
          "parameters": [
            {
              "name": "typedArray",
              "description": "An integer typed array. One of Int8Array, Uint8Array,\nInt16Array, Uint16Array, Int32Array,\nUint32Array, BigInt64Array, or\nBigUint64Array."
            },
            {
              "name": "index",
              "description": "The position in the typedArray to compute the bitwise AND."
            },
            {
              "name": "value",
              "description": "The number to compute the bitwise AND with."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "isLockFree": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/isLockFree",
          "title": "Atomics.isLockFree()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since December 2021.\n\nThe Atomics.isLockFree() static method is used to determine whether the Atomics methods use locks or atomic hardware operations when applied to typed arrays with the given element byte size. It is intended as an optimization primitive, so that high-performance algorithms can determine whether to use locks or atomic operations in critical sections. If an atomic primitive is not lock-free, it is often more efficient for an algorithm to provide its own locking.\n\nThe size in bytes to check.",
          "syntax": [],
          "parameters": [
            {
              "name": "size",
              "description": "The size in bytes to check."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "wait": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/wait",
          "title": "Atomics.wait()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since December 2021.\n\nThe Atomics.wait() static\nmethod verifies that a shared memory location still contains a\ngiven value and if so sleeps, awaiting a wake-up notification or times out. It returns a string which\nis either \"ok\", \"not-equal\", or \"timed-out\".\n\nNote:\nThis operation only works with an Int32Array or BigInt64Array that views a SharedArrayBuffer, and may not be allowed on the main thread.\nFor a non-blocking, asynchronous version of this method, see Atomics.waitAsync().",
          "syntax": [],
          "parameters": [
            {
              "name": "typedArray",
              "description": "An Int32Array or BigInt64Array that views a SharedArrayBuffer."
            },
            {
              "name": "index",
              "description": "The position in the typedArray to wait on."
            },
            {
              "name": "value",
              "description": "The expected value to test."
            },
            {
              "name": "timeout Optional",
              "description": "Time to wait in milliseconds. NaN (and values that get converted to NaN, such as undefined) becomes Infinity. Negative values become 0."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "pause": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/pause",
          "title": "Atomics.pause()",
          "description": "Since April 2025, this feature works across the latest devices and browser versions. This feature might not work in older devices or browsers.\n\nThe Atomics.pause() static method provides a micro-wait primitive that hints to the CPU that the caller is spinning while waiting on access to a shared resource. This allows the system to reduce the resources allocated to the core (such as power) or thread, without yielding the current thread.\n\npause() has no observable behavior other than timing. The exact behavior is dependent on the CPU architecture and the operating system. For example, in Intel x86, it may be a pause instruction as per Intel's optimization manual. It could be a no-op in certain platforms.",
          "syntax": [],
          "parameters": [
            {
              "name": "durationHint Optional",
              "description": "An integer that an implementation may use to determine how long to wait. For a value n + 1, an implementation waits at least as long as it does for a given value n. The exact number has no physical meaning. There may be an internal upper bound on the maximum amount of time paused on the order of tens to hundreds of nanoseconds. This can be used to implement a backoff strategy by increasing the durationHint passed in. There is no guarantee that an implementation will make use of this hint."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "add": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/add",
          "title": "Atomics.add()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since December 2021.\n\nThe Atomics.add() static\nmethod adds a given value at a given position in the array and returns the old value at\nthat position. This atomic operation guarantees that no other write happens until the\nmodified value is written back.\n\nAn integer typed array. One of Int8Array, Uint8Array,\nInt16Array, Uint16Array, Int32Array,\nUint32Array, BigInt64Array, or\nBigUint64Array.",
          "syntax": [],
          "parameters": [
            {
              "name": "typedArray",
              "description": "An integer typed array. One of Int8Array, Uint8Array,\nInt16Array, Uint16Array, Int32Array,\nUint32Array, BigInt64Array, or\nBigUint64Array."
            },
            {
              "name": "index",
              "description": "The position in the typedArray to add a\nvalue to."
            },
            {
              "name": "value",
              "description": "The number to add."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "load": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/load",
          "title": "Atomics.load()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since December 2021.\n\nThe Atomics.load() static\nmethod returns a value at a given position in the array.\n\nAn integer typed array. One of Int8Array, Uint8Array,\nInt16Array, Uint16Array, Int32Array,\nUint32Array, BigInt64Array, or\nBigUint64Array.",
          "syntax": [],
          "parameters": [
            {
              "name": "typedArray",
              "description": "An integer typed array. One of Int8Array, Uint8Array,\nInt16Array, Uint16Array, Int32Array,\nUint32Array, BigInt64Array, or\nBigUint64Array."
            },
            {
              "name": "index",
              "description": "The position in the typedArray to load from."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "sub": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/sub",
          "title": "Atomics.sub()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since December 2021.\n\nThe Atomics.sub() static method subtracts a given value\nat a given position in the array and returns the old value at that position. This atomic\noperation guarantees that no other write happens until the modified value is written\nback.\n\nAn integer typed array. One of Int8Array, Uint8Array,\nInt16Array, Uint16Array, Int32Array,\nUint32Array, BigInt64Array, or\nBigUint64Array.",
          "syntax": [],
          "parameters": [
            {
              "name": "typedArray",
              "description": "An integer typed array. One of Int8Array, Uint8Array,\nInt16Array, Uint16Array, Int32Array,\nUint32Array, BigInt64Array, or\nBigUint64Array."
            },
            {
              "name": "index",
              "description": "The position in the typedArray to subtract a\nvalue from."
            },
            {
              "name": "value",
              "description": "The number to subtract."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "compareExchange": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/compareExchange",
          "title": "Atomics.compareExchange()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since December 2021.\n\nThe Atomics.compareExchange() static method exchanges a given replacement value at a given position in the array, if a given expected value equals the old value. It returns the old value at that position whether it was equal to the expected value or not. This atomic operation guarantees that no other write happens until the modified value is written back.\n\nAn integer typed array. One of Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array, BigInt64Array, or BigUint64Array.",
          "syntax": [],
          "parameters": [
            {
              "name": "typedArray",
              "description": "An integer typed array. One of Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array, BigInt64Array, or BigUint64Array."
            },
            {
              "name": "index",
              "description": "The position in the typedArray to exchange a replacementValue."
            },
            {
              "name": "expectedValue",
              "description": "The value to check for equality."
            },
            {
              "name": "replacementValue",
              "description": "The number to exchange."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "notify": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/notify",
          "title": "Atomics.notify()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since December 2021.\n\nThe Atomics.notify() static\nmethod notifies up some agents that are sleeping in the wait queue.\n\nNote:\nThis operation only works with an Int32Array or BigInt64Array that views a SharedArrayBuffer.\nIt will return 0 on non-shared ArrayBuffer objects.",
          "syntax": [],
          "parameters": [
            {
              "name": "typedArray",
              "description": "An Int32Array or BigInt64Array that views a SharedArrayBuffer."
            },
            {
              "name": "index",
              "description": "The position in the typedArray to wake up on."
            },
            {
              "name": "count Optional",
              "description": "The number of sleeping agents to notify. Defaults to Infinity."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "xor": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/xor",
          "title": "Atomics.xor()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since December 2021.\n\nThe Atomics.xor() static\nmethod computes a bitwise XOR with a given value at a given position in the array, and\nreturns the old value at that position. This atomic operation guarantees that no other\nwrite happens until the modified value is written back.\n\nAn integer typed array. One of Int8Array, Uint8Array,\nInt16Array, Uint16Array, Int32Array,\nUint32Array, BigInt64Array, or\nBigUint64Array.",
          "syntax": [],
          "parameters": [
            {
              "name": "typedArray",
              "description": "An integer typed array. One of Int8Array, Uint8Array,\nInt16Array, Uint16Array, Int32Array,\nUint32Array, BigInt64Array, or\nBigUint64Array."
            },
            {
              "name": "index",
              "description": "The position in the typedArray to compute the bitwise XOR."
            },
            {
              "name": "value",
              "description": "The number to compute the bitwise XOR with."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "waitAsync": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/waitAsync",
          "title": "Atomics.waitAsync()",
          "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nThe Atomics.waitAsync() static method waits asynchronously on a shared memory location and returns an object representing the result of the operation.\n\nUnlike Atomics.wait(), waitAsync is non-blocking and usable on the main thread.",
          "syntax": [],
          "parameters": [
            {
              "name": "typedArray",
              "description": "An Int32Array or BigInt64Array that views a SharedArrayBuffer."
            },
            {
              "name": "index",
              "description": "The position in the typedArray to wait on."
            },
            {
              "name": "value",
              "description": "The expected value to test."
            },
            {
              "name": "timeout Optional",
              "description": "Time to wait in milliseconds. NaN (and values that get converted to NaN, such as undefined) becomes Infinity. Negative values become 0."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        }
      },
      "AsyncIterator": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncIterator",
        "title": "AsyncIterator",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since January 2020.\n\nAn AsyncIterator object is an object that conforms to the async iterator protocol by providing a next() method that returns a promise fulfilling to an iterator result object. The AsyncIterator.prototype object is a hidden global object that all built-in async iterators inherit from. It provides an [Symbol.asyncIterator]() method that returns the async iterator object itself, making the async iterator also async iterable.\n\nNote that AsyncIterator is not a global object, although it will be in the future with the async iterator helpers proposal. The AsyncIterator.prototype object shared by all built-in async iterators can be obtained with the following code:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": [],
        "Symbol.asyncIterator": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncIterator/Symbol.asyncIterator",
          "title": "AsyncIterator.prototype[Symbol.asyncIterator]()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since January 2020.\n\nThe [Symbol.asyncIterator]() method of AsyncIterator instances implements the async iterable protocol and allows built-in async iterators to be consumed by most syntaxes expecting async iterables, such as for await...of loops. It returns the value of this, which is the async iterator object itself.\n\nNone.",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        }
      },
      "BigInt": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt#use_within_json",
        "title": "BigInt",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2020.\n\nBigInt values represent integer values which are too high or too low to be represented by the number primitive.\n\nA BigInt value, also sometimes just called a BigInt, is a bigint primitive, created by appending n to the end of an integer literal, or by calling the BigInt() function (without the new operator) and giving it an integer value or string value.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "BigInt64Array": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array",
        "title": "BigInt64Array",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2021.\n\nThe BigInt64Array typed array represents an array of 64-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0n unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n\nBigInt64Array is a subclass of the hidden TypedArray class.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": [],
        "BigInt64Array": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array/BigInt64Array",
          "title": "BigInt64Array() constructor",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2021.\n\nThe BigInt64Array() constructor creates BigInt64Array objects. The contents are initialized to 0n unless initialization data is explicitly provided.\n\nNote: BigInt64Array() can only be constructed with new. Attempting to call it without new throws a TypeError.",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        }
      },
      "BigUint64Array": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array",
        "title": "BigUint64Array",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2021.\n\nThe BigUint64Array typed array represents an array of 64-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0n unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n\nBigUint64Array is a subclass of the hidden TypedArray class.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": [],
        "BigUint64Array": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array/BigUint64Array",
          "title": "BigUint64Array() constructor",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2021.\n\nThe BigUint64Array() constructor creates BigUint64Array objects. The contents are initialized to 0n unless initialization data is explicitly provided.\n\nNote: BigUint64Array() can only be constructed with new. Attempting to call it without new throws a TypeError.",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        }
      },
      "decodeURIComponent": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent",
        "title": "decodeURIComponent()",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe decodeURIComponent() function decodes a Uniform Resource Identifier (URI) component previously created by encodeURIComponent() or by a similar routine.\n\nAn encoded component of a Uniform Resource Identifier.",
        "syntax": [],
        "parameters": [
          {
            "name": "encodedURI",
            "description": "An encoded component of a Uniform Resource Identifier."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Date": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#date_time_string_format",
        "title": "Date",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nJavaScript Date objects represent a single moment in time in a platform-independent format. Date objects encapsulate an integral number that represents milliseconds since the midnight at the beginning of January 1, 1970, UTC (the epoch).",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "DataView": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
        "title": "DataView",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nThe DataView view provides a low-level interface for reading and writing multiple number types in a binary ArrayBuffer, without having to care about the platform's endianness.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": [],
        "getBigUint64": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getBigUint64",
          "title": "DataView.prototype.getBigUint64()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2021.\n\nThe getBigUint64() method of DataView instances reads 8 bytes starting at the specified byte offset of this DataView and interprets them as a 64-bit unsigned integer. There is no alignment constraint; multi-byte values may be fetched from any offset within bounds.\n\nThe offset, in bytes, from the start of the view to read the data from.",
          "syntax": [],
          "parameters": [
            {
              "name": "byteOffset",
              "description": "The offset, in bytes, from the start of the view to read the data from."
            },
            {
              "name": "littleEndian Optional",
              "description": "Indicates whether the data is stored in little- or big-endian format. If false or undefined, a big-endian value is read."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "getFloat16": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getFloat16",
          "title": "DataView.prototype.getFloat16()",
          "description": "Since April 2025, this feature works across the latest devices and browser versions. This feature might not work in older devices or browsers.\n\nThe getFloat16() method of DataView instances reads 2 bytes starting at the specified byte offset of this DataView and interprets them as a 16-bit floating point number. There is no alignment constraint; multi-byte values may be fetched from any offset within bounds.\n\nThe offset, in bytes, from the start of the view to read the data from.",
          "syntax": [],
          "parameters": [
            {
              "name": "byteOffset",
              "description": "The offset, in bytes, from the start of the view to read the data from."
            },
            {
              "name": "littleEndian Optional",
              "description": "Indicates whether the data is stored in little- or big-endian format. If false or undefined, a big-endian value is read."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "setUint8": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setUint8",
          "title": "DataView.prototype.setUint8()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe setUint8() method of DataView instances takes a number and stores it as an 8-bit unsigned integer in the byte at the specified byte offset of this DataView.\n\nThe offset, in bytes, from the start of the view to store the data in.",
          "syntax": [],
          "parameters": [
            {
              "name": "byteOffset",
              "description": "The offset, in bytes, from the start of the view to store the data in."
            },
            {
              "name": "value",
              "description": "The value to set. For how the value is encoded in bytes, see Value encoding and normalization."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "getUint32": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getUint32",
          "title": "DataView.prototype.getUint32()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe getUint32() method of DataView instances reads 4 bytes starting at the specified byte offset of this DataView and interprets them as a 32-bit unsigned integer. There is no alignment constraint; multi-byte values may be fetched from any offset within bounds.\n\nThe offset, in bytes, from the start of the view to read the data from.",
          "syntax": [],
          "parameters": [
            {
              "name": "byteOffset",
              "description": "The offset, in bytes, from the start of the view to read the data from."
            },
            {
              "name": "littleEndian Optional",
              "description": "Indicates whether the data is stored in little- or big-endian format. If false or undefined, a big-endian value is read."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "DataView": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/DataView",
          "title": "DataView() constructor",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe DataView() constructor creates DataView objects.\n\nNote: DataView() can only be constructed with new. Attempting to call it without new throws a TypeError.",
          "syntax": [],
          "parameters": [
            {
              "name": "buffer",
              "description": "An existing ArrayBuffer or SharedArrayBuffer to use as\nthe storage backing the new DataView object."
            },
            {
              "name": "byteOffset Optional",
              "description": "The offset, in bytes, to the first byte in the above buffer for the new view to\nreference. If unspecified, the buffer view starts with the first byte."
            },
            {
              "name": "byteLength Optional",
              "description": "The number of elements in the byte array. If unspecified, the view's length will\nmatch the buffer's length."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "setFloat16": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setFloat16",
          "title": "DataView.prototype.setFloat16()",
          "description": "Since April 2025, this feature works across the latest devices and browser versions. This feature might not work in older devices or browsers.\n\nThe setFloat16() method of DataView instances takes a number and stores it as a 16-bit floating point number in the 2 bytes starting at the specified byte offset of this DataView. There is no alignment constraint; multi-byte values may be stored at any offset within bounds.\n\nThe offset, in bytes, from the start of the view to store the data in.",
          "syntax": [],
          "parameters": [
            {
              "name": "byteOffset",
              "description": "The offset, in bytes, from the start of the view to store the data in."
            },
            {
              "name": "value",
              "description": "The value to set. For how the value is encoded in bytes, see Value encoding and normalization."
            },
            {
              "name": "littleEndian Optional",
              "description": "Indicates whether the data is stored in little- or big-endian format. If false or undefined, a big-endian value is written."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "getUint16": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getUint16",
          "title": "DataView.prototype.getUint16()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe getUint16() method of DataView instances reads 2 bytes starting at the specified byte offset of this DataView and interprets them as a 16-bit unsigned integer. There is no alignment constraint; multi-byte values may be fetched from any offset within bounds.\n\nThe offset, in bytes, from the start of the view to read the data from.",
          "syntax": [],
          "parameters": [
            {
              "name": "byteOffset",
              "description": "The offset, in bytes, from the start of the view to read the data from."
            },
            {
              "name": "littleEndian Optional",
              "description": "Indicates whether the data is stored in little- or big-endian format. If false or undefined, a big-endian value is read."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "setUint16": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setUint16",
          "title": "DataView.prototype.setUint16()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe setUint16() method of DataView instances takes a number and stores it as a 16-bit unsigned integer in the 2 bytes starting at the specified byte offset of this DataView. There is no alignment constraint; multi-byte values may be stored at any offset within bounds.\n\nThe offset, in bytes, from the start of the view to store the data in.",
          "syntax": [],
          "parameters": [
            {
              "name": "byteOffset",
              "description": "The offset, in bytes, from the start of the view to store the data in."
            },
            {
              "name": "value",
              "description": "The value to set. For how the value is encoded in bytes, see Value encoding and normalization."
            },
            {
              "name": "littleEndian Optional",
              "description": "Indicates whether the data is stored in little- or big-endian format. If false or undefined, a big-endian value is written."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "getFloat64": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getFloat64",
          "title": "DataView.prototype.getFloat64()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe getFloat64() method of DataView instances reads 8 bytes starting at the specified byte offset of this DataView and interprets them as a 64-bit floating point number. There is no alignment constraint; multi-byte values may be fetched from any offset within bounds.\n\nThe offset, in bytes, from the start of the view to read the data from.",
          "syntax": [],
          "parameters": [
            {
              "name": "byteOffset",
              "description": "The offset, in bytes, from the start of the view to read the data from."
            },
            {
              "name": "littleEndian Optional",
              "description": "Indicates whether the data is stored in little- or big-endian format. If false or undefined, a big-endian value is read."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "getBigInt64": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getBigInt64",
          "title": "DataView.prototype.getBigInt64()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2021.\n\nThe getBigInt64() method of DataView instances reads 8 bytes starting at the specified byte offset of this DataView and interprets them as a 64-bit signed integer. There is no alignment constraint; multi-byte values may be fetched from any offset within bounds.\n\nThe offset, in bytes, from the start of the view to read the data from.",
          "syntax": [],
          "parameters": [
            {
              "name": "byteOffset",
              "description": "The offset, in bytes, from the start of the view to read the data from."
            },
            {
              "name": "littleEndian Optional",
              "description": "Indicates whether the data is stored in little- or big-endian format. If false or undefined, a big-endian value is read."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "byteOffset": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/byteOffset",
          "title": "DataView.prototype.byteOffset",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe byteOffset accessor property of DataView instances returns the offset (in bytes) of this view from the start of its ArrayBuffer or SharedArrayBuffer.\n\nThe byteOffset property is an accessor property whose set accessor function is undefined, meaning that you can only read this property. The value is established when an DataView is constructed and cannot be changed.",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "byteLength": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/byteLength",
          "title": "DataView.prototype.byteLength",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe byteLength accessor property of DataView instances returns the length (in bytes) of this view.\n\nThe byteLength property is an accessor property whose set accessor function is undefined, meaning that you can only read this property. The value is established when an DataView is constructed and cannot be changed. If the DataView is not specifying an offset or a byteLength, the byteLength of the referenced ArrayBuffer or SharedArrayBuffer will be returned.",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "setInt16": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setInt16",
          "title": "DataView.prototype.setInt16()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe setInt16() method of DataView instances takes a number and stores it as a 16-bit signed integer in the 2 bytes starting at the specified byte offset of this DataView. There is no alignment constraint; multi-byte values may be stored at any offset within bounds.\n\nThe offset, in bytes, from the start of the view to store the data in.",
          "syntax": [],
          "parameters": [
            {
              "name": "byteOffset",
              "description": "The offset, in bytes, from the start of the view to store the data in."
            },
            {
              "name": "value",
              "description": "The value to set. For how the value is encoded in bytes, see Value encoding and normalization."
            },
            {
              "name": "littleEndian Optional",
              "description": "Indicates whether the data is stored in little- or big-endian format. If false or undefined, a big-endian value is written."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "buffer": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/buffer",
          "title": "DataView.prototype.buffer",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe buffer accessor property of DataView instances returns the ArrayBuffer or SharedArrayBuffer referenced by this view at construction time.\n\nThe buffer property is an accessor property whose set accessor function is undefined, meaning that you can only read this property. The value is established when the DataView is constructed and cannot be changed.",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "setFloat32": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setFloat32",
          "title": "DataView.prototype.setFloat32()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe setFloat32() method of DataView instances takes a number and stores it as a 32-bit floating point number in the 4 bytes starting at the specified byte offset of this DataView. There is no alignment constraint; multi-byte values may be stored at any offset within bounds.\n\nThe offset, in bytes, from the start of the view to store the data in.",
          "syntax": [],
          "parameters": [
            {
              "name": "byteOffset",
              "description": "The offset, in bytes, from the start of the view to store the data in."
            },
            {
              "name": "value",
              "description": "The value to set. For how the value is encoded in bytes, see Value encoding and normalization."
            },
            {
              "name": "littleEndian Optional",
              "description": "Indicates whether the data is stored in little- or big-endian format. If false or undefined, a big-endian value is written."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "setInt8": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setInt8",
          "title": "DataView.prototype.setInt8()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe setInt8() method of DataView instances takes a number and stores it as an 8-bit signed integer in the byte at the specified byte offset of this DataView.\n\nThe offset, in bytes, from the start of the view to store the data in.",
          "syntax": [],
          "parameters": [
            {
              "name": "byteOffset",
              "description": "The offset, in bytes, from the start of the view to store the data in."
            },
            {
              "name": "value",
              "description": "The value to set. For how the value is encoded in bytes, see Value encoding and normalization."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "setInt32": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setInt32",
          "title": "DataView.prototype.setInt32()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe setInt32() method of DataView instances takes a number and stores it as a 32-bit signed integer in the 4 bytes starting at the specified byte offset of this DataView. There is no alignment constraint; multi-byte values may be stored at any offset within bounds.\n\nThe offset, in bytes, from the start of the view to store the data in.",
          "syntax": [],
          "parameters": [
            {
              "name": "byteOffset",
              "description": "The offset, in bytes, from the start of the view to store the data in."
            },
            {
              "name": "value",
              "description": "The value to set. For how the value is encoded in bytes, see Value encoding and normalization."
            },
            {
              "name": "littleEndian Optional",
              "description": "Indicates whether the data is stored in little- or big-endian format. If false or undefined, a big-endian value is written."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "setBigUint64": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setBigUint64",
          "title": "DataView.prototype.setBigUint64()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2021.\n\nThe setBigUint64() method of DataView instances takes a BigInt and stores it as a 64-bit unsigned integer in the 8 bytes starting at the specified byte offset of this DataView. There is no alignment constraint; multi-byte values may be stored at any offset within bounds.\n\nThe offset, in bytes, from the start of the view to store the data in.",
          "syntax": [],
          "parameters": [
            {
              "name": "byteOffset",
              "description": "The offset, in bytes, from the start of the view to store the data in."
            },
            {
              "name": "value",
              "description": "The value to set as a BigInt. For how the value is encoded in bytes, see Value encoding and normalization."
            },
            {
              "name": "littleEndian Optional",
              "description": "Indicates whether the data is stored in little- or big-endian format. If false or undefined, a big-endian value is written."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "setBigInt64": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setBigInt64",
          "title": "DataView.prototype.setBigInt64()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2021.\n\nThe setBigInt64() method of DataView instances takes a BigInt and stores it as a 64-bit signed integer in the 8 bytes starting at the specified byte offset of this DataView. There is no alignment constraint; multi-byte values may be stored at any offset within bounds.\n\nThe offset, in bytes, from the start of the view to store the data in.",
          "syntax": [],
          "parameters": [
            {
              "name": "byteOffset",
              "description": "The offset, in bytes, from the start of the view to store the data in."
            },
            {
              "name": "value",
              "description": "The value to set as a BigInt. For how the value is encoded in bytes, see Value encoding and normalization."
            },
            {
              "name": "littleEndian Optional",
              "description": "Indicates whether the data is stored in little- or big-endian format. If false or undefined, a big-endian value is written."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "getInt8": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getInt8",
          "title": "DataView.prototype.getInt8()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe getInt8() method of DataView instances reads 1 byte at the specified byte offset of this DataView and interprets it as an 8-bit signed integer.\n\nThe offset, in bytes, from the start of the view to read the data from.",
          "syntax": [],
          "parameters": [
            {
              "name": "byteOffset",
              "description": "The offset, in bytes, from the start of the view to read the data from."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "setUint32": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setUint32",
          "title": "DataView.prototype.setUint32()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe setUint32() method of DataView instances takes a number and stores it as a 32-bit unsigned integer in the 4 bytes starting at the specified byte offset of this DataView. There is no alignment constraint; multi-byte values may be stored at any offset within bounds.\n\nThe offset, in bytes, from the start of the view to store the data in.",
          "syntax": [],
          "parameters": [
            {
              "name": "byteOffset",
              "description": "The offset, in bytes, from the start of the view to store the data in."
            },
            {
              "name": "value",
              "description": "The value to set. For how the value is encoded in bytes, see Value encoding and normalization."
            },
            {
              "name": "littleEndian Optional",
              "description": "Indicates whether the data is stored in little- or big-endian format. If false or undefined, a big-endian value is written."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "getFloat32": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getFloat32",
          "title": "DataView.prototype.getFloat32()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe getFloat32() method of DataView instances reads 4 bytes starting at the specified byte offset of this DataView and interprets them as a 32-bit floating point number. There is no alignment constraint; multi-byte values may be fetched from any offset within bounds.\n\nThe offset, in bytes, from the start of the view to read the data from.",
          "syntax": [],
          "parameters": [
            {
              "name": "byteOffset",
              "description": "The offset, in bytes, from the start of the view to read the data from."
            },
            {
              "name": "littleEndian Optional",
              "description": "Indicates whether the data is stored in little- or big-endian format. If false or undefined, a big-endian value is read."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "getUint8": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getUint8",
          "title": "DataView.prototype.getUint8()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe getUint8() method of DataView instances reads 1 byte at the specified byte offset of this DataView and interprets it as an 8-bit unsigned integer.\n\nThe offset, in bytes, from the start of the view to read the data from.",
          "syntax": [],
          "parameters": [
            {
              "name": "byteOffset",
              "description": "The offset, in bytes, from the start of the view to read the data from."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "getInt16": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getInt16",
          "title": "DataView.prototype.getInt16()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe getInt16() method of DataView instances reads 2 bytes starting at the specified byte offset of this DataView and interprets them as a 16-bit signed integer. There is no alignment constraint; multi-byte values may be fetched from any offset within bounds.\n\nThe offset, in bytes, from the start of the view to read the data from.",
          "syntax": [],
          "parameters": [
            {
              "name": "byteOffset",
              "description": "The offset, in bytes, from the start of the view to read the data from."
            },
            {
              "name": "littleEndian Optional",
              "description": "Indicates whether the data is stored in little- or big-endian format. If false or undefined, a big-endian value is read."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "setFloat64": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setFloat64",
          "title": "DataView.prototype.setFloat64()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe setFloat64() method of DataView instances takes a number and stores it as a 64-bit floating point number in the 8 bytes starting at the specified byte offset of this DataView. There is no alignment constraint; multi-byte values may be stored at any offset within bounds.\n\nThe offset, in bytes, from the start of the view to store the data in.",
          "syntax": [],
          "parameters": [
            {
              "name": "byteOffset",
              "description": "The offset, in bytes, from the start of the view to store the data in."
            },
            {
              "name": "value",
              "description": "The value to set. For how the value is encoded in bytes, see Value encoding and normalization."
            },
            {
              "name": "littleEndian Optional",
              "description": "Indicates whether the data is stored in little- or big-endian format. If false or undefined, a big-endian value is written."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "getInt32": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getInt32",
          "title": "DataView.prototype.getInt32()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe getInt32() method of DataView instances reads 4 bytes starting at the specified byte offset of this DataView and interprets them as a 32-bit signed integer. There is no alignment constraint; multi-byte values may be fetched from any offset within bounds.\n\nThe offset, in bytes, from the start of the view to read the data from.",
          "syntax": [],
          "parameters": [
            {
              "name": "byteOffset",
              "description": "The offset, in bytes, from the start of the view to read the data from."
            },
            {
              "name": "littleEndian Optional",
              "description": "Indicates whether the data is stored in little- or big-endian format. If false or undefined, a big-endian value is read."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        }
      },
      "decodeURI": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURI",
        "title": "decodeURI()",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe decodeURI() function decodes a Uniform Resource Identifier (URI) previously created by encodeURI() or a similar routine.\n\nA complete, encoded Uniform Resource Identifier.",
        "syntax": [],
        "parameters": [
          {
            "name": "encodedURI",
            "description": "A complete, encoded Uniform Resource Identifier."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Boolean": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean#boolean_coercion",
        "title": "Boolean",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nBoolean values can be one of two values: true or false, representing the truth value of a logical proposition.\n\nBoolean values are typically produced by relational operators, equality operators, and logical NOT (!). They can also be produced by functions that represent conditions, such as Array.isArray(). Note that binary logical operators such as && and || return the values of the operands, which may or may not be boolean values.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": [],
        "Boolean": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/Boolean",
          "title": "Boolean() constructor",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Boolean() constructor creates Boolean objects. When called as a function, it returns primitive values of type Boolean.\n\nNote: Boolean() can be called with or without new, but with different effects. See Return value.",
          "syntax": [],
          "parameters": [
            {
              "name": "value",
              "description": "The initial value of the Boolean object."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "valueOf": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/valueOf",
          "title": "Boolean.prototype.valueOf()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe valueOf() method of Boolean values returns the primitive value of a\nBoolean object.\n\nNone.",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "toString": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/toString",
          "title": "Boolean.prototype.toString()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe toString() method of Boolean values returns a string representing the specified boolean value.\n\nNone.",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        }
      },
      "escape": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/escape",
        "title": "escape()",
        "description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nNote: escape() is a non-standard function implemented by browsers and was only standardized for cross-engine compatibility. It is not required to be implemented by all JavaScript engines and may not work everywhere. Use encodeURIComponent() or encodeURI() if possible.\n\nThe escape() function computes a new string in which certain characters have been replaced by hexadecimal escape sequences.",
        "syntax": [],
        "parameters": [
          {
            "name": "str",
            "description": "A string to be encoded."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "eval": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval#direct_and_indirect_eval",
        "title": "eval()",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nWarning:\nExecuting JavaScript from a string is an enormous security risk. It is far too easy for a bad actor to run arbitrary code when you use eval(). See Never use direct eval()!, below.\n\nThe eval() function evaluates JavaScript code represented as a string and returns its completion value. The source is parsed as a script.",
        "syntax": [],
        "parameters": [
          {
            "name": "script",
            "description": "A string representing a JavaScript expression, statement, or sequence of statements. The expression can include variables and properties of existing objects. It will be parsed as a script, so import declarations (which can only exist in modules) are not allowed."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Error": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#custom_error_types",
        "title": "Error",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nError objects are thrown when runtime errors occur. The Error object can also be used as a base object for user-defined exceptions. See below for standard built-in error types.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "encodeURIComponent": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent",
        "title": "encodeURIComponent()",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe encodeURIComponent() function encodes a URI by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two surrogate characters). Compared to encodeURI(), this function encodes more characters, including those that are part of the URI syntax.\n\nA string to be encoded as a URI component (a path, query string, fragment, etc.). Other values are converted to strings.",
        "syntax": [],
        "parameters": [
          {
            "name": "uriComponent",
            "description": "A string to be encoded as a URI component (a path, query string, fragment, etc.). Other values are converted to strings."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "encodeURI": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI#encoding_for_rfc3986",
        "title": "encodeURI()",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe encodeURI() function encodes a URI by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two surrogate characters). Compared to encodeURIComponent(), this function encodes fewer characters, preserving those that are part of the URI syntax.\n\nA string to be encoded as a URI.",
        "syntax": [],
        "parameters": [
          {
            "name": "uri",
            "description": "A string to be encoded as a URI."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "EvalError": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
        "title": "EvalError",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nThe EvalError object indicates an error regarding the global eval() function. This exception is not thrown by JavaScript anymore, however the EvalError object remains for compatibility.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": [],
        "EvalError": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError/EvalError",
          "title": "EvalError() constructor",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe EvalError() constructor creates EvalError objects.\n\nNote: EvalError() can be called with or without new. Both create a new EvalError instance.",
          "syntax": [],
          "parameters": [
            {
              "name": "message Optional",
              "description": "Human-readable description of the error."
            },
            {
              "name": "options Optional",
              "description": "An object that has the following properties:\n\ncause Optional\n\nA property indicating the specific cause of the error.\nWhen catching and re-throwing an error with a more-specific or useful error message, this property can be used to pass the original error."
            },
            {
              "name": "cause Optional",
              "description": "A property indicating the specific cause of the error.\nWhen catching and re-throwing an error with a more-specific or useful error message, this property can be used to pass the original error."
            },
            {
              "name": "fileName Optional \nNon-standard",
              "description": "The name of the file containing the code that caused the exception"
            },
            {
              "name": "lineNumber Optional \nNon-standard",
              "description": "The line number of the code that caused the exception"
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        }
      },
      "FinalizationRegistry": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry",
        "title": "FinalizationRegistry",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since April 2021.\n\n* Some parts of this feature may have varying levels of support.\n\nA FinalizationRegistry object lets you request a callback when a value is garbage-collected.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": [],
        "FinalizationRegistry": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry/FinalizationRegistry",
          "title": "FinalizationRegistry() constructor",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since April 2021.\n\nThe FinalizationRegistry() constructor creates FinalizationRegistry objects.\n\nNote: FinalizationRegistry() can only be constructed with new. Attempting to call it without new throws a TypeError.",
          "syntax": [],
          "parameters": [
            {
              "name": "callback",
              "description": "A function to be invoked each time a registered target value is garbage collected. Its return value is ignored. The function is called with the following arguments:\n\nheldValue\n\nThe value that was passed to the second parameter of the register() method when the target object was registered."
            },
            {
              "name": "heldValue",
              "description": "The value that was passed to the second parameter of the register() method when the target object was registered."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "register": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry/register",
          "title": "FinalizationRegistry.prototype.register()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since April 2021.\n\n* Some parts of this feature may have varying levels of support.\n\nThe register() method of FinalizationRegistry instances registers an value with this FinalizationRegistry so that if the value is garbage-collected, the registry's callback may get called.",
          "syntax": [],
          "parameters": [
            {
              "name": "target",
              "description": "The target value to register."
            },
            {
              "name": "heldValue",
              "description": "The value to pass to the finalizer for this target. This cannot be the target itself but can be anything else, including functions and primitives."
            },
            {
              "name": "unregisterToken Optional",
              "description": "A token that may be used with the unregister method later to unregister the target value. If provided (and not undefined), this must be an object or a non-registered symbol. If not provided, the target cannot be unregistered."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "unregister": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry/unregister",
          "title": "FinalizationRegistry.prototype.unregister()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since April 2021.\n\n* Some parts of this feature may have varying levels of support.\n\nThe unregister() method of FinalizationRegistry instances unregisters a target value from this FinalizationRegistry.",
          "syntax": [],
          "parameters": [
            {
              "name": "unregisterToken",
              "description": "The token used with the register() method when registering the target value. Multiple cells registered with the same unregisterToken will be unregistered together."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        }
      },
      "Float64Array": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
        "title": "Float64Array",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Float64Array typed array represents an array of 64-bit floating point numbers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0 unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n\nFloat64Array is a subclass of the hidden TypedArray class.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": [],
        "Float64Array": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array/Float64Array",
          "title": "Float64Array() constructor",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Float64Array() constructor creates Float64Array objects. The contents are initialized to 0 unless initialization data is explicitly provided.\n\nNote: Float64Array() can only be constructed with new. Attempting to call it without new throws a TypeError.",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        }
      },
      "Float32Array": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
        "title": "Float32Array",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Float32Array typed array represents an array of 32-bit floating point numbers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0 unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n\nFloat32Array is a subclass of the hidden TypedArray class.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": [],
        "Float32Array": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array/Float32Array",
          "title": "Float32Array() constructor",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Float32Array() constructor creates Float32Array objects. The contents are initialized to 0 unless initialization data is explicitly provided.\n\nNote: Float32Array() can only be constructed with new. Attempting to call it without new throws a TypeError.",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        }
      },
      "Float16Array": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float16Array",
        "title": "Float16Array",
        "description": "Since April 2025, this feature works across the latest devices and browser versions. This feature might not work in older devices or browsers.\n\nThe Float16Array typed array represents an array of 16-bit floating point numbers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0 unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n\nFloat16Array is a subclass of the hidden TypedArray class.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": [],
        "Float16Array": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float16Array/Float16Array",
          "title": "Float16Array() constructor",
          "description": "Since April 2025, this feature works across the latest devices and browser versions. This feature might not work in older devices or browsers.\n\nThe Float16Array() constructor creates Float16Array objects. The contents are initialized to 0 unless initialization data is explicitly provided.\n\nNote: Float16Array() can only be constructed with new. Attempting to call it without new throws a TypeError.",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        }
      },
      "Generator": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
        "title": "Generator",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nThe Generator object is returned by a generator function and it conforms to both the iterable protocol and the iterator protocol.\n\nGenerator is a subclass of the hidden Iterator class.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": [],
        "return": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator/return",
          "title": "Generator.prototype.return()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nThe return() method of Generator instances acts as if a return statement is inserted in the generator's body at the current suspended position, which finishes the generator and allows the generator to perform any cleanup tasks when combined with a try...finally block.\n\nThe value to return.",
          "syntax": [],
          "parameters": [
            {
              "name": "value Optional",
              "description": "The value to return."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "throw": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator/throw",
          "title": "Generator.prototype.throw()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nThe throw() method of Generator instances acts as if a throw statement is inserted in the generator's body at the current suspended position, which informs the generator of an error condition and allows it to handle the error, or perform cleanup and close itself.\n\nThe exception to throw. For debugging purposes, it is useful to make it an instanceof Error.",
          "syntax": [],
          "parameters": [
            {
              "name": "exception",
              "description": "The exception to throw. For debugging purposes, it is useful to make it an instanceof Error."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "next": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator/next",
          "title": "Generator.prototype.next()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nThe next() method of Generator instances returns an\nobject with two properties done and value. You can also\nprovide a parameter to the next method to send a value to the\ngenerator.\n\nThe value to send to the generator.",
          "syntax": [],
          "parameters": [
            {
              "name": "value Optional",
              "description": "The value to send to the generator.\nThe value will be assigned as a result of a yield expression. For\nexample, in variable = yield expression, the value\npassed to the .next() function will be assigned to\nvariable."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        }
      },
      "Infinity": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
        "title": "Infinity",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Infinity global property is a numeric value representing infinity.\n\nThe same number value as Number.POSITIVE_INFINITY.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "globalThis": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis",
        "title": "globalThis",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since January 2020.\n\nThe globalThis global property contains the global this value, which is usually akin to the global object.\n\nThe global this object.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Function": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
        "title": "Function",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nThe Function object provides methods for functions. In JavaScript, every function is actually a Function object.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": [],
        "toString": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/toString",
          "title": "Function.prototype.toString()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nThe toString() method of Function instances returns a string representing the source code of this function.",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "Function": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Function",
          "title": "Function() constructor",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Function() constructor creates Function objects. Calling the constructor directly can create functions dynamically, but suffers from security and similar (but far less significant) performance issues as eval(). However, unlike eval (which may have access to the local scope), the Function constructor creates functions which execute in the global scope only.\n\nNote: Function() can be called with or without new. Both create a new Function instance.",
          "syntax": [],
          "parameters": [
            {
              "name": "arg1, \u00e2\u0080\u00a6, argN Optional",
              "description": "Names to be used by the function as formal argument names. Each must be a string that corresponds to a valid JavaScript parameter (any of plain identifier, rest parameter, or destructured parameter, optionally with a default), or a list of such strings separated with commas.\nAs the parameters are parsed in the same way as function expressions, whitespace and comments are accepted. For example: \"x\", \"theValue = 42\", \"[a, b] /* numbers */\" \u00e2\u0080\u0094 or \"x, theValue = 42, [a, b] /* numbers */\". (\"x, theValue = 42\", \"[a, b]\" is also correct, though very confusing to read.)"
            },
            {
              "name": "functionBody",
              "description": "A string containing the JavaScript statements comprising the function definition."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "apply": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply",
          "title": "Function.prototype.apply()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe apply() method of Function instances calls this function with a given this value, and arguments provided as an array (or an array-like object).\n\nThe value of this provided for the call to func. If the function is not in strict mode, null and undefined will be replaced with the global object, and primitive values will be converted to objects.",
          "syntax": [],
          "parameters": [
            {
              "name": "thisArg",
              "description": "The value of this provided for the call to func. If the function is not in strict mode, null and undefined will be replaced with the global object, and primitive values will be converted to objects."
            },
            {
              "name": "argsArray Optional",
              "description": "An array-like object, specifying the arguments with which func should be called, or null or undefined if no arguments should be provided to the function."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "bind": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind",
          "title": "Function.prototype.bind()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe bind() method of Function instances creates a new function that, when called, calls this function with its this keyword set to the provided value, and a given sequence of arguments preceding any provided when the new function is called.\n\nThe value to be passed as the this parameter to the target function func when the bound function is called. If the function is not in strict mode, null and undefined will be replaced with the global object, and primitive values will be converted to objects. The value is ignored if the bound function is constructed using the new operator.",
          "syntax": [],
          "parameters": [
            {
              "name": "thisArg",
              "description": "The value to be passed as the this parameter to the target function func when the bound function is called. If the function is not in strict mode, null and undefined will be replaced with the global object, and primitive values will be converted to objects. The value is ignored if the bound function is constructed using the new operator."
            },
            {
              "name": "arg1, \u00e2\u0080\u00a6, argN Optional",
              "description": "Arguments to prepend to arguments provided to the bound function when invoking func."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "call": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call",
          "title": "Function.prototype.call()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe call() method of Function instances calls this function with a given this value and arguments provided individually.\n\nThe value to use as this when calling func. If the function is not in strict mode, null and undefined will be replaced with the global object, and primitive values will be converted to objects.",
          "syntax": [],
          "parameters": [
            {
              "name": "thisArg",
              "description": "The value to use as this when calling func. If the function is not in strict mode, null and undefined will be replaced with the global object, and primitive values will be converted to objects."
            },
            {
              "name": "arg1, \u00e2\u0080\u00a6, argN Optional",
              "description": "Arguments for the function."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "prototype": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype",
          "title": "Function: prototype",
          "description": "The prototype data property of a Function instance is used when the function is used as a constructor with the new operator. It will become the new object's prototype.\n\nNote:\nNot all Function objects have the prototype property \u00e2\u0080\u0094 see description.\n\nAn object.",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "length": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/length",
          "title": "Function: length",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe length data property of a Function instance indicates the number of parameters expected by the function.\n\nA number.",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "name": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name",
          "title": "Function: name",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since August 2016.\n\nThe name data property of a Function instance indicates the function's name as specified when it was created, or it may be either anonymous or '' (an empty string) for functions created anonymously.\n\nA string.",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "Symbol.hasInstance": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Symbol.hasInstance",
          "title": "Function.prototype[Symbol.hasInstance]()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since April 2017.\n\nThe [Symbol.hasInstance]() method of Function instances specifies the default procedure for determining if a constructor function recognizes an object as one of the constructor's instances. It is called by the instanceof operator.\n\nThe object to test. Primitive values always return false.",
          "syntax": [],
          "parameters": [
            {
              "name": "value",
              "description": "The object to test. Primitive values always return false."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "caller": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/caller",
          "title": "Function.prototype.caller",
          "description": "Non-standard: This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.\n\nDeprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nNote:\nIn strict mode, accessing caller of a function throws an error \u00e2\u0080\u0094 the API is removed with no replacement. This is to prevent code from being able to \"walk the stack\", which both poses security risks and severely limits the possibility of optimizations like inlining and tail-call optimization. For more explanation, you can read the rationale for the deprecation of arguments.callee.",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "displayName": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/displayName",
          "title": "Function: displayName",
          "description": "Non-standard: This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.\n\nThe optional displayName property of a Function instance specifies the display name of the function.\n\nThe displayName property is not initially present on any function \u00e2\u0080\u0094 it's added by the code authors. For the purpose of display, it should be a string.",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "arguments": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/arguments",
          "title": "Function.prototype.arguments",
          "description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nNon-standard: This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.\n\nNote:\nThe arguments property of Function objects is deprecated. The recommended way to access the arguments object is to refer to the variable arguments available within functions.",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        }
      },
      "GeneratorFunction": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
        "title": "GeneratorFunction",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nThe GeneratorFunction object provides methods for generator functions. In JavaScript, every generator function is actually a GeneratorFunction object.\n\nNote that GeneratorFunction is not a global object. It can be obtained with the following code:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": [],
        "GeneratorFunction": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction/GeneratorFunction",
          "title": "GeneratorFunction() constructor",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nThe GeneratorFunction() constructor creates GeneratorFunction objects.\n\nNote that GeneratorFunction is not a global object. It can be obtained with the following code:",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "prototype": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction/prototype",
          "title": "GeneratorFunction.prototype.prototype",
          "description": "The prototype property of GeneratorFunction.prototype is shared by all generator functions. Its value is Generator.prototype. Each generator function created with the function* syntax or the GeneratorFunction() constructor also has its own prototype property, whose prototype is GeneratorFunction.prototype.prototype. When the generator function is called, its prototype property becomes the prototype of the returned generator object.\n\nThe same object as Generator.prototype. GeneratorFunction.prototype.prototype is the technically more accurate name, but Generator.prototype appeals to the intuition that it's the prototype of generator objects.\n\nThe prototype property of each GeneratorFunction instance is an empty object with no properties, whose prototype is GeneratorFunction.prototype.prototype. It has the following property attributes:",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        }
      },
      "Int8Array": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
        "title": "Int8Array",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Int8Array typed array represents an array of 8-bit signed integers. The contents are initialized to 0 unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n\nInt8Array is a subclass of the hidden TypedArray class.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": [],
        "Int8Array": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array/Int8Array",
          "title": "Int8Array() constructor",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Int8Array() constructor creates Int8Array objects. The contents are initialized to 0 unless initialization data is explicitly provided.\n\nNote: Int8Array() can only be constructed with new. Attempting to call it without new throws a TypeError.",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        }
      },
      "InternalError": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
        "title": "InternalError",
        "description": "Non-standard: This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.\n\nThe InternalError object indicates an error that occurred internally in the JavaScript engine.\n\nExample cases are mostly when something is too large, e.g.:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": [],
        "InternalError": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError/InternalError",
          "title": "InternalError() constructor",
          "description": "Non-standard: This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.\n\nThe InternalError() constructor creates InternalError objects.\n\nNote: InternalError() can be called with or without new. Both create a new InternalError instance.",
          "syntax": [],
          "parameters": [
            {
              "name": "message Optional",
              "description": "Human-readable description of the error."
            },
            {
              "name": "options Optional",
              "description": "An object that has the following properties:\n\ncause Optional\n\nA property indicating the specific cause of the error.\nWhen catching and re-throwing an error with a more-specific or useful error message, this property can be used to pass the original error."
            },
            {
              "name": "cause Optional",
              "description": "A property indicating the specific cause of the error.\nWhen catching and re-throwing an error with a more-specific or useful error message, this property can be used to pass the original error."
            },
            {
              "name": "fileName Optional \nNon-standard",
              "description": "The name of the file containing the code that caused the exception"
            },
            {
              "name": "lineNumber Optional \nNon-standard",
              "description": "The line number of the code that caused the exception"
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        }
      },
      "Intl": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument",
        "title": "Intl",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2017.\n\n* Some parts of this feature may have varying levels of support.\n\nThe Intl namespace object contains several constructors as well as functionality common to the internationalization constructors and other language sensitive functions. Collectively, they comprise the ECMAScript Internationalization API, which provides language sensitive string comparison, number formatting, date and time formatting, and more.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": [],
        "Locale": {
          "getWeekInfo": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getWeekInfo",
            "title": "Intl.Locale.prototype.getWeekInfo()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nThe getWeekInfo() method of Intl.Locale instances returns a weekInfo object with the properties firstDay, weekend and minimalDays for this locale.\n\nNote:\nIn some versions of some browsers, this method was implemented as an accessor property called weekInfo. However, because it returns a new object on each access, it is now implemented as a method to prevent the situation of locale.weekInfo === locale.weekInfo returning false. Check the browser compatibility table for details.",
            "syntax": [],
            "parameters": [
              {
                "name": "firstDay",
                "description": "An integer between 1 (Monday) and 7 (Sunday) indicating the first day of the week for the locale. Commonly 1, 5, 6, or 7."
              },
              {
                "name": "weekend",
                "description": "An array of integers between 1 and 7 indicating the weekend days for the locale. This is usually continuous because UTS 35 stores weekendStart and weekendEnd instead."
              },
              {
                "name": "minimalDays",
                "description": "An integer between 1 and 7 (commonly 1 and 4) indicating the minimal days required in the first week of a month or year, for week-of-year or week-of-month calculations (e.g., The 20th week of the year). For example, in the ISO 8601 calendar, the first week of a year must have at least 4 days in this year, so if January 1 is a Friday, Saturday, or Sunday, it will be numbered as part of the last week of the previous year."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "getCalendars": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getCalendars",
            "title": "Intl.Locale.prototype.getCalendars()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nThe getCalendars() method of Intl.Locale instances returns a list of one or more unique calendar identifiers for this locale.\n\nNote:\nIn some versions of some browsers, this method was implemented as an accessor property called calendars. However, because it returns a new array on each access, it is now implemented as a method to prevent the situation of locale.calendars === locale.calendars returning false. Check the browser compatibility table for details.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "caseFirst": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/caseFirst",
            "title": "Intl.Locale.prototype.caseFirst",
            "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2020.\n\nThe caseFirst accessor property of Intl.Locale instances returns whether case is taken into account for this locale's collation rules.\n\nA locale's collation rules are used to determine how strings are ordered in that locale. Certain locales use a character's case (UPPERCASE or lowercase) in the collation process. This additional rule can be expressed in a Intl.Locale object's caseFirst property.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "getTimeZones": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getTimeZones",
            "title": "Intl.Locale.prototype.getTimeZones()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nThe getTimeZones() method of Intl.Locale instances returns a list of supported time zones for this locale.\n\nNote:\nIn some versions of some browsers, this method was implemented as an accessor property called timeZones. However, because it returns a new array on each access, it is now implemented as a method to prevent the situation of locale.timeZones === locale.timeZones returning false. Check the browser compatibility table for details.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "language": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/language",
            "title": "Intl.Locale.prototype.language",
            "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2020.\n\nThe language accessor property of Intl.Locale instances returns the language associated with this locale.\n\nLanguage is one of the core attributes of a locale. The Unicode specification treats the language identifier of a locale as the language and the region together (to make a distinction between dialects and variations, e.g., British English vs. American English). The language property of a Intl.Locale returns strictly the locale's language subtag. The language property's value is set at construction time, either through the language subtag (first part) of the locale identifier or through the language option of the Intl.Locale() constructor. The latter takes priority if they are both present.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "numeric": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/numeric",
            "title": "Intl.Locale.prototype.numeric",
            "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2020.\n\nThe numeric accessor property of Intl.Locale instances returns whether this locale has special collation handling for numeric characters.\n\nLike caseFirst, numeric represents a modification to the collation rules utilized by the locale. numeric is a boolean value, which means that it can be either true or false. If numeric is set to false, there will be no special handling of numeric values in strings. If numeric is set to true, then the locale will take numeric characters into account when collating strings. This special numeric handling means that sequences of decimal digits will be compared as numbers. For example, the string \"A-21\" will be considered less than \"A-123\".",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "numberingSystem": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/numberingSystem",
            "title": "Intl.Locale.prototype.numberingSystem",
            "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2020.\n\nThe numberingSystem accessor property of Intl.Locale instances returns the numeral system for this locale.\n\nA numeral system is a system for expressing numbers. The numberingSystem property's value is set at construction time, either through the nu key of the locale identifier or through the numberingSystem option of the Intl.Locale() constructor. The latter takes priority if they are both present; and if neither is present, the property has value undefined.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "hourCycle": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/hourCycle",
            "title": "Intl.Locale.prototype.hourCycle",
            "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2020.\n\nThe hourCycle accessor property of Intl.Locale instances returns the hour cycle type for this locale.\n\nThere are 2 main types of time keeping conventions (clocks) used around the world: the 12 hour clock and the 24 hour clock. The hourCycle property's value is set at construction time, either through the hc key of the locale identifier or through the hourCycle option of the Intl.Locale() constructor. The latter takes priority if they are both present; and if neither is present, the property has value undefined.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "getTextInfo": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getTextInfo",
            "title": "Intl.Locale.prototype.getTextInfo()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nThe getTextInfo() method of Intl.Locale instances returns the ordering of characters indicated by either ltr (left-to-right) or by rtl (right-to-left) for this locale.\n\nNote:\nIn some versions of some browsers, this method was implemented as an accessor property called textInfo. However, because it returns a new object on each access, it is now implemented as a method to prevent the situation of locale.textInfo === locale.textInfo returning false. Check the browser compatibility table for details.",
            "syntax": [],
            "parameters": [
              {
                "name": "direction",
                "description": "A string indicating the direction of text for the locale. Can be either \"ltr\" (left-to-right) or \"rtl\" (right-to-left)."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "calendar": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/calendar",
            "title": "Intl.Locale.prototype.calendar",
            "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2020.\n\nThe calendar accessor property of Intl.Locale instances returns the calendar type for this locale.\n\nWhile most of the world uses the Gregorian calendar, there are several regional calendar eras used around the world. The calendar property's value is set at construction time, either through the ca key of the locale identifier or through the calendar option of the Intl.Locale() constructor. The latter takes priority if they are both present; and if neither is present, the property has value undefined.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "getHourCycles": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getHourCycles",
            "title": "Intl.Locale.prototype.getHourCycles()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nThe getHourCycles() method of Intl.Locale instances returns a list of one or more unique hour cycle identifiers for this locale.\n\nNote:\nIn some versions of some browsers, this method was implemented as an accessor property called hourCycles. However, because it returns a new array on each access, it is now implemented as a method to prevent the situation of locale.hourCycles === locale.hourCycles returning false. Check the browser compatibility table for details.",
            "syntax": [],
            "parameters": [
              {
                "name": "h12",
                "description": "Hour system using 1\u00e2\u0080\u009312; corresponds to 'h' in patterns. The 12 hour clock, with midnight starting at 12:00 am. As used, for example, in the United States."
              },
              {
                "name": "h23",
                "description": "Hour system using 0\u00e2\u0080\u009323; corresponds to 'H' in patterns. The 24 hour clock, with midnight starting at 0:00."
              },
              {
                "name": "h11",
                "description": "Hour system using 0\u00e2\u0080\u009311; corresponds to 'K' in patterns. The 12 hour clock, with midnight starting at 0:00 am. Mostly used in Japan."
              },
              {
                "name": "h24",
                "description": "Hour system using 1\u00e2\u0080\u009324; corresponds to 'k' in pattern. The 24 hour clock, with midnight starting at 24:00. Not used anywhere."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "getNumberingSystems": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getNumberingSystems",
            "title": "Intl.Locale.prototype.getNumberingSystems()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nThe getNumberingSystems() method of Intl.Locale instances returns a list of one or more unique numbering system identifiers for this locale.\n\nNote:\nIn some versions of some browsers, this method was implemented as an accessor property called numberingSystems. However, because it returns a new array on each access, it is now implemented as a method to prevent the situation of locale.numberingSystems === locale.numberingSystems returning false. Check the browser compatibility table for details.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "maximize": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/maximize",
            "title": "Intl.Locale.prototype.maximize()",
            "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2020.\n\nThe maximize() method of Intl.Locale instances gets the\nmost likely values for the language, script, and region of this locale based on\nexisting values.\n\nNone.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "region": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/region",
            "title": "Intl.Locale.prototype.region",
            "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2020.\n\nThe region accessor property of Intl.Locale instances returns the region of the world (usually a country) associated with this locale.\n\nRegion is one of the core attributes of a locale. It allows selection for differences between the same language in, say, different countries. For example, English is spoken in the United Kingdom and the United States of America, but there are differences in spelling and other language conventions between those two countries. Knowing the locale's region helps JavaScript programmers make sure that the content from their sites and applications is correctly displayed when viewed from different areas of the world. The region property's value is set at construction time, either through the region subtag (third part if script is present, second part otherwise) of the locale identifier or through the region option of the Intl.Locale() constructor. The latter takes priority if they are both present; and if neither is present, the property has value undefined.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "script": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/script",
            "title": "Intl.Locale.prototype.script",
            "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2020.\n\nThe script accessor property of Intl.Locale instances returns the script used for writing the particular language used in this locale.\n\nScript, sometimes called writing system, is one of the core attributes of a locale. It indicates the set of symbols, or glyphs, that are used to write a particular language. For instance, the script associated with English is Latin, whereas the script typically associated with Korean is Hangul. In many cases, denoting a script is not strictly necessary, since the language (which is necessary) is only written in a single script. There are exceptions to this rule, however, and it is important to indicate the script when multiple scripts are applicable. The script property's value is set at construction time, either through the script subtag (second part, if present) of the locale identifier or through the script option of the Intl.Locale() constructor. The latter takes priority if they are both present; and if neither is present, the property has value undefined.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          }
        },
        "supportedValuesOf": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/supportedValuesOf#supported_calendar_types",
          "title": "Intl.supportedValuesOf()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since March 2022.\n\nThe Intl.supportedValuesOf() static method returns an array containing the supported calendar, collation, currency, numbering systems, or unit values supported by the implementation.\n\nDuplicates are omitted and the array is sorted in ascending lexicographical order (or more precisely, using Array.prototype.sort() with an undefined compare function).",
          "syntax": [],
          "parameters": [
            {
              "name": "key",
              "description": "A key string indicating the category of values to be returned. This is one of:\n\n\"calendar\": see supported calendar types\n\"collation\": see supported collation types\n\"currency\": see supported currency identifiers\n\"numberingSystem\": see supported numbering system types\n\"timeZone\": see supported time zone identifiers\n\"unit\": see supported unit identifiers"
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "RelativeTimeFormat": {
          "RelativeTimeFormat": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/RelativeTimeFormat",
            "title": "Intl.RelativeTimeFormat() constructor",
            "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2020.\n\nThe Intl.RelativeTimeFormat() constructor creates Intl.RelativeTimeFormat objects.\n\nNote: Intl.RelativeTimeFormat() can only be constructed with new. Attempting to call it without new throws a TypeError.",
            "syntax": [],
            "parameters": [
              {
                "name": "locales Optional",
                "description": "A string with a BCP 47 language tag or an Intl.Locale instance, or an array of such locale identifiers. The runtime's default locale is used when undefined is passed or when none of the specified locale identifiers is supported. For the general form and interpretation of the locales argument, see the parameter description on the Intl main page.\nThe following Unicode extension key is allowed:\n\nnu\n\nSee numberingSystem.\n\n\nThis key can also be set with options (as listed below). When both are set, the options property takes precedence."
              },
              {
                "name": "nu",
                "description": "See numberingSystem."
              },
              {
                "name": "options Optional",
                "description": "An object containing the following properties, in the order they are retrieved (all of them are optional):\n\nlocaleMatcher\n\nThe locale matching algorithm to use. Possible values are \"lookup\" and \"best fit\"; the default is \"best fit\". For information about this option, see Locale identification and negotiation.\n\nnumberingSystem\n\nThe numbering system to use for number formatting, such as \"arab\", \"hans\", \"mathsans\", and so on. For a list of supported numbering system types, see Intl.supportedValuesOf(). This option can also be set through the nu Unicode extension key; if both are provided, this options property takes precedence.\n\nstyle\n\nThe style of the formatted relative time. Possible values are:\n\n\"long\" (default)\n\nE.g., \"in 1 month\"\n\n\"short\"\n\nE.g., \"in 1 mo.\"\n\n\"narrow\"\n\nE.g., \"in 1 mo.\". The narrow style could be similar to the short style for some locales.\n\n\n\nnumeric\n\nWhether to use numeric values in the output. Possible values are \"always\" and \"auto\"; the default is \"always\". When set to \"auto\", the output may use more idiomatic phrasing such as \"yesterday\" instead of \"1 day ago\"."
              },
              {
                "name": "localeMatcher",
                "description": "The locale matching algorithm to use. Possible values are \"lookup\" and \"best fit\"; the default is \"best fit\". For information about this option, see Locale identification and negotiation."
              },
              {
                "name": "numberingSystem",
                "description": "The numbering system to use for number formatting, such as \"arab\", \"hans\", \"mathsans\", and so on. For a list of supported numbering system types, see Intl.supportedValuesOf(). This option can also be set through the nu Unicode extension key; if both are provided, this options property takes precedence."
              },
              {
                "name": "style",
                "description": "The style of the formatted relative time. Possible values are:\n\n\"long\" (default)\n\nE.g., \"in 1 month\"\n\n\"short\"\n\nE.g., \"in 1 mo.\"\n\n\"narrow\"\n\nE.g., \"in 1 mo.\". The narrow style could be similar to the short style for some locales."
              },
              {
                "name": "\"long\" (default)",
                "description": "E.g., \"in 1 month\""
              },
              {
                "name": "\"short\"",
                "description": "E.g., \"in 1 mo.\""
              },
              {
                "name": "\"narrow\"",
                "description": "E.g., \"in 1 mo.\". The narrow style could be similar to the short style for some locales."
              },
              {
                "name": "numeric",
                "description": "Whether to use numeric values in the output. Possible values are \"always\" and \"auto\"; the default is \"always\". When set to \"auto\", the output may use more idiomatic phrasing such as \"yesterday\" instead of \"1 day ago\"."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          }
        },
        "ListFormat": {
          "ListFormat": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat/ListFormat",
            "title": "Intl.ListFormat() constructor",
            "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since April 2021.\n\nThe Intl.ListFormat() constructor creates Intl.ListFormat objects.\n\nNote: Intl.ListFormat() can only be constructed with new. Attempting to call it without new throws a TypeError.",
            "syntax": [],
            "parameters": [
              {
                "name": "locales Optional",
                "description": "A string with a BCP 47 language tag or an Intl.Locale instance, or an array of such locale identifiers. The runtime's default locale is used when undefined is passed or when none of the specified locale identifiers is supported. For the general form and interpretation of the locales argument, see the parameter description on the Intl main page."
              },
              {
                "name": "options Optional",
                "description": "An object containing the following properties, in the order they are retrieved (all of them are optional):\n\nlocaleMatcher\n\nThe locale matching algorithm to use. Possible values are \"lookup\" and \"best fit\"; the default is \"best fit\". For information about this option, see Locale identification and negotiation.\n\ntype\n\nIndicates the type of grouping. Possible values are:\n\n\"conjunction\" (default)\n\nFor \"and\"-based grouping of the list items: \"A, B, and C\"\n\n\"disjunction\"\n\nFor \"or\"-based grouping of the list items: \"A, B, or C\"\n\n\"unit\"\n\nFor grouping the list items as a compound unit (neither \"and\"-based nor \"or\"-based): \"A, B, C\"\n\n\n\nstyle\n\nThe grouping style (for example, whether list separators and conjunctions are included). Possible values are:\n\n\"long\" (default)\n\nThe typical list format. For example, \"A, B, and C\"\n\n\"short\"\n\nThe spacing, the length or presence of a conjunction, and the separators may change. Usually, you would want the input elements to be abbreviated too. For example, \"A, B, & C\"\n\n\"narrow\"\n\nWhere possible, the list format is further abbreviated, so that the output is as short as possible. For example, \"A, B, C\""
              },
              {
                "name": "localeMatcher",
                "description": "The locale matching algorithm to use. Possible values are \"lookup\" and \"best fit\"; the default is \"best fit\". For information about this option, see Locale identification and negotiation."
              },
              {
                "name": "type",
                "description": "Indicates the type of grouping. Possible values are:\n\n\"conjunction\" (default)\n\nFor \"and\"-based grouping of the list items: \"A, B, and C\"\n\n\"disjunction\"\n\nFor \"or\"-based grouping of the list items: \"A, B, or C\"\n\n\"unit\"\n\nFor grouping the list items as a compound unit (neither \"and\"-based nor \"or\"-based): \"A, B, C\""
              },
              {
                "name": "\"conjunction\" (default)",
                "description": "For \"and\"-based grouping of the list items: \"A, B, and C\""
              },
              {
                "name": "\"disjunction\"",
                "description": "For \"or\"-based grouping of the list items: \"A, B, or C\""
              },
              {
                "name": "\"unit\"",
                "description": "For grouping the list items as a compound unit (neither \"and\"-based nor \"or\"-based): \"A, B, C\""
              },
              {
                "name": "style",
                "description": "The grouping style (for example, whether list separators and conjunctions are included). Possible values are:\n\n\"long\" (default)\n\nThe typical list format. For example, \"A, B, and C\"\n\n\"short\"\n\nThe spacing, the length or presence of a conjunction, and the separators may change. Usually, you would want the input elements to be abbreviated too. For example, \"A, B, & C\"\n\n\"narrow\"\n\nWhere possible, the list format is further abbreviated, so that the output is as short as possible. For example, \"A, B, C\""
              },
              {
                "name": "\"long\" (default)",
                "description": "The typical list format. For example, \"A, B, and C\""
              },
              {
                "name": "\"short\"",
                "description": "The spacing, the length or presence of a conjunction, and the separators may change. Usually, you would want the input elements to be abbreviated too. For example, \"A, B, & C\""
              },
              {
                "name": "\"narrow\"",
                "description": "Where possible, the list format is further abbreviated, so that the output is as short as possible. For example, \"A, B, C\""
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          }
        },
        "DateTimeFormat": {
          "formatRange": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/formatRange",
            "title": "Intl.DateTimeFormat.prototype.formatRange()",
            "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since August 2021.\n\nThe formatRange() method of Intl.DateTimeFormat instances formats a\ndate range in the most concise way based on the locales and\noptions provided when instantiating this\nIntl.DateTimeFormat object.\n\nThe start of the date range. Can be a Date or Temporal.PlainDateTime object. Additionally can be a Temporal.PlainTime, Temporal.PlainDate, Temporal.PlainYearMonth, or Temporal.PlainMonthDay object if the DateTimeFormat object was configured to print at least one relevant part of the date.",
            "syntax": [],
            "parameters": [
              {
                "name": "startDate",
                "description": "The start of the date range. Can be a Date or Temporal.PlainDateTime object. Additionally can be a Temporal.PlainTime, Temporal.PlainDate, Temporal.PlainYearMonth, or Temporal.PlainMonthDay object if the DateTimeFormat object was configured to print at least one relevant part of the date.\n\nNote:\nA Temporal.ZonedDateTime object will always throw a TypeError; use Temporal.ZonedDateTime.prototype.toLocaleString() or convert it to a Temporal.PlainDateTime object instead."
              },
              {
                "name": "endDate",
                "description": "The end of the date range. Must have the same type as startDate."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "DateTimeFormat": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#date-time_component_options",
            "title": "Intl.DateTimeFormat() constructor",
            "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2017.\n\nThe Intl.DateTimeFormat() constructor creates Intl.DateTimeFormat objects.\n\nNote: Intl.DateTimeFormat() can be called with or without new. Both create a new Intl.DateTimeFormat instance. However, there's a special behavior when it's called without new and the this value is another Intl.DateTimeFormat instance; see Return value.",
            "syntax": [],
            "parameters": [
              {
                "name": "locales Optional",
                "description": "A string with a BCP 47 language tag or an Intl.Locale instance, or an array of such locale identifiers. The runtime's default locale is used when undefined is passed or when none of the specified locale identifiers is supported. For the general form and interpretation of the locales argument, see the parameter description on the Intl main page.\nThe following Unicode extension keys are allowed:\n\nnu\n\nSee numberingSystem.\n\nca\n\nSee calendar.\n\nhc\n\nSee hourCycle.\n\n\nThese keys can also be set with options (as listed below). When both are set, the options property takes precedence."
              },
              {
                "name": "nu",
                "description": "See numberingSystem."
              },
              {
                "name": "ca",
                "description": "See calendar."
              },
              {
                "name": "hc",
                "description": "See hourCycle."
              },
              {
                "name": "options Optional",
                "description": "An object. For ease of reading, the property list is broken into sections based on their purposes, including locale options, date-time component options, and style shortcuts."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "supportedLocalesOf": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/supportedLocalesOf",
            "title": "Intl.DateTimeFormat.supportedLocalesOf()",
            "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2017.\n\nThe Intl.DateTimeFormat.supportedLocalesOf() static method returns an array containing those of the provided locales that are supported in date and time formatting without having to fall back to the runtime's default locale.\n\nA string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the locales argument, see the parameter description on the Intl main page.",
            "syntax": [],
            "parameters": [
              {
                "name": "locales",
                "description": "A string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the locales argument, see the parameter description on the Intl main page."
              },
              {
                "name": "options Optional",
                "description": "An object that may have the following property:\n\nlocaleMatcher\n\nThe locale matching algorithm to use. Possible values are \"lookup\" and \"best fit\"; the default is \"best fit\". For information about this option, see the Intl page."
              },
              {
                "name": "localeMatcher",
                "description": "The locale matching algorithm to use. Possible values are \"lookup\" and \"best fit\"; the default is \"best fit\". For information about this option, see the Intl page."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "resolvedOptions": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/resolvedOptions",
            "title": "Intl.DateTimeFormat.prototype.resolvedOptions()",
            "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2017.\n\nThe resolvedOptions() method of Intl.DateTimeFormat instances returns a new object with properties reflecting the options computed during initialization of this DateTimeFormat object.\n\nNone.",
            "syntax": [],
            "parameters": [
              {
                "name": "locale",
                "description": "The BCP 47 language tag for the locale actually used, determined by the locale negotiation process. Only the ca, hc, and nu Unicode extension keys, if requested, may be included in the output."
              },
              {
                "name": "calendar",
                "description": "The value provided for this property in the options argument, or using the Unicode extension key \"ca\", with default filled in as needed. It is a supported calendar type for this locale. The default is locale dependent."
              },
              {
                "name": "numberingSystem",
                "description": "The value provided for this property in the options argument, or using the Unicode extension key \"nu\", with default filled in as needed. It is a supported numbering system for this locale. The default is locale dependent."
              },
              {
                "name": "timeZone",
                "description": "The value provided for this property in the options argument, with default filled in as needed. It is an IANA time zone name. The default is the runtime's default time zone.\n\nNote:\nThe standardization of Temporal requires browsers to use the same identifier as originally specified, without canonicalization to a different alias. See time zones and offsets for more information."
              },
              {
                "name": "hourCycle Optional",
                "description": "The value provided for this property in the options argument, or using the Unicode extension key \"hc\", with default filled in as needed. If hour12 was provided in the options, then that overrides other hourCycle settings. It is only present if the resolved options also include hour or timeStyle. It is either \"h11\", \"h12\", \"h23\", or \"h24\". The default is locale dependent, although \"h24\" is never a default."
              },
              {
                "name": "hour12 Optional",
                "description": "Calculated from hourCycle. It is only present if the resolved options also include hour or timeStyle. It is true if hourCycle is \"h11\" or \"h12\", and false if hourCycle is \"h23\" or \"h24\"."
              },
              {
                "name": "weekday, era, year, month, day, dayPeriod, hour, minute, second, fractionalSecondDigits, timeZoneName Optional",
                "description": "The values resulting from format matching between the corresponding properties in the options argument and the available combinations and representations for date-time formatting in the selected locale. Some of these properties may not be present, indicating that the corresponding components will not be represented in formatted output. weekday, era, and dayPeriod are either \"narrow\", \"short\", or \"long\"; year, day, hour, minute, and second are either \"numeric\", \"2-digit\", or \"narrow\"; month is either \"numeric\", \"2-digit\", \"narrow\", \"short\", or \"long\"; fractionalSecondDigits is either 1, 2, or 3; timeZoneName is either \"short\", \"long\", \"shortOffset\", \"longOffset\", \"shortGeneric\", or \"longGeneric\".\nIf these properties were requested in options, the constructor prevents dateStyle and timeStyle from being specified, so the below group will never be present."
              },
              {
                "name": "dateStyle, timeStyle Optional",
                "description": "The values provided for these properties in the options argument. They are either \"full\", \"long\", \"medium\", \"short\", or \"none\". Some of these properties may not be present, indicating that the corresponding components will not be represented in formatted output.\nIf these properties were requested in options, the constructor prevents individual date time component options from being specified, so the above group will never be present.\n\nNote:\nAlthough dateStyle and timeStyle are shortcuts for individual date and time component styles, the exact (locale dependent) component styles they resolve to are not included in the resolved options. This ensures the result of resolvedOptions() can be passed directly to the Intl.DateTimeFormat() constructor (because an options object with both dateStyle or timeStyle and individual date or time component styles is not valid)."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "format": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format#using_format_with_map",
            "title": "Intl.DateTimeFormat.prototype.format()",
            "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2017.\n\nThe format() method of Intl.DateTimeFormat instances formats a date according to the locale and formatting options of this Intl.DateTimeFormat object.\n\nThe date to format. Can be a Date or Temporal.PlainDateTime object. Additionally can be a Temporal.PlainTime, Temporal.PlainDate, Temporal.PlainYearMonth, or Temporal.PlainMonthDay object if the DateTimeFormat object was configured to print at least one relevant part of the date.",
            "syntax": [],
            "parameters": [
              {
                "name": "date",
                "description": "The date to format. Can be a Date or Temporal.PlainDateTime object. Additionally can be a Temporal.PlainTime, Temporal.PlainDate, Temporal.PlainYearMonth, or Temporal.PlainMonthDay object if the DateTimeFormat object was configured to print at least one relevant part of the date.\n\nNote:\nA Temporal.ZonedDateTime object will always throw a TypeError; use Temporal.ZonedDateTime.prototype.toLocaleString() or convert it to a Temporal.PlainDateTime object instead.\n\nOmitting it results in formatting the current date (as returned by Date.now()), which could be slightly confusing, so it is advisable to always explicitly pass a date."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          }
        },
        "NumberFormat": {
          "formatRange": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/formatRange",
            "title": "Intl.NumberFormat.prototype.formatRange()",
            "description": "Since August 2023, this feature works across the latest devices and browser versions. This feature might not work in older devices or browsers.\n\nThe formatRange() method of Intl.NumberFormat instances formats a range of numbers according to the locale and formatting options of this Intl.NumberFormat object.\n\nA Number, BigInt, or string, to format. Strings are parsed in the same way as in number conversion, except that formatRange() will use the exact value that the string represents, avoiding loss of precision during implicitly conversion to a number.",
            "syntax": [],
            "parameters": [
              {
                "name": "startRange",
                "description": "A Number, BigInt, or string, to format. Strings are parsed in the same way as in number conversion, except that formatRange() will use the exact value that the string represents, avoiding loss of precision during implicitly conversion to a number."
              },
              {
                "name": "endRange",
                "description": "A Number, BigInt, or string, to format."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          }
        },
        "Segmenter": {
          "segment": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/segment",
            "title": "Intl.Segmenter.prototype.segment()",
            "description": "Since April 2024, this feature works across the latest devices and browser versions. This feature might not work in older devices or browsers.\n\nThe segment() method of Intl.Segmenter instances segments a string according to the locale and granularity of this Intl.Segmenter object.\n\nThe text to be segmented as a string.",
            "syntax": [],
            "parameters": [
              {
                "name": "input",
                "description": "The text to be segmented as a string."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          }
        },
        "Collator": {
          "Collator": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator/Collator#sensitivity",
            "title": "Intl.Collator() constructor",
            "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2017.\n\nThe Intl.Collator() constructor creates Intl.Collator objects.\n\nNote: Intl.Collator() can be called with or without new. Both create a new Intl.Collator instance.",
            "syntax": [],
            "parameters": [
              {
                "name": "locales Optional",
                "description": "A string with a BCP 47 language tag or an Intl.Locale instance, or an array of such locale identifiers. The runtime's default locale is used when undefined is passed or when none of the specified locale identifiers is supported. For the general form and interpretation of the locales argument, see the parameter description on the Intl main page.\nThe following Unicode extension keys are allowed:\n\nco\n\nSee collation.\n\nkn\n\nSee numeric.\n\nkf\n\nSee caseFirst.\n\n\nThese keys can also be set with options (as listed below). When both are set, the options property takes precedence."
              },
              {
                "name": "co",
                "description": "See collation."
              },
              {
                "name": "kn",
                "description": "See numeric."
              },
              {
                "name": "kf",
                "description": "See caseFirst."
              },
              {
                "name": "options Optional",
                "description": "An object containing the following properties, in the order they are retrieved (all of them are optional):\n\nusage\n\nWhether the comparison is for sorting a list of strings or fuzzy (for the Latin script diacritic-insensitive and case-insensitive) filtering a list of strings by key. Possible values are:\n\n\"sort\" (default)\n\nFor sorting a list of strings.\n\n\"search\"\n\nFor filtering a list of strings by testing each list item for a full-string match against a key. With \"search\", the caller should only pay attention to whether compare() returns zero or non-zero and should not distinguish the non-zero return values from each other. That is, it is inappropriate to use \"search\" for sorting/ordering.\n\n\n\nlocaleMatcher\n\nThe locale matching algorithm to use. Possible values are \"lookup\" and \"best fit\"; the default is \"best fit\". For information about this option, see Locale identification and negotiation.\n\ncollation\n\nVariant collations for certain locales, such as \"emoji\", \"pinyin\", \"stroke\", and so on. Only has an effect when usage is \"sort\" (because \"search\" is underlyingly its own collation type). For a list of supported collation types, see Intl.supportedValuesOf(); the default is \"default\". This option can also be set through the co Unicode extension key; if both are provided, this options property takes precedence.\n\nnumeric\n\nWhether numeric collation should be used, such that \"1\" < \"2\" < \"10\". Possible values are true and false; the default is false. This option can also be set through the kn Unicode extension key; if both are provided, this options property takes precedence.\n\ncaseFirst\n\nWhether upper case or lower case should sort first. Possible values are \"upper\", \"lower\", and \"false\" (use the locale's default); the default is \"false\". This option can also be set through the kf Unicode extension key; if both are provided, this options property takes precedence.\n\nsensitivity\n\nWhich differences in the strings should lead to non-zero result values. Possible values are:\n\n\"base\"\n\nOnly strings that differ in base letters compare as unequal. Examples: a \u00e2\u0089\u00a0 b, a = \u00c3\u00a1, a = A. In the Unicode collation algorithm, this is equivalent to the primary strength level.\n\n\"accent\"\n\nOnly strings that differ in base letters or accents and other diacritic marks compare as unequal. Examples: a \u00e2\u0089\u00a0 b, a \u00e2\u0089\u00a0 \u00c3\u00a1, a = A. In the Unicode collation algorithm, this is equivalent to the secondary strength level.\n\n\"case\"\n\nOnly strings that differ in base letters or case compare as unequal. Examples: a \u00e2\u0089\u00a0 b, a = \u00c3\u00a1, a \u00e2\u0089\u00a0 A. In the Unicode collation algorithm, this is equivalent to the primary strength level with case level handling.\n\n\"variant\"\n\nStrings that differ in base letters, accents and other diacritic marks, or case compare as unequal. Other differences may also be taken into consideration. Examples: a \u00e2\u0089\u00a0 b, a \u00e2\u0089\u00a0 \u00c3\u00a1, a \u00e2\u0089\u00a0 A. In the Unicode collation algorithm, this is equivalent to the tertiary strength level.\n\n\nThe default is \"variant\" for usage \"sort\"; it's locale dependent for usage \"search\" per spec, but is usually also \"variant\". Because the core functionality of \"search\" is accent-insensitive and case-insensitive filtering, setting it to \"base\" makes the most sense (and perhaps \"case\").\n\nignorePunctuation\n\nWhether punctuation should be ignored. Possible values are true and false. The default is true for Thai (th) and false for all other languages."
              },
              {
                "name": "usage",
                "description": "Whether the comparison is for sorting a list of strings or fuzzy (for the Latin script diacritic-insensitive and case-insensitive) filtering a list of strings by key. Possible values are:\n\n\"sort\" (default)\n\nFor sorting a list of strings.\n\n\"search\"\n\nFor filtering a list of strings by testing each list item for a full-string match against a key. With \"search\", the caller should only pay attention to whether compare() returns zero or non-zero and should not distinguish the non-zero return values from each other. That is, it is inappropriate to use \"search\" for sorting/ordering."
              },
              {
                "name": "\"sort\" (default)",
                "description": "For sorting a list of strings."
              },
              {
                "name": "\"search\"",
                "description": "For filtering a list of strings by testing each list item for a full-string match against a key. With \"search\", the caller should only pay attention to whether compare() returns zero or non-zero and should not distinguish the non-zero return values from each other. That is, it is inappropriate to use \"search\" for sorting/ordering."
              },
              {
                "name": "localeMatcher",
                "description": "The locale matching algorithm to use. Possible values are \"lookup\" and \"best fit\"; the default is \"best fit\". For information about this option, see Locale identification and negotiation."
              },
              {
                "name": "collation",
                "description": "Variant collations for certain locales, such as \"emoji\", \"pinyin\", \"stroke\", and so on. Only has an effect when usage is \"sort\" (because \"search\" is underlyingly its own collation type). For a list of supported collation types, see Intl.supportedValuesOf(); the default is \"default\". This option can also be set through the co Unicode extension key; if both are provided, this options property takes precedence."
              },
              {
                "name": "numeric",
                "description": "Whether numeric collation should be used, such that \"1\" < \"2\" < \"10\". Possible values are true and false; the default is false. This option can also be set through the kn Unicode extension key; if both are provided, this options property takes precedence."
              },
              {
                "name": "caseFirst",
                "description": "Whether upper case or lower case should sort first. Possible values are \"upper\", \"lower\", and \"false\" (use the locale's default); the default is \"false\". This option can also be set through the kf Unicode extension key; if both are provided, this options property takes precedence."
              },
              {
                "name": "sensitivity",
                "description": "Which differences in the strings should lead to non-zero result values. Possible values are:\n\n\"base\"\n\nOnly strings that differ in base letters compare as unequal. Examples: a \u00e2\u0089\u00a0 b, a = \u00c3\u00a1, a = A. In the Unicode collation algorithm, this is equivalent to the primary strength level.\n\n\"accent\"\n\nOnly strings that differ in base letters or accents and other diacritic marks compare as unequal. Examples: a \u00e2\u0089\u00a0 b, a \u00e2\u0089\u00a0 \u00c3\u00a1, a = A. In the Unicode collation algorithm, this is equivalent to the secondary strength level.\n\n\"case\"\n\nOnly strings that differ in base letters or case compare as unequal. Examples: a \u00e2\u0089\u00a0 b, a = \u00c3\u00a1, a \u00e2\u0089\u00a0 A. In the Unicode collation algorithm, this is equivalent to the primary strength level with case level handling.\n\n\"variant\"\n\nStrings that differ in base letters, accents and other diacritic marks, or case compare as unequal. Other differences may also be taken into consideration. Examples: a \u00e2\u0089\u00a0 b, a \u00e2\u0089\u00a0 \u00c3\u00a1, a \u00e2\u0089\u00a0 A. In the Unicode collation algorithm, this is equivalent to the tertiary strength level.\n\n\nThe default is \"variant\" for usage \"sort\"; it's locale dependent for usage \"search\" per spec, but is usually also \"variant\". Because the core functionality of \"search\" is accent-insensitive and case-insensitive filtering, setting it to \"base\" makes the most sense (and perhaps \"case\")."
              },
              {
                "name": "\"base\"",
                "description": "Only strings that differ in base letters compare as unequal. Examples: a \u00e2\u0089\u00a0 b, a = \u00c3\u00a1, a = A. In the Unicode collation algorithm, this is equivalent to the primary strength level."
              },
              {
                "name": "\"accent\"",
                "description": "Only strings that differ in base letters or accents and other diacritic marks compare as unequal. Examples: a \u00e2\u0089\u00a0 b, a \u00e2\u0089\u00a0 \u00c3\u00a1, a = A. In the Unicode collation algorithm, this is equivalent to the secondary strength level."
              },
              {
                "name": "\"case\"",
                "description": "Only strings that differ in base letters or case compare as unequal. Examples: a \u00e2\u0089\u00a0 b, a = \u00c3\u00a1, a \u00e2\u0089\u00a0 A. In the Unicode collation algorithm, this is equivalent to the primary strength level with case level handling."
              },
              {
                "name": "\"variant\"",
                "description": "Strings that differ in base letters, accents and other diacritic marks, or case compare as unequal. Other differences may also be taken into consideration. Examples: a \u00e2\u0089\u00a0 b, a \u00e2\u0089\u00a0 \u00c3\u00a1, a \u00e2\u0089\u00a0 A. In the Unicode collation algorithm, this is equivalent to the tertiary strength level."
              },
              {
                "name": "ignorePunctuation",
                "description": "Whether punctuation should be ignored. Possible values are true and false. The default is true for Thai (th) and false for all other languages."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          }
        }
      },
      "Int32Array": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
        "title": "Int32Array",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Int32Array typed array represents an array of 32-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0 unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n\nInt32Array is a subclass of the hidden TypedArray class.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": [],
        "Int32Array": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array/Int32Array",
          "title": "Int32Array() constructor",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Int32Array() constructor creates Int32Array objects. The contents are initialized to 0 unless initialization data is explicitly provided.\n\nNote: Int32Array() can only be constructed with new. Attempting to call it without new throws a TypeError.",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        }
      },
      "Int16Array": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
        "title": "Int16Array",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Int16Array typed array represents an array of 16-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0 unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n\nInt16Array is a subclass of the hidden TypedArray class.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": [],
        "Int16Array": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array/Int16Array",
          "title": "Int16Array() constructor",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Int16Array() constructor creates Int16Array objects. The contents are initialized to 0 unless initialization data is explicitly provided.\n\nNote: Int16Array() can only be constructed with new. Attempting to call it without new throws a TypeError.",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        }
      },
      "Map": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#map-like_browser_apis",
        "title": "Map",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nThe Map object holds key-value pairs and remembers the original insertion order of the keys.\nAny value (both objects and primitive values) may be used as either a key or a value.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Iterator": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator#iterator_helper_methods",
        "title": "Iterator",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\n* Some parts of this feature may have varying levels of support.\n\nAn Iterator object is an object that conforms to the iterator protocol by providing a next() method that returns an iterator result object. All built-in iterators inherit from the Iterator class. The Iterator class provides a [Symbol.iterator]() method that returns the iterator object itself, making the iterator also iterable. It also provides some helper methods for working with iterators.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "JSON": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON#using_json_numbers",
        "title": "JSON",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nThe JSON namespace object contains static methods for parsing values from and converting values to JavaScript Object Notation (JSON).",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": [],
        "stringify": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#the_replacer_parameter",
          "title": "JSON.stringify()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe JSON.stringify() static method converts a JavaScript value to a JSON string, optionally replacing values if a replacer function is specified or optionally including only the specified properties if a replacer array is specified.\n\nThe value to convert to a JSON string.",
          "syntax": [],
          "parameters": [
            {
              "name": "value",
              "description": "The value to convert to a JSON string."
            },
            {
              "name": "replacer Optional",
              "description": "A function that alters the behavior of the stringification process, or an array of strings and numbers that specifies properties of value to be included in the output. If replacer is an array, all elements in this array that are not strings or numbers (either primitives or wrapper objects), including Symbol values, are completely ignored. If replacer is anything other than a function or an array (e.g., null or not provided), all string-keyed properties of the object are included in the resulting JSON string."
            },
            {
              "name": "space Optional",
              "description": "A string or number that's used to insert white space (including indentation, line break characters, etc.) into the output JSON string for readability purposes.\nIf this is a number, it indicates the number of space characters to be used as indentation, clamped to 10 (that is, any number greater than 10 is treated as if it were 10). Values less than 1 indicate that no space should be used.\nIf this is a string, the string (or the first 10 characters of the string, if it's longer than that) is inserted before every nested object or array.\nIf space is anything other than a string or number (can be either a primitive or a wrapper object) \u00e2\u0080\u0094 for example, is null or not provided \u00e2\u0080\u0094 no white space is used."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "parse": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse#using_the_reviver_parameter",
          "title": "JSON.parse()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nThe JSON.parse() static method parses a JSON string, constructing the JavaScript value or object described by the string. An optional reviver function can be provided to perform a transformation on the resulting object before it is returned.",
          "syntax": [],
          "parameters": [
            {
              "name": "text",
              "description": "The string to parse as JSON. See the JSON object for a description of JSON syntax."
            },
            {
              "name": "reviver Optional",
              "description": "If a function, this prescribes how each value originally produced by parsing is transformed before being returned. Non-callable values are ignored. The function is called with the following arguments:\n\nkey\n\nThe key associated with the value.\n\nvalue\n\nThe value produced by parsing.\n\ncontext Optional\n\nA context object that holds state relevant to the current expression being revived. It is a new object for each invocation of the reviver function. It is only passed when reviving primitive values, but not when value is an object or array. It contains the following property:\n\nsource\n\nThe original JSON string representing this value."
            },
            {
              "name": "key",
              "description": "The key associated with the value."
            },
            {
              "name": "value",
              "description": "The value produced by parsing."
            },
            {
              "name": "context Optional",
              "description": "A context object that holds state relevant to the current expression being revived. It is a new object for each invocation of the reviver function. It is only passed when reviving primitive values, but not when value is an object or array. It contains the following property:\n\nsource\n\nThe original JSON string representing this value."
            },
            {
              "name": "source",
              "description": "The original JSON string representing this value."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "isRawJSON": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/isRawJSON",
          "title": "JSON.isRawJSON()",
          "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nThe JSON.isRawJSON() static method tests whether a value is an object returned by JSON.rawJSON().\n\nThe value to test.",
          "syntax": [],
          "parameters": [
            {
              "name": "value",
              "description": "The value to test."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "rawJSON": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/rawJSON",
          "title": "JSON.rawJSON()",
          "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nThe JSON.rawJSON() static method creates a \"raw JSON\" object containing a piece of JSON text. When serialized to JSON, the raw JSON object is treated as if it is already a piece of JSON. This text is required to be valid JSON.\n\nThe JSON text. Must be valid JSON representing a primitive value.",
          "syntax": [],
          "parameters": [
            {
              "name": "string",
              "description": "The JSON text. Must be valid JSON representing a primitive value."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        }
      },
      "isNaN": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN#description",
        "title": "isNaN()",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe isNaN() function determines whether a value is NaN, first converting the value to a number if necessary. Because coercion inside the isNaN() function can be surprising, you may prefer to use Number.isNaN().\n\nThe value to be tested.",
        "syntax": [],
        "parameters": [
          {
            "name": "value",
            "description": "The value to be tested."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "isFinite": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite",
        "title": "isFinite()",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe isFinite() function determines whether a value is finite, first converting the value to a number if necessary. A finite number is one that's not NaN or \u00c2\u00b1Infinity. Because coercion inside the isFinite() function can be surprising, you may prefer to use Number.isFinite().\n\nThe value to be tested.",
        "syntax": [],
        "parameters": [
          {
            "name": "value",
            "description": "The value to be tested."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Math": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math",
        "title": "Math",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nThe Math namespace object contains static properties and methods for mathematical constants and functions.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": [],
        "pow": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/pow",
          "title": "Math.pow()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Math.pow() static method returns the value of a base raised to a power. That is\n\nThe base number.",
          "syntax": [],
          "parameters": [
            {
              "name": "base",
              "description": "The base number."
            },
            {
              "name": "exponent",
              "description": "The exponent number."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "sinh": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sinh",
          "title": "Math.sinh()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Math.sinh() static method returns the hyperbolic sine of a number. That is,\n\nA number.",
          "syntax": [],
          "parameters": [
            {
              "name": "x",
              "description": "A number."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "log2": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log2",
          "title": "Math.log2()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Math.log2() static method returns the base 2 logarithm of a number. That is\n\nA number greater than or equal to 0.",
          "syntax": [],
          "parameters": [
            {
              "name": "x",
              "description": "A number greater than or equal to 0."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "log10": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log10",
          "title": "Math.log10()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Math.log10() static method returns the base 10 logarithm of a number. That is\n\nA number greater than or equal to 0.",
          "syntax": [],
          "parameters": [
            {
              "name": "x",
              "description": "A number greater than or equal to 0."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "sqrt": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sqrt",
          "title": "Math.sqrt()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Math.sqrt() static method returns the square root of a number. That is\n\nA number greater than or equal to 0.",
          "syntax": [],
          "parameters": [
            {
              "name": "x",
              "description": "A number greater than or equal to 0."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "atan": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atan",
          "title": "Math.atan()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Math.atan() static method returns the inverse tangent (in radians) of a number, that is\n\nA number.",
          "syntax": [],
          "parameters": [
            {
              "name": "x",
              "description": "A number."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "cosh": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cosh",
          "title": "Math.cosh()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Math.cosh() static method returns the hyperbolic cosine of a number. That is,\n\nA number.",
          "syntax": [],
          "parameters": [
            {
              "name": "x",
              "description": "A number."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "abs": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/abs",
          "title": "Math.abs()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Math.abs() static method returns the absolute value of a number.\n\nA number.",
          "syntax": [],
          "parameters": [
            {
              "name": "x",
              "description": "A number."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "cbrt": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cbrt",
          "title": "Math.cbrt()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Math.cbrt() static method returns the cube root of a number. That is\n\nA number.",
          "syntax": [],
          "parameters": [
            {
              "name": "x",
              "description": "A number."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "asinh": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/asinh",
          "title": "Math.asinh()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Math.asinh() static method returns the inverse hyperbolic sine of a number. That is,\n\nA number.",
          "syntax": [],
          "parameters": [
            {
              "name": "x",
              "description": "A number."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "acos": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/acos",
          "title": "Math.acos()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Math.acos() static method returns the inverse cosine (in radians) of a number. That is,\n\nA number between -1 and 1, inclusive, representing the angle's cosine value.",
          "syntax": [],
          "parameters": [
            {
              "name": "x",
              "description": "A number between -1 and 1, inclusive, representing the angle's cosine value."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "ceil": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil",
          "title": "Math.ceil()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Math.ceil() static method always rounds up and returns the smallest integer greater than or equal to a given number.\n\nA number.",
          "syntax": [],
          "parameters": [
            {
              "name": "x",
              "description": "A number."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "fround": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround",
          "title": "Math.fround()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Math.fround() static method returns the nearest 32-bit single precision float representation of a number.\n\nA number.",
          "syntax": [],
          "parameters": [
            {
              "name": "doubleFloat",
              "description": "A number."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "exp": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/exp",
          "title": "Math.exp()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Math.exp() static method returns e raised to the power of a number. That is\n\nA number.",
          "syntax": [],
          "parameters": [
            {
              "name": "x",
              "description": "A number."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "cos": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cos",
          "title": "Math.cos()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Math.cos() static method returns the cosine of a number in radians.\n\nA number representing an angle in radians.",
          "syntax": [],
          "parameters": [
            {
              "name": "x",
              "description": "A number representing an angle in radians."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "log1p": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log1p",
          "title": "Math.log1p()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Math.log1p() static method returns the natural logarithm (base e) of 1 + x, where x is the argument. That is:\n\nA number greater than or equal to -1.",
          "syntax": [],
          "parameters": [
            {
              "name": "x",
              "description": "A number greater than or equal to -1."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "sin": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sin",
          "title": "Math.sin()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Math.sin() static method returns the sine of a number in radians.\n\nA number representing an angle in radians.",
          "syntax": [],
          "parameters": [
            {
              "name": "x",
              "description": "A number representing an angle in radians."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "tanh": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/tanh",
          "title": "Math.tanh()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Math.tanh() static method returns the hyperbolic tangent of a number. That is,\n\nA number.",
          "syntax": [],
          "parameters": [
            {
              "name": "x",
              "description": "A number."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "min": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/min",
          "title": "Math.min()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Math.min() static method returns the smallest of the numbers given as input parameters, or Infinity if there are no parameters.\n\nZero or more numbers among which the lowest value will be selected and returned.",
          "syntax": [],
          "parameters": [
            {
              "name": "value1, \u00e2\u0080\u00a6, valueN",
              "description": "Zero or more numbers among which the lowest value will be selected and returned."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "clz32": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32",
          "title": "Math.clz32()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Math.clz32() static method returns the number of leading zero bits in the 32-bit binary representation of a number.\n\nA number.",
          "syntax": [],
          "parameters": [
            {
              "name": "x",
              "description": "A number."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "max": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/max",
          "title": "Math.max()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Math.max() static method returns the largest of the numbers given as input parameters, or -Infinity if there are no parameters.\n\nZero or more numbers among which the largest value will be selected and returned.",
          "syntax": [],
          "parameters": [
            {
              "name": "value1, \u00e2\u0080\u00a6, valueN",
              "description": "Zero or more numbers among which the largest value will be selected and returned."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "log": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log",
          "title": "Math.log()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Math.log() static method returns the natural logarithm (base e) of a number. That is\n\nA number greater than or equal to 0.",
          "syntax": [],
          "parameters": [
            {
              "name": "x",
              "description": "A number greater than or equal to 0."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "tan": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/tan",
          "title": "Math.tan()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Math.tan() static method returns the tangent of a number in radians.\n\nA number representing an angle in radians.",
          "syntax": [],
          "parameters": [
            {
              "name": "x",
              "description": "A number representing an angle in radians."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "trunc": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc#using_bitwise_no-ops_to_truncate_numbers",
          "title": "Math.trunc()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Math.trunc() static method returns the integer part of a number by removing any fractional digits.\n\nA number.",
          "syntax": [],
          "parameters": [
            {
              "name": "x",
              "description": "A number."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "hypot": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/hypot",
          "title": "Math.hypot()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Math.hypot() static method returns the square root of the sum of squares of its arguments. That is,\n\nNumbers.",
          "syntax": [],
          "parameters": [
            {
              "name": "value1, \u00e2\u0080\u00a6, valueN",
              "description": "Numbers."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "atan2": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atan2",
          "title": "Math.atan2()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Math.atan2() static method returns the angle in the plane (in radians) between the positive x-axis and the ray from (0, 0) to the point (x, y), for Math.atan2(y, x).\n\nThe y coordinate of the point.",
          "syntax": [],
          "parameters": [
            {
              "name": "y",
              "description": "The y coordinate of the point."
            },
            {
              "name": "x",
              "description": "The x coordinate of the point."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "expm1": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/expm1",
          "title": "Math.expm1()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Math.expm1() static method returns e raised to the power of a number, subtracted by 1. That is\n\nA number.",
          "syntax": [],
          "parameters": [
            {
              "name": "x",
              "description": "A number."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "sign": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign",
          "title": "Math.sign()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2015.\n\nThe Math.sign() static method returns 1 or -1, indicating the sign of the number passed as argument. If the input is 0 or -0, it will be returned as-is.\n\nA number.",
          "syntax": [],
          "parameters": [
            {
              "name": "x",
              "description": "A number."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "floor": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor",
          "title": "Math.floor()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Math.floor() static method always rounds down and returns the largest integer less than or equal to a given number.\n\nA number.",
          "syntax": [],
          "parameters": [
            {
              "name": "x",
              "description": "A number."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "round": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round",
          "title": "Math.round()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Math.round() static method returns the value of a number rounded to the nearest integer.\n\nA number.",
          "syntax": [],
          "parameters": [
            {
              "name": "x",
              "description": "A number."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "random": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random",
          "title": "Math.random()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Math.random() static method returns a floating-point, pseudo-random number that's greater than or equal to 0 and less than 1, with approximately uniform distribution over that range \u00e2\u0080\u0094 which you can then scale to your desired range. The implementation selects the initial seed to the random number generation algorithm; it cannot be chosen or reset by the user.\n\nNote: Math.random() does not provide cryptographically secure random numbers. Do not use them for anything related to security. Use the Web Crypto API instead, and more precisely the Crypto.getRandomValues() method.",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "imul": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul",
          "title": "Math.imul()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Math.imul() static method returns the result of the C-like 32-bit multiplication of the two parameters.\n\nFirst number.",
          "syntax": [],
          "parameters": [
            {
              "name": "a",
              "description": "First number."
            },
            {
              "name": "b",
              "description": "Second number."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "asin": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/asin",
          "title": "Math.asin()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Math.asin() static method returns the inverse sine (in radians) of a number. That is,\n\nA number between -1 and 1, inclusive, representing the angle's sine value.",
          "syntax": [],
          "parameters": [
            {
              "name": "x",
              "description": "A number between -1 and 1, inclusive, representing the angle's sine value."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "atanh": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atanh",
          "title": "Math.atanh()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Math.atanh() static method returns the inverse hyperbolic tangent of a number. That is,\n\nA number between -1 and 1, inclusive.",
          "syntax": [],
          "parameters": [
            {
              "name": "x",
              "description": "A number between -1 and 1, inclusive."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "LN2": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/LN2",
          "title": "Math.LN2",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Math.LN2 static data property represents the natural logarithm of 2, approximately 0.693:\n\nBecause LN2 is a static property of Math, you always use it as Math.LN2, rather than as a property of a Math object you created (Math is not a constructor).",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "SQRT1 2": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/SQRT1_2",
          "title": "Math.SQRT1_2",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Math.SQRT1_2 static data property represents the square root of 1/2, which is approximately 0.707.\n\nMath.SQRT1_2 is a constant and a more performant equivalent to Math.sqrt(0.5).",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "PI": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/PI",
          "title": "Math.PI",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Math.PI static data property represents the ratio of the circumference of a circle to its diameter, approximately 3.14159.\n\nBecause PI is a static property of Math, you always use it as Math.PI, rather than as a property of a Math object you created (Math is not a constructor).",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "sumPrecise": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sumPrecise",
          "title": "Math.sumPrecise()",
          "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe Math.sumPrecise() static method takes an iterable of numbers and returns the sum of them. It is more precise than summing them up in a loop, because it avoids floating point precision loss in intermediate results.",
          "syntax": [],
          "parameters": [
            {
              "name": "numbers",
              "description": "An iterable (such as an Array) of numbers."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "LOG10E": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/LOG10E",
          "title": "Math.LOG10E",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Math.LOG10E static data property represents the base 10 logarithm of e, approximately 0.434.\n\nBecause LOG10E is a static property of Math, you always use it as Math.LOG10E, rather than as a property of a Math object you created (Math is not a constructor).",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "LN10": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/LN10",
          "title": "Math.LN10",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Math.LN10 static data property represents the natural logarithm of 10, approximately 2.303.\n\nBecause LN10 is a static property of Math, you always use it as Math.LN10, rather than as a property of a Math object you created (Math is not a constructor).",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "E": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/E",
          "title": "Math.E",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Math.E static data property represents Euler's number, the base of natural logarithms, e, which is approximately 2.718.\n\nBecause E is a static property of Math, you always use it as Math.E, rather than as a property of a Math object you created (Math is not a constructor).",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "SQRT2": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/SQRT2",
          "title": "Math.SQRT2",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Math.SQRT2 static data property represents the square root of 2, approximately 1.414.\n\nMath.SQRT2 is a constant and a more performant equivalent to Math.sqrt(2).",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "f16round": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/f16round",
          "title": "Math.f16round()",
          "description": "Since April 2025, this feature works across the latest devices and browser versions. This feature might not work in older devices or browsers.\n\nThe Math.f16round() static method returns the nearest 16-bit half precision float representation of a number.\n\nA number.",
          "syntax": [],
          "parameters": [
            {
              "name": "doubleFloat",
              "description": "A number."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "LOG2E": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/LOG2E",
          "title": "Math.LOG2E",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Math.LOG2E static data property represents the base 2 logarithm of e, approximately 1.443.\n\nBecause LOG2E is a static property of Math, you always use it as Math.LOG2E, rather than as a property of a Math object you created (Math is not a constructor).",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        }
      },
      "Object": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects",
        "title": "Object",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nThe Object type represents one of JavaScript's data types. It is used to store various keyed collections and more complex entities. Objects can be created using the Object() constructor or the object initializer / literal syntax.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": [],
        "defineProperty": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty#writable_attribute",
          "title": "Object.defineProperty()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Object.defineProperty() static method defines a new property directly on an object, or modifies an existing property on an object, and returns the object.\n\nThe object on which to define the property.",
          "syntax": [],
          "parameters": [
            {
              "name": "obj",
              "description": "The object on which to define the property."
            },
            {
              "name": "prop",
              "description": "A string or Symbol specifying the key of the property to be defined or modified."
            },
            {
              "name": "descriptor",
              "description": "The descriptor for the property being defined or modified."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        }
      },
      "Number": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#fixed-width_number_conversion",
        "title": "Number",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nNumber values represent floating-point numbers like 37 or -9.25.\n\nThe Number constructor contains constants and methods for working with numbers. Values of other types can be converted to numbers using the Number() function.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "parseFloat": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseFloat",
        "title": "parseFloat()",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe parseFloat() function parses a string argument and returns a floating point number.\n\nThe value to parse, coerced to a string. Leading whitespace in this argument is ignored.",
        "syntax": [],
        "parameters": [
          {
            "name": "string",
            "description": "The value to parse, coerced to a string. Leading whitespace in this argument is ignored."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "NaN": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
        "title": "NaN",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe NaN global property is a value representing Not-A-Number.\n\nThe same number value as Number.NaN.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "ReferenceError": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
        "title": "ReferenceError",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nThe ReferenceError object represents an error when a variable that doesn't exist (or hasn't yet been initialized) in the current scope is referenced.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": [],
        "ReferenceError": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError/ReferenceError",
          "title": "ReferenceError() constructor",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe ReferenceError() constructor creates ReferenceError objects.\n\nNote: ReferenceError() can be called with or without new. Both create a new ReferenceError instance.",
          "syntax": [],
          "parameters": [
            {
              "name": "message Optional",
              "description": "Human-readable description of the error."
            },
            {
              "name": "options Optional",
              "description": "An object that has the following properties:\n\ncause Optional\n\nA property indicating the specific cause of the error.\nWhen catching and re-throwing an error with a more-specific or useful error message, this property can be used to pass the original error."
            },
            {
              "name": "cause Optional",
              "description": "A property indicating the specific cause of the error.\nWhen catching and re-throwing an error with a more-specific or useful error message, this property can be used to pass the original error."
            },
            {
              "name": "fileName Optional \nNon-standard",
              "description": "The name of the file containing the code that caused the exception."
            },
            {
              "name": "lineNumber Optional \nNon-standard",
              "description": "The line number of the code that caused the exception"
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        }
      },
      "parseInt": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt",
        "title": "parseInt()",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe parseInt() function parses a string argument and returns an integer of the specified radix (the base in mathematical numeral systems).\n\nA string starting with an integer. Leading whitespace in this argument is ignored.",
        "syntax": [],
        "parameters": [
          {
            "name": "string",
            "description": "A string starting with an integer. Leading whitespace in this argument is ignored."
          },
          {
            "name": "radix Optional",
            "description": "An integer between 2 and 36 that represents the radix (the base in mathematical numeral systems) of the string. It is converted to a 32-bit integer; if it's nonzero and outside the range of [2, 36] after conversion, the function will always return NaN. If 0 or not provided, the radix will be inferred based on string's value. Be careful \u00e2\u0080\u0094 this does not always default to 10! The description below explains in more detail what happens when radix is not provided."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Proxy": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods",
        "title": "Proxy",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nThe Proxy object enables you to create a proxy for another object, which can intercept and redefine fundamental operations for that object.\n\nThe Proxy object allows you to create an object that can be used in place of the original object, but which may redefine fundamental Object operations like getting, setting, and defining properties. Proxy objects are commonly used to log property accesses, validate, format, or sanitize inputs, and so on.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "RangeError": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
        "title": "RangeError",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nThe RangeError object indicates an error when a value is not in the set or range of allowed values.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": [],
        "RangeError": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError/RangeError",
          "title": "RangeError() constructor",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe RangeError() constructor creates RangeError objects.\n\nNote: RangeError() can be called with or without new. Both create a new RangeError instance.",
          "syntax": [],
          "parameters": [
            {
              "name": "message Optional",
              "description": "Human-readable description of the error."
            },
            {
              "name": "options Optional",
              "description": "An object that has the following properties:\n\ncause Optional\n\nA property indicating the specific cause of the error.\nWhen catching and re-throwing an error with a more-specific or useful error message, this property can be used to pass the original error."
            },
            {
              "name": "cause Optional",
              "description": "A property indicating the specific cause of the error.\nWhen catching and re-throwing an error with a more-specific or useful error message, this property can be used to pass the original error."
            },
            {
              "name": "fileName Optional \nNon-standard",
              "description": "The name of the file containing the code that caused the exception"
            },
            {
              "name": "lineNumber Optional \nNon-standard",
              "description": "The line number of the code that caused the exception"
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        }
      },
      "Promise": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise#thenables",
        "title": "Promise",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nThe Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": [],
        "Promise": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/Promise#the_resolve_function",
          "title": "Promise() constructor",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Promise() constructor creates Promise objects. It is primarily used to wrap callback-based APIs that do not already support promises.\n\nNote: Promise() can only be constructed with new. Attempting to call it without new throws a TypeError.",
          "syntax": [],
          "parameters": [
            {
              "name": "executor",
              "description": "A function to be executed by the constructor. It receives two functions as parameters: resolveFunc and rejectFunc. Any errors thrown in the executor will cause the promise to be rejected, and the return value will be neglected. The semantics of executor are detailed below."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        }
      },
      "Set": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set#set-like_browser_apis",
        "title": "Set",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nThe Set object lets you store unique values of any type, whether primitive values or object references.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": [],
        "values": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/values",
          "title": "Set.prototype.values()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe values() method of Set instances returns a new set iterator object that contains the values for each element in this set in insertion order.\n\nNone.",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "entries": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/entries",
          "title": "Set.prototype.entries()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe entries() method of Set instances returns a new set iterator object that contains an array of [value, value] for each element in this set, in insertion order. For Set objects there is no key like in Map objects. However, to keep the API similar to the Map object, each entry has the same value for its key and value here, so that an array [value, value] is returned.\n\nNone.",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "isDisjointFrom": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/isDisjointFrom",
          "title": "Set.prototype.isDisjointFrom()",
          "description": "Since June 2024, this feature works across the latest devices and browser versions. This feature might not work in older devices or browsers.\n\nThe isDisjointFrom() method of Set instances takes a set and returns a boolean indicating if this set has no elements in common with the given set.\n\nA Set object, or set-like object.",
          "syntax": [],
          "parameters": [
            {
              "name": "other",
              "description": "A Set object, or set-like object."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "add": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/add",
          "title": "Set.prototype.add()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe add() method of Set instances inserts a new element with a specified value in to this set, if there isn't an element with the same value already in this set\n\nThe value of the element to add to the Set object.",
          "syntax": [],
          "parameters": [
            {
              "name": "value",
              "description": "The value of the element to add to the Set object."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "delete": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/delete",
          "title": "Set.prototype.delete()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe delete() method of Set instances removes a specified value from this set, if it is in the set.\n\nThe value to remove from Set.",
          "syntax": [],
          "parameters": [
            {
              "name": "value",
              "description": "The value to remove from Set."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "forEach": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/forEach",
          "title": "Set.prototype.forEach()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe forEach() method of Set instances executes a provided function once\nfor each value in this set, in insertion order.\n\nA function to execute for each entry in the set. The function is called with the following arguments:",
          "syntax": [],
          "parameters": [
            {
              "name": "callback",
              "description": "A function to execute for each entry in the set. The function is called with the following arguments:\n\nvalue\n\nValue of each iteration.\n\nkey\n\nKey of each iteration. This is always the same as value.\n\nset\n\nThe set being iterated."
            },
            {
              "name": "value",
              "description": "Value of each iteration."
            },
            {
              "name": "key",
              "description": "Key of each iteration. This is always the same as value."
            },
            {
              "name": "set",
              "description": "The set being iterated."
            },
            {
              "name": "thisArg Optional",
              "description": "A value to use as this when executing callbackFn."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "isSupersetOf": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/isSupersetOf",
          "title": "Set.prototype.isSupersetOf()",
          "description": "Since June 2024, this feature works across the latest devices and browser versions. This feature might not work in older devices or browsers.\n\nThe isSupersetOf() method of Set instances takes a set and returns a boolean indicating if all elements of the given set are in this set.\n\nA Set object, or set-like object.",
          "syntax": [],
          "parameters": [
            {
              "name": "other",
              "description": "A Set object, or set-like object."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "size": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/size",
          "title": "Set.prototype.size",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe size accessor property of Set instances returns the number of (unique) elements in this set.\n\nThe value of size is an integer representing how many entries the Set object has. A set accessor function for size is undefined; you cannot change this property.",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "symmetricDifference": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/symmetricDifference",
          "title": "Set.prototype.symmetricDifference()",
          "description": "Since June 2024, this feature works across the latest devices and browser versions. This feature might not work in older devices or browsers.\n\nThe symmetricDifference() method of Set instances takes a set and returns a new set containing elements which are in either this set or the given set, but not in both.\n\nA Set object, or set-like object.",
          "syntax": [],
          "parameters": [
            {
              "name": "other",
              "description": "A Set object, or set-like object."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "union": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/union",
          "title": "Set.prototype.union()",
          "description": "Since June 2024, this feature works across the latest devices and browser versions. This feature might not work in older devices or browsers.\n\nThe union() method of Set instances takes a set and returns a new set containing elements which are in either or both of this set and the given set.\n\nA Set object, or set-like object.",
          "syntax": [],
          "parameters": [
            {
              "name": "other",
              "description": "A Set object, or set-like object."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "Symbol.species": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/Symbol.species",
          "title": "Set[Symbol.species]",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nThe Set[Symbol.species] static accessor property is an unused accessor property specifying how to copy Set objects.\n\nThe value of the constructor (this) on which get [Symbol.species] was called. The return value is used to construct copied Set instances.",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "intersection": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/intersection",
          "title": "Set.prototype.intersection()",
          "description": "Since June 2024, this feature works across the latest devices and browser versions. This feature might not work in older devices or browsers.\n\nThe intersection() method of Set instances takes a set and returns a new set containing elements in both this set and the given set.\n\nA Set object, or set-like object.",
          "syntax": [],
          "parameters": [
            {
              "name": "other",
              "description": "A Set object, or set-like object."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "clear": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/clear",
          "title": "Set.prototype.clear()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe clear() method of Set instances removes all elements from this set.\n\nNone.",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "difference": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/difference",
          "title": "Set.prototype.difference()",
          "description": "Since June 2024, this feature works across the latest devices and browser versions. This feature might not work in older devices or browsers.\n\nThe difference() method of Set instances takes a set and returns a new set containing elements in this set but not in the given set.\n\nA Set object, or set-like object.",
          "syntax": [],
          "parameters": [
            {
              "name": "other",
              "description": "A Set object, or set-like object."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "Set": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/Set",
          "title": "Set() constructor",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Set() constructor creates Set objects.\n\nNote: Set() can only be constructed with new. Attempting to call it without new throws a TypeError.",
          "syntax": [],
          "parameters": [
            {
              "name": "iterable Optional",
              "description": "If an iterable object is passed, all of its elements will be added to the new\nSet.\nIf you don't specify this parameter, or its value is null, the new\nSet is empty."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "has": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/has",
          "title": "Set.prototype.has()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe has() method of Set instances returns a boolean indicating whether an\nelement with the specified value exists in this set or not.\n\nThe value to test for presence in the Set object.",
          "syntax": [],
          "parameters": [
            {
              "name": "value",
              "description": "The value to test for presence in the Set object."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "isSubsetOf": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/isSubsetOf",
          "title": "Set.prototype.isSubsetOf()",
          "description": "Since June 2024, this feature works across the latest devices and browser versions. This feature might not work in older devices or browsers.\n\nThe isSubsetOf() method of Set instances takes a set and returns a boolean indicating if all elements of this set are in the given set.\n\nA Set object, or set-like object.",
          "syntax": [],
          "parameters": [
            {
              "name": "other",
              "description": "A Set object, or set-like object."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        }
      },
      "Reflect": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
        "title": "Reflect",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nThe Reflect namespace object contains static methods for invoking interceptable JavaScript object internal methods. The methods are the same as those of proxy handlers.\n\nUnlike most global objects, Reflect is not a constructor. You cannot use it with the new operator or invoke the Reflect object as a function. All properties and methods of Reflect are static (just like the Math object).",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": [],
        "apply": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/apply",
          "title": "Reflect.apply()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nThe Reflect.apply() static method calls a target function with arguments as specified.\n\nThe target function to call.",
          "syntax": [],
          "parameters": [
            {
              "name": "target",
              "description": "The target function to call."
            },
            {
              "name": "thisArgument",
              "description": "The value of this provided for the call to target."
            },
            {
              "name": "argumentsList",
              "description": "An array-like object specifying the arguments with which target should be called."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "ownKeys": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/ownKeys",
          "title": "Reflect.ownKeys()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nThe Reflect.ownKeys() static method returns an array of the target object's own property keys.\n\nThe target object from which to get the own keys.",
          "syntax": [],
          "parameters": [
            {
              "name": "target",
              "description": "The target object from which to get the own keys."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "getOwnPropertyDescriptor": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/getOwnPropertyDescriptor",
          "title": "Reflect.getOwnPropertyDescriptor()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nThe Reflect.getOwnPropertyDescriptor() static method is like Object.getOwnPropertyDescriptor(). It returns a property descriptor of the given property if it exists on the object, undefined otherwise.\n\nThe target object in which to look for the property.",
          "syntax": [],
          "parameters": [
            {
              "name": "target",
              "description": "The target object in which to look for the property."
            },
            {
              "name": "propertyKey",
              "description": "The name of the property to get an own property descriptor for."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "isExtensible": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/isExtensible",
          "title": "Reflect.isExtensible()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nThe Reflect.isExtensible() static method is like Object.isExtensible(). It determines if an object is extensible (whether it can have new properties added to it).\n\nThe target object which to check if it is extensible.",
          "syntax": [],
          "parameters": [
            {
              "name": "target",
              "description": "The target object which to check if it is extensible."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "setPrototypeOf": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/setPrototypeOf",
          "title": "Reflect.setPrototypeOf()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nThe Reflect.setPrototypeOf() static method is like Object.setPrototypeOf() but returns a Boolean. It sets the prototype (i.e., the internal [[Prototype]] property) of a specified object.\n\nThe target object of which to set the prototype.",
          "syntax": [],
          "parameters": [
            {
              "name": "target",
              "description": "The target object of which to set the prototype."
            },
            {
              "name": "prototype",
              "description": "The object's new prototype (an object or null)."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "defineProperty": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/defineProperty",
          "title": "Reflect.defineProperty()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nThe Reflect.defineProperty() static method is like Object.defineProperty() but returns a Boolean.\n\nThe target object on which to define the property.",
          "syntax": [],
          "parameters": [
            {
              "name": "target",
              "description": "The target object on which to define the property."
            },
            {
              "name": "propertyKey",
              "description": "The name of the property to be defined or modified."
            },
            {
              "name": "attributes",
              "description": "The attributes for the property being defined or modified."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "get": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/get",
          "title": "Reflect.get()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nThe Reflect.get() static method is like the property accessor syntax, but as a function.\n\nThe target object on which to get the property.",
          "syntax": [],
          "parameters": [
            {
              "name": "target",
              "description": "The target object on which to get the property."
            },
            {
              "name": "propertyKey",
              "description": "The name of the property to get."
            },
            {
              "name": "receiver Optional",
              "description": "The value of this provided for the call to target if a getter is encountered."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "preventExtensions": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/preventExtensions",
          "title": "Reflect.preventExtensions()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nThe Reflect.preventExtensions() static method is like Object.preventExtensions(). It prevents new properties from ever being added to an object (i.e., prevents future extensions to the object).\n\nThe target object on which to prevent extensions.",
          "syntax": [],
          "parameters": [
            {
              "name": "target",
              "description": "The target object on which to prevent extensions."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "construct": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/construct",
          "title": "Reflect.construct()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nThe Reflect.construct() static method is like the new operator, but as a function. It is equivalent to calling new target(...args). It additionally allows to specify a different new.target value.\n\nThe target function to call.",
          "syntax": [],
          "parameters": [
            {
              "name": "target",
              "description": "The target function to call."
            },
            {
              "name": "argumentsList",
              "description": "An array-like object specifying the arguments with which target should be called."
            },
            {
              "name": "newTarget Optional",
              "description": "The value of the new.target expression inside target. Defaults to target. Generally (see example), target specifies the logic to initialize the object, while newTarget.prototype specifies the prototype of the constructed object."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "has": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/has",
          "title": "Reflect.has()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nThe Reflect.has() static method is like the in operator, but\nas a function.\n\nThe target object in which to look for the property.",
          "syntax": [],
          "parameters": [
            {
              "name": "target",
              "description": "The target object in which to look for the property."
            },
            {
              "name": "propertyKey",
              "description": "The name of the property to check."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "deleteProperty": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/deleteProperty",
          "title": "Reflect.deleteProperty()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nThe Reflect.deleteProperty() static method is like the delete operator, but as a function. It deletes a property from an object.\n\nThe target object on which to delete the property.",
          "syntax": [],
          "parameters": [
            {
              "name": "target",
              "description": "The target object on which to delete the property."
            },
            {
              "name": "propertyKey",
              "description": "The name of the property to be deleted."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "set": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/set",
          "title": "Reflect.set()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nThe Reflect.set() static method is like the property accessor and assignment syntax, but as a function.\n\nThe target object on which to set the property.",
          "syntax": [],
          "parameters": [
            {
              "name": "target",
              "description": "The target object on which to set the property."
            },
            {
              "name": "propertyKey",
              "description": "The name of the property to set."
            },
            {
              "name": "value",
              "description": "The value to set."
            },
            {
              "name": "receiver Optional",
              "description": "The value of this provided for the call to the setter for propertyKey on target. If provided and target does not have a setter for propertyKey, the property will be set on receiver instead."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "getPrototypeOf": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/getPrototypeOf",
          "title": "Reflect.getPrototypeOf()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nThe Reflect.getPrototypeOf() static method is like Object.getPrototypeOf(). It returns the prototype of the specified object.\n\nThe target object of which to get the prototype.",
          "syntax": [],
          "parameters": [
            {
              "name": "target",
              "description": "The target object of which to get the prototype."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        }
      },
      "RegExp": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#literal_notation_and_constructor",
        "title": "RegExp",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nThe RegExp object is used for matching text with a pattern.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": [],
        "sticky": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/sticky#anchored_sticky_flag",
          "title": "RegExp.prototype.sticky",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nThe sticky accessor property of RegExp instances returns whether or not the y flag is used with this regular expression.\n\nRegExp.prototype.sticky has the value true if the y flag was used; otherwise, false. The y flag indicates that the regex attempts to match the target string only from the index indicated by the lastIndex property (and unlike a global regex, does not attempt to match from any later indexes).",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        }
      },
      "SharedArrayBuffer": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer",
        "title": "SharedArrayBuffer",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since December 2021.\n\n* Some parts of this feature may have varying levels of support.\n\nThe SharedArrayBuffer object is used to represent a generic raw binary data buffer, similar to the ArrayBuffer object, but in a way that they can be used to create views on shared memory. A SharedArrayBuffer is not a Transferable Object, unlike an ArrayBuffer which is transferable.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": [],
        "grow": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/grow",
          "title": "SharedArrayBuffer.prototype.grow()",
          "description": "Since July 2024, this feature works across the latest devices and browser versions. This feature might not work in older devices or browsers.\n\nThe grow() method of SharedArrayBuffer instances grows the SharedArrayBuffer to the specified size, in bytes.\n\nThe new length, in bytes, to resize the SharedArrayBuffer to.",
          "syntax": [],
          "parameters": [
            {
              "name": "newLength",
              "description": "The new length, in bytes, to resize the SharedArrayBuffer to."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "maxByteLength": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/maxByteLength",
          "title": "SharedArrayBuffer.prototype.maxByteLength",
          "description": "Since July 2024, this feature works across the latest devices and browser versions. This feature might not work in older devices or browsers.\n\nThe maxByteLength accessor property of SharedArrayBuffer instances returns the maximum length (in bytes) that this SharedArrayBuffer can be grown to.\n\nThe maxByteLength property is an accessor property whose set accessor function is undefined, meaning that you can only read this property. The value is established when the shared array is constructed, set via the maxByteLength option of the SharedArrayBuffer() constructor, and cannot be changed.",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "growable": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/growable",
          "title": "SharedArrayBuffer.prototype.growable",
          "description": "Since July 2024, this feature works across the latest devices and browser versions. This feature might not work in older devices or browsers.\n\nThe growable accessor property of SharedArrayBuffer instances returns whether this SharedArrayBuffer can be grow or not.\n\nThe growable property is an accessor property whose set accessor function is undefined, meaning that you can only read this property. The value is established when the array is constructed. If a maxByteLength option was set in the constructor, growable will return true; if not, it will return false.",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "byteLength": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/byteLength",
          "title": "SharedArrayBuffer.prototype.byteLength",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since December 2021.\n\nThe byteLength accessor property of SharedArrayBuffer instances returns the length (in bytes) of this SharedArrayBuffer.\n\nThe byteLength property is an accessor property whose set accessor function is undefined, meaning that you can only read this property. The value is established when the shared array is constructed and cannot be changed.",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "slice": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/slice",
          "title": "SharedArrayBuffer.prototype.slice()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since December 2021.\n\nThe slice() method of SharedArrayBuffer instances returns a new SharedArrayBuffer whose contents are a copy of this SharedArrayBuffer's bytes from start, inclusive, up to end, exclusive. If either start or end is negative, it refers to an index from the end of the array, as opposed to from the beginning.\n\nZero-based index at which to start extraction, converted to an integer.",
          "syntax": [],
          "parameters": [
            {
              "name": "start Optional",
              "description": "Zero-based index at which to start extraction, converted to an integer.\n\nNegative index counts back from the end of the buffer \u00e2\u0080\u0094 if -buffer.length <= start < 0, start + buffer.length is used.\nIf start < -buffer.length or start is omitted, 0 is used.\nIf start >= buffer.length, an empty buffer is returned."
            },
            {
              "name": "end Optional",
              "description": "Zero-based index at which to end extraction, converted to an integer. slice() extracts up to but not including end.\n\nNegative index counts back from the end of the buffer \u00e2\u0080\u0094 if -buffer.length <= end < 0, end + buffer.length is used.\nIf end < -buffer.length, 0 is used.\nIf end >= buffer.length or end is omitted or undefined, buffer.length is used, causing all elements until the end to be extracted.\nIf end implies a position before or at the position that start implies, an empty buffer is returned."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "Symbol.species": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/Symbol.species",
          "title": "SharedArrayBuffer[Symbol.species]",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since December 2021.\n\nThe SharedArrayBuffer[Symbol.species] static accessor property returns the constructor used to construct return values from SharedArrayBuffer methods.\n\nWarning:\nThe existence of [Symbol.species] allows execution of arbitrary code and may create security vulnerabilities. It also makes certain optimizations much harder. Engine implementers are investigating whether to remove this feature. Avoid relying on it if possible.",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "SharedArrayBuffer": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/SharedArrayBuffer",
          "title": "SharedArrayBuffer() constructor",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since December 2021.\n\n* Some parts of this feature may have varying levels of support.\n\nNote:\nThe SharedArrayBuffer constructor may not always be globally available unless certain security requirements are met.",
          "syntax": [],
          "parameters": [
            {
              "name": "length",
              "description": "The size, in bytes, of the array buffer to create."
            },
            {
              "name": "options Optional",
              "description": "An object, which can contain the following properties:\n\nmaxByteLength Optional\n\nThe maximum size, in bytes, that the shared array buffer can be resized to."
            },
            {
              "name": "maxByteLength Optional",
              "description": "The maximum size, in bytes, that the shared array buffer can be resized to."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        }
      },
      "String": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_conversion",
        "title": "String",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nThe String object is used to represent and manipulate a\nsequence of characters.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "TypeError": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
        "title": "TypeError",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nThe TypeError object represents an error when an operation could not be performed, typically (but not exclusively) when a value is not of the expected type.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": [],
        "TypeError": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError/TypeError",
          "title": "TypeError() constructor",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe TypeError() constructor creates TypeError objects.\n\nNote: TypeError() can be called with or without new. Both create a new TypeError instance.",
          "syntax": [],
          "parameters": [
            {
              "name": "message Optional",
              "description": "Human-readable description of the error"
            },
            {
              "name": "options Optional",
              "description": "An object that has the following properties:\n\ncause Optional\n\nA property indicating the specific cause of the error.\nWhen catching and re-throwing an error with a more-specific or useful error message, this property can be used to pass the original error."
            },
            {
              "name": "cause Optional",
              "description": "A property indicating the specific cause of the error.\nWhen catching and re-throwing an error with a more-specific or useful error message, this property can be used to pass the original error."
            },
            {
              "name": "fileName Optional \nNon-standard",
              "description": "The name of the file containing the code that caused the exception"
            },
            {
              "name": "lineNumber Optional \nNon-standard",
              "description": "The line number of the code that caused the exception"
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        }
      },
      "Symbol": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#well-known_symbols",
        "title": "Symbol",
        "description": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/description",
          "title": "Symbol.prototype.description",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since January 2020.\n\nThe description accessor property of Symbol values returns a string containing the description of this symbol, or undefined if the symbol has no description.\n\nSymbol objects can be created with an optional description which can be used for debugging but not to access the symbol itself. The Symbol.prototype.description property can be used to read that description. It is different to Symbol.prototype.toString() as it does not contain the enclosing \"Symbol()\" string. See the examples.",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": [],
        "toStringTag": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag",
          "title": "Symbol.toStringTag",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since April 2017.\n\nThe Symbol.toStringTag static data property represents the well-known symbol Symbol.toStringTag. Object.prototype.toString() looks up this symbol on the this value for the property containing a string that represents the type of the object.\n\nThe well-known symbol Symbol.toStringTag.",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "asyncIterator": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/asyncIterator",
          "title": "Symbol.asyncIterator",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since January 2020.\n\nThe Symbol.asyncIterator static data property represents the well-known symbol Symbol.asyncIterator. The async iterable protocol looks up this symbol for the method that returns the async iterator for an object. In order for an object to be async iterable, it must have an [Symbol.asyncIterator] key.\n\nThe well-known symbol Symbol.asyncIterator.",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "replace": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/replace",
          "title": "Symbol.replace",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since January 2020.\n\nThe Symbol.replace static data property represents the well-known symbol Symbol.replace. The String.prototype.replace() and String.prototype.replaceAll() methods look up this symbol on their first argument for the method that replaces substrings matched by the current object.\n\nFor more information, see RegExp.prototype[Symbol.replace](), String.prototype.replace(), and String.prototype.replaceAll().",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "match": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/match",
          "title": "Symbol.match",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since January 2020.\n\nThe Symbol.match static data property represents the well-known symbol Symbol.match. The String.prototype.match() method looks up this symbol on its first argument for the method used to match an input string against the current object. This symbol is also used to determine if an object should be treated as a regex.\n\nFor more information, see RegExp.prototype[Symbol.match]() and String.prototype.match().",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "matchAll": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/matchAll",
          "title": "Symbol.matchAll",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since January 2020.\n\nThe Symbol.matchAll static data property represents the well-known symbol Symbol.matchAll. The String.prototype.matchAll() method looks up this symbol on its first argument for the method that returns an iterator, that yields matches of the current object against a string.\n\nFor more information, see RegExp.prototype[Symbol.matchAll]() and String.prototype.matchAll().",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "search": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/search",
          "title": "Symbol.search",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since January 2020.\n\nThe Symbol.search static data property represents the well-known symbol Symbol.search. The String.prototype.search() method looks up this symbol on its first argument for the method that returns the index within a string that matches the current object.\n\nFor more information, see RegExp.prototype[Symbol.search]() and String.prototype.search().",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "hasInstance": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/hasInstance",
          "title": "Symbol.hasInstance",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since April 2017.\n\nThe Symbol.hasInstance static data property represents the well-known symbol Symbol.hasInstance. The instanceof operator looks up this symbol on its right-hand operand for the method used to determine if the constructor object recognizes an object as its instance.\n\nThe well-known symbol Symbol.hasInstance.",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "species": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/species",
          "title": "Symbol.species",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nThe Symbol.species static data property represents the well-known symbol Symbol.species. Methods that create copies of an object may look up this symbol on the object for the constructor function to use when creating the copy.\n\nWarning:\nThe existence of [Symbol.species] allows execution of arbitrary code and may create security vulnerabilities. It also makes certain optimizations much harder. Engine implementers are investigating whether to remove this feature. Avoid relying on it if possible.",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "for": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/for",
          "title": "Symbol.for()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2015.\n\nThe Symbol.for() static method searches for existing symbols\nin a runtime-wide symbol registry with the given key and returns it if found. Otherwise\na new symbol gets created in the global symbol registry with this key.\n\nString, required. The key for the symbol (and also used for the description of the\nsymbol).",
          "syntax": [],
          "parameters": [
            {
              "name": "key",
              "description": "String, required. The key for the symbol (and also used for the description of the\nsymbol)."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "unscopables": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/unscopables",
          "title": "Symbol.unscopables",
          "description": "The Symbol.unscopables static data property represents the well-known symbol Symbol.unscopables. The with statement looks up this symbol on the scope object for a property containing a collection of properties that should not become bindings within the with environment.\n\nThe well-known symbol Symbol.unscopables.\n\nThe [Symbol.unscopables] symbol (accessed via Symbol.unscopables) can be defined on any object to exclude property names from being exposed as lexical variables in with environment bindings. Note that when using strict mode, with statements are not available, and this symbol is likely not needed.",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "toString": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toString",
          "title": "Symbol.prototype.toString()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2015.\n\nThe toString() method of Symbol values returns a string representing this symbol value.\n\nNone.",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "valueOf": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/valueOf",
          "title": "Symbol.prototype.valueOf()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2015.\n\nThe valueOf() method of Symbol values returns this symbol value.\n\nNone.",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "Symbol": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/Symbol",
          "title": "Symbol() constructor",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2015.\n\nThe Symbol() function returns primitive values of type Symbol.\n\nNote: Symbol() can only be called without new. Attempting to construct it with new throws a TypeError.",
          "syntax": [],
          "parameters": [
            {
              "name": "description Optional",
              "description": "A string. A description of the symbol which can be used for debugging but not to\naccess the symbol itself."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "split": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/split",
          "title": "Symbol.split",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since January 2020.\n\nThe Symbol.split static data property represents the well-known symbol Symbol.split. The String.prototype.split() method looks up this symbol on its first argument for the method that splits a string at the indices that match the current object.\n\nFor more information, see RegExp.prototype[Symbol.split]() and String.prototype.split().",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "keyFor": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/keyFor",
          "title": "Symbol.keyFor()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2015.\n\nThe Symbol.keyFor() static method retrieves a shared symbol\nkey from the global symbol registry for the given symbol.\n\nSymbol, required. The symbol to find a key for.",
          "syntax": [],
          "parameters": [
            {
              "name": "sym",
              "description": "Symbol, required. The symbol to find a key for."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "isConcatSpreadable": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/isConcatSpreadable",
          "title": "Symbol.isConcatSpreadable",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since April 2017.\n\nThe Symbol.isConcatSpreadable static data property represents the well-known symbol Symbol.isConcatSpreadable. The Array.prototype.concat() method looks up this symbol on each object being concatenated to determine if it should be treated as an array-like object and flattened to its array elements.\n\nThe well-known symbol Symbol.isConcatSpreadable.",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        }
      },
      "TypedArray": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#behavior_when_viewing_a_resizable_buffer",
        "title": "TypedArray",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nA TypedArray object describes an array-like view of an\nunderlying binary data buffer.\nThere is no global property named TypedArray, nor is there a\ndirectly visible TypedArray constructor. Instead, there are a number of\ndifferent global properties, whose values are typed array constructors for specific\nelement types, listed below. On the following pages you will find common properties and\nmethods that can be used with any typed array containing elements of any type.",
        "syntax": [],
        "parameters": [
          {
            "name": "typedArray",
            "description": "When called with an instance of a TypedArray subclass, the typedArray gets copied into a new typed array. For a non-bigint TypedArray constructor, the typedArray parameter can only be of one of the non-bigint types (such as Int32Array). Similarly, for a bigint TypedArray constructor (BigInt64Array or BigUint64Array), the typedArray parameter can only be of one of the bigint types. Each value in typedArray is converted to the corresponding type of the constructor before being copied into the new array. The length of the new typed array will be same as the length of the typedArray argument."
          },
          {
            "name": "object",
            "description": "When called with an object that's not a TypedArray instance, a new typed array is created in the same way as the TypedArray.from() method."
          },
          {
            "name": "length Optional",
            "description": "When called with a non-object, the parameter will be treated as a number specifying the length of the typed array. An internal array buffer is created in memory, of size length multiplied by BYTES_PER_ELEMENT bytes, filled with zeros. Omitting all parameters is equivalent to using 0 as length."
          },
          {
            "name": "buffer, byteOffset Optional, length Optional",
            "description": "When called with an ArrayBuffer or SharedArrayBuffer instance, and optionally a byteOffset and a length argument, a new typed array view is created that views the specified buffer. The byteOffset (in bytes) and length (in number of elements, each occupying BYTES_PER_ELEMENT bytes) parameters specify the memory range that will be exposed by the typed array view. If both are omitted, all of buffer is viewed; if only length is omitted, the remainder of buffer starting from byteOffset is viewed. If length is omitted, the typed array becomes length-tracking."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": [],
        "indexOf": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/indexOf",
          "title": "TypedArray.prototype.indexOf()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nThe indexOf() method of TypedArray instances returns the first index at which a given element can be found in the typed array, or -1 if it is not present. This method has the same algorithm as Array.prototype.indexOf().\n\nElement to locate in the typed array.",
          "syntax": [],
          "parameters": [
            {
              "name": "searchElement",
              "description": "Element to locate in the typed array."
            },
            {
              "name": "fromIndex Optional",
              "description": "Zero-based index at which to start searching, converted to an integer."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "lastIndexOf": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/lastIndexOf",
          "title": "TypedArray.prototype.lastIndexOf()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nThe lastIndexOf() method of TypedArray instances returns the last index at which a given element can be found in the typed array, or -1 if it is not present. The typed array is searched backwards, starting at fromIndex. This method has the same algorithm as Array.prototype.lastIndexOf().\n\nElement to locate in the typed array.",
          "syntax": [],
          "parameters": [
            {
              "name": "searchElement",
              "description": "Element to locate in the typed array."
            },
            {
              "name": "fromIndex Optional",
              "description": "Zero-based index at which to start searching backwards, converted to an integer."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "includes": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/includes",
          "title": "TypedArray.prototype.includes()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nThe includes() method of TypedArray instances determines whether a typed array includes a certain value among its entries, returning true or false as appropriate. This method has the same algorithm as Array.prototype.includes().\n\nThe value to search for.",
          "syntax": [],
          "parameters": [
            {
              "name": "searchElement",
              "description": "The value to search for."
            },
            {
              "name": "fromIndex Optional",
              "description": "Zero-based index at which to start searching, converted to an integer."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "some": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/some",
          "title": "TypedArray.prototype.some()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nThe some() method of TypedArray instances tests whether at least one element in the typed array passes the test implemented by the provided function. It returns true if, in the typed array, it finds an element for which the provided function returns true; otherwise it returns false. It doesn't modify the typed array. This method has the same algorithm as Array.prototype.some().\n\nA function to execute for each element in the typed array. It should return a truthy value to indicate the element passes the test, and a falsy value otherwise. The function is called with the following arguments:",
          "syntax": [],
          "parameters": [
            {
              "name": "callbackFn",
              "description": "A function to execute for each element in the typed array. It should return a truthy value to indicate the element passes the test, and a falsy value otherwise. The function is called with the following arguments:\n\nelement\n\nThe current element being processed in the typed array.\n\nindex\n\nThe index of the current element being processed in the typed array.\n\narray\n\nThe typed array some() was called upon."
            },
            {
              "name": "element",
              "description": "The current element being processed in the typed array."
            },
            {
              "name": "index",
              "description": "The index of the current element being processed in the typed array."
            },
            {
              "name": "array",
              "description": "The typed array some() was called upon."
            },
            {
              "name": "thisArg Optional",
              "description": "A value to use as this when executing callbackFn. See iterative methods."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "entries": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/entries",
          "title": "TypedArray.prototype.entries()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nThe entries() method of TypedArray instances returns a new array iterator object that contains the key/value pairs for each index in the typed array. This method has the same algorithm as Array.prototype.entries().\n\nNone.",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "of": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/of",
          "title": "TypedArray.of()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nThe TypedArray.of() static method creates a new\ntyped array from a variable number of arguments. This method is nearly the same as\nArray.of().\n\nWhere TypedArray is one of:",
          "syntax": [],
          "parameters": [
            {
              "name": "element1, \u00e2\u0080\u00a6, elementN",
              "description": "Elements used to create the typed array."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "findIndex": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/findIndex",
          "title": "TypedArray.prototype.findIndex()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nThe findIndex() method of TypedArray instances returns the index of the first element in a typed array that satisfies the provided testing function. If no elements satisfy the testing function, -1 is returned. This method has the same algorithm as Array.prototype.findIndex().\n\nA function to execute for each element in the typed array. It should return a truthy value to indicate a matching element has been found, and a falsy value otherwise. The function is called with the following arguments:",
          "syntax": [],
          "parameters": [
            {
              "name": "callbackFn",
              "description": "A function to execute for each element in the typed array. It should return a truthy value to indicate a matching element has been found, and a falsy value otherwise. The function is called with the following arguments:\n\nelement\n\nThe current element being processed in the typed array.\n\nindex\n\nThe index of the current element being processed in the typed array.\n\narray\n\nThe typed array findIndex() was called upon."
            },
            {
              "name": "element",
              "description": "The current element being processed in the typed array."
            },
            {
              "name": "index",
              "description": "The index of the current element being processed in the typed array."
            },
            {
              "name": "array",
              "description": "The typed array findIndex() was called upon."
            },
            {
              "name": "thisArg Optional",
              "description": "A value to use as this when executing callbackFn. See iterative methods."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "from": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/from",
          "title": "TypedArray.from()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nThe TypedArray.from() static method creates a new\ntyped array\nfrom an array-like or iterable object. This method is nearly the same as\nArray.from().\n\nWhere TypedArray is one of:",
          "syntax": [],
          "parameters": [
            {
              "name": "arrayLike",
              "description": "An iterable or array-like object to convert to a typed array."
            },
            {
              "name": "mapFn Optional",
              "description": "A function to call on every element of the typed array. If provided, every value to be added to the array is first passed through this function, and mapFn's return value is added to the typed array instead. The function is called with the following arguments:\n\nelement\n\nThe current element being processed in the typed array.\n\nindex\n\nThe index of the current element being processed in the typed array."
            },
            {
              "name": "element",
              "description": "The current element being processed in the typed array."
            },
            {
              "name": "index",
              "description": "The index of the current element being processed in the typed array."
            },
            {
              "name": "thisArg Optional",
              "description": "Value to use as this when executing mapFn."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "at": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/at",
          "title": "TypedArray.prototype.at()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since March 2022.\n\nThe at() method of TypedArray instances takes an integer value and returns the item at that index, allowing for positive and negative integers. Negative integers count back from the last item in the typed array. This method has the same algorithm as Array.prototype.at().\n\nZero-based index of the typed array element to be returned, converted to an integer. Negative index counts back from the end of the typed array \u00e2\u0080\u0094 if index < 0, index + array.length is accessed.",
          "syntax": [],
          "parameters": [
            {
              "name": "index",
              "description": "Zero-based index of the typed array element to be returned, converted to an integer. Negative index counts back from the end of the typed array \u00e2\u0080\u0094 if index < 0, index + array.length is accessed."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "copyWithin": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/copyWithin",
          "title": "TypedArray.prototype.copyWithin()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nThe copyWithin() method of TypedArray instances shallow copies part of this typed array to another location in the same typed array and returns this typed array without modifying its length. This method has the same algorithm as Array.prototype.copyWithin().\n\nZero-based index at which to copy the sequence to, converted to an integer. This corresponds to where the element at start will be copied to, and all elements between start and end are copied to succeeding indices.",
          "syntax": [],
          "parameters": [
            {
              "name": "target",
              "description": "Zero-based index at which to copy the sequence to, converted to an integer. This corresponds to where the element at start will be copied to, and all elements between start and end are copied to succeeding indices."
            },
            {
              "name": "start",
              "description": "Zero-based index at which to start copying elements from, converted to an integer."
            },
            {
              "name": "end Optional",
              "description": "Zero-based index at which to end copying elements from, converted to an integer. copyWithin() copies up to but not including end."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "values": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/values",
          "title": "TypedArray.prototype.values()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nThe values() method of TypedArray instances returns a new array iterator object that iterates the value of each item in the typed array. This method has the same algorithm as Array.prototype.values().\n\nNone.",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "reverse": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/reverse",
          "title": "TypedArray.prototype.reverse()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nThe reverse() method of TypedArray instances reverses a typed array in place and returns the reference to the same typed array, the first typed array element now becoming the last, and the last typed array element becoming the first. In other words, elements order in the typed array will be turned towards the direction opposite to that previously stated. This method has the same algorithm as Array.prototype.reverse().\n\nNone.",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "reduceRight": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/reduceRight",
          "title": "TypedArray.prototype.reduceRight()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nThe reduceRight() method of TypedArray instances applies a function against an accumulator and each value of the typed array (from right-to-left) to reduce it to a single value. This method has the same algorithm as Array.prototype.reduceRight().\n\nA function to execute for each element in the typed array. Its return value becomes the value of the accumulator parameter on the next invocation of callbackFn. For the last invocation, the return value becomes the return value of reduceRight(). The function is called with the following arguments:",
          "syntax": [],
          "parameters": [
            {
              "name": "callbackFn",
              "description": "A function to execute for each element in the typed array. Its return value becomes the value of the accumulator parameter on the next invocation of callbackFn. For the last invocation, the return value becomes the return value of reduceRight(). The function is called with the following arguments:\n\naccumulator\n\nThe value resulting from the previous call to callbackFn. On the first call, its value is initialValue if the latter is specified; otherwise its value is the last element of the typed array.\n\ncurrentValue\n\nThe value of the current element. On the first call, its value is the last element if initialValue is specified; otherwise its value is the second-to-last element.\n\ncurrentIndex\n\nThe index position of currentValue in the typed array. On the first call, its value is array.length - 1 if initialValue is specified, otherwise array.length - 2.\n\narray\n\nThe typed array reduceRight() was called upon."
            },
            {
              "name": "accumulator",
              "description": "The value resulting from the previous call to callbackFn. On the first call, its value is initialValue if the latter is specified; otherwise its value is the last element of the typed array."
            },
            {
              "name": "currentValue",
              "description": "The value of the current element. On the first call, its value is the last element if initialValue is specified; otherwise its value is the second-to-last element."
            },
            {
              "name": "currentIndex",
              "description": "The index position of currentValue in the typed array. On the first call, its value is array.length - 1 if initialValue is specified, otherwise array.length - 2."
            },
            {
              "name": "array",
              "description": "The typed array reduceRight() was called upon."
            },
            {
              "name": "initialValue Optional",
              "description": "Value to use as accumulator to the first call of the callbackFn. If no initial value is supplied, the last element in the typed array will be used and skipped. Calling reduceRight() on an empty typed array without an initial value creates a TypeError."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "forEach": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/forEach",
          "title": "TypedArray.prototype.forEach()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nThe forEach() method of TypedArray instances executes a provided function once for each typed array element. This method has the same algorithm as Array.prototype.forEach().\n\nA function to execute for each element in the typed array. Its return value is discarded. The function is called with the following arguments:",
          "syntax": [],
          "parameters": [
            {
              "name": "callbackFn",
              "description": "A function to execute for each element in the typed array. Its return value is discarded. The function is called with the following arguments:\n\nelement\n\nThe current element being processed in the typed array.\n\nindex\n\nThe index of the current element being processed in the typed array.\n\narray\n\nThe typed array forEach() was called upon."
            },
            {
              "name": "element",
              "description": "The current element being processed in the typed array."
            },
            {
              "name": "index",
              "description": "The index of the current element being processed in the typed array."
            },
            {
              "name": "array",
              "description": "The typed array forEach() was called upon."
            },
            {
              "name": "thisArg Optional",
              "description": "A value to use as this when executing callbackFn. See iterative methods."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "byteLength": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/byteLength",
          "title": "TypedArray.prototype.byteLength",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe byteLength accessor property of TypedArray instances returns the length (in bytes) of this typed array.\n\nThe byteLength property is an accessor property whose set accessor function is undefined, meaning that you can only read this property. The value is established when a TypedArray is constructed and cannot be changed. If the TypedArray is not specifying a byteOffset or a length, the length of the referenced ArrayBuffer will be returned. TypedArray is one of the TypedArray objects.",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "join": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/join",
          "title": "TypedArray.prototype.join()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nThe join() method of TypedArray instances creates and returns a new string by concatenating all of the elements in this typed array, separated by commas or a specified separator string. If the typed array has only one item, then that item will be returned without using the separator. This method has the same algorithm as Array.prototype.join().\n\nA string to separate each pair of adjacent elements of the typed array. If omitted, the typed array elements are separated with a comma (\",\").",
          "syntax": [],
          "parameters": [
            {
              "name": "separator Optional",
              "description": "A string to separate each pair of adjacent elements of the typed array. If omitted, the typed array elements are separated with a comma (\",\")."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "toLocaleString": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/toLocaleString",
          "title": "TypedArray.prototype.toLocaleString()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since January 2017.\n\nThe toLocaleString() method of TypedArray instances returns a string representing the elements of the typed array. The elements are converted to strings using their toLocaleString methods and these strings are separated by a locale-specific string (such as a comma \",\"). This method has the same algorithm as Array.prototype.toLocaleString().\n\nA string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the locales argument, see the parameter description on the Intl main page.",
          "syntax": [],
          "parameters": [
            {
              "name": "locales Optional",
              "description": "A string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the locales argument, see the parameter description on the Intl main page."
            },
            {
              "name": "options Optional",
              "description": "An object with configuration properties. See Number.prototype.toLocaleString()."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "Symbol.species": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/Symbol.species",
          "title": "TypedArray[Symbol.species]",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nThe TypedArray[Symbol.species] static accessor property returns the constructor used to construct return values from typed array methods.\n\nWarning:\nThe existence of [Symbol.species] allows execution of arbitrary code and may create security vulnerabilities. It also makes certain optimizations much harder. Engine implementers are investigating whether to remove this feature. Avoid relying on it if possible.",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "subarray": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/subarray",
          "title": "TypedArray.prototype.subarray()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe subarray() method of TypedArray instances returns a new typed array\non the same ArrayBuffer store and with the same element types as for this\ntyped array. The begin offset is inclusive and the end\noffset is exclusive.\n\nElement to begin at. The offset is inclusive. The whole array will be included in\nthe new view if this value is not specified.",
          "syntax": [],
          "parameters": [
            {
              "name": "begin Optional",
              "description": "Element to begin at. The offset is inclusive. The whole array will be included in\nthe new view if this value is not specified."
            },
            {
              "name": "end Optional",
              "description": "Element to end at. The offset is exclusive. If not specified, all elements from the\none specified by begin to the end of the array are included in\nthe new view."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "keys": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/keys",
          "title": "TypedArray.prototype.keys()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nThe keys() method of TypedArray instances returns a new array iterator object that contains the keys for each index in the typed array. This method has the same algorithm as Array.prototype.keys().\n\nNone.",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "Symbol.iterator": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/Symbol.iterator",
          "title": "TypedArray.prototype[Symbol.iterator]()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nThe [Symbol.iterator]() method of TypedArray instances implements the iterable protocol and allows typed arrays to be consumed by most syntaxes expecting iterables, such as the spread syntax and for...of loops. It returns an array iterator object that yields the value of each index in the typed array.\n\nThe initial value of this property is the same function object as the initial value of the TypedArray.prototype.values property.",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "map": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/map",
          "title": "TypedArray.prototype.map()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nThe map() method of TypedArray instances creates a new typed array populated with the results of calling a provided function on every element in the calling typed array. This method has the same algorithm as Array.prototype.map().\n\nA function to execute for each element in the typed array. Its return value is added as a single element in the new typed array. The function is called with the following arguments:",
          "syntax": [],
          "parameters": [
            {
              "name": "callbackFn",
              "description": "A function to execute for each element in the typed array. Its return value is added as a single element in the new typed array. The function is called with the following arguments:\n\nelement\n\nThe current element being processed in the typed array.\n\nindex\n\nThe index of the current element being processed in the typed array.\n\narray\n\nThe typed array map() was called upon."
            },
            {
              "name": "element",
              "description": "The current element being processed in the typed array."
            },
            {
              "name": "index",
              "description": "The index of the current element being processed in the typed array."
            },
            {
              "name": "array",
              "description": "The typed array map() was called upon."
            },
            {
              "name": "thisArg Optional",
              "description": "A value to use as this when executing callbackFn. See iterative methods."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "toString": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/toString",
          "title": "TypedArray.prototype.toString()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since January 2017.\n\nThe toString() method of TypedArray instances returns a string representing the specified typed array and its elements. This method has the same algorithm as Array.prototype.toString().\n\nNone.",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "set": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/set",
          "title": "TypedArray.prototype.set()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe set() method of TypedArray instances stores multiple values in the typed\narray, reading input values from a specified array.\n\nThe array from which to copy values. All values from the source array are copied\ninto the target array, unless the length of the source array plus the target offset exceeds\nthe length of the target array, in which case an exception is thrown.",
          "syntax": [],
          "parameters": [
            {
              "name": "array",
              "description": "The array from which to copy values. All values from the source array are copied\ninto the target array, unless the length of the source array plus the target offset exceeds\nthe length of the target array, in which case an exception is thrown."
            },
            {
              "name": "typedarray",
              "description": "If the source array is a typed array, the two arrays may share the same underlying\nArrayBuffer; the JavaScript engine will intelligently\ncopy the source range of the buffer to the destination range."
            },
            {
              "name": "targetOffset Optional",
              "description": "The offset into the target array at which to begin writing values from the source\narray. If this value is omitted, 0 is assumed (that is, the source array will\noverwrite values in the target array starting at index 0)."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "find": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/find",
          "title": "TypedArray.prototype.find()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nThe find() method of TypedArray instances returns the first element in the provided typed array that satisfies the provided testing function. If no values satisfy the testing function, undefined is returned. This method has the same algorithm as Array.prototype.find().\n\nA function to execute for each element in the typed array. It should return a truthy value to indicate a matching element has been found, and a falsy value otherwise. The function is called with the following arguments:",
          "syntax": [],
          "parameters": [
            {
              "name": "callbackFn",
              "description": "A function to execute for each element in the typed array. It should return a truthy value to indicate a matching element has been found, and a falsy value otherwise. The function is called with the following arguments:\n\nelement\n\nThe current element being processed in the typed array.\n\nindex\n\nThe index of the current element being processed in the typed array.\n\narray\n\nThe typed array find() was called upon."
            },
            {
              "name": "element",
              "description": "The current element being processed in the typed array."
            },
            {
              "name": "index",
              "description": "The index of the current element being processed in the typed array."
            },
            {
              "name": "array",
              "description": "The typed array find() was called upon."
            },
            {
              "name": "thisArg Optional",
              "description": "A value to use as this when executing callbackFn. See iterative methods."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "reduce": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/reduce",
          "title": "TypedArray.prototype.reduce()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nThe reduce() method of TypedArray instances executes a user-supplied \"reducer\" callback function on each element of the typed array, in order, passing in the return value from the calculation on the preceding element. The final result of running the reducer across all elements of the typed array is a single value. This method has the same algorithm as Array.prototype.reduce().\n\nA function to execute for each element in the typed array. Its return value becomes the value of the accumulator parameter on the next invocation of callbackFn. For the last invocation, the return value becomes the return value of reduce(). The function is called with the following arguments:",
          "syntax": [],
          "parameters": [
            {
              "name": "callbackFn",
              "description": "A function to execute for each element in the typed array. Its return value becomes the value of the accumulator parameter on the next invocation of callbackFn. For the last invocation, the return value becomes the return value of reduce(). The function is called with the following arguments:\n\naccumulator\n\nThe value resulting from the previous call to callbackFn. On the first call, its value is initialValue if the latter is specified; otherwise its value is array[0].\n\ncurrentValue\n\nThe value of the current element. On the first call, its value is array[0] if initialValue is specified; otherwise its value is array[1].\n\ncurrentIndex\n\nThe index position of currentValue in the typed array. On the first call, its value is 0 if initialValue is specified, otherwise 1.\n\narray\n\nThe typed array reduce() was called upon."
            },
            {
              "name": "accumulator",
              "description": "The value resulting from the previous call to callbackFn. On the first call, its value is initialValue if the latter is specified; otherwise its value is array[0]."
            },
            {
              "name": "currentValue",
              "description": "The value of the current element. On the first call, its value is array[0] if initialValue is specified; otherwise its value is array[1]."
            },
            {
              "name": "currentIndex",
              "description": "The index position of currentValue in the typed array. On the first call, its value is 0 if initialValue is specified, otherwise 1."
            },
            {
              "name": "array",
              "description": "The typed array reduce() was called upon."
            },
            {
              "name": "initialValue Optional",
              "description": "A value to which accumulator is initialized the first time the callback is called.\nIf initialValue is specified, callbackFn starts executing with the first value in the typed array as currentValue.\nIf initialValue is not specified, accumulator is initialized to the first value in the typed array, and callbackFn starts executing with the second value in the typed array as currentValue. In this case, if the typed array is empty (so that there's no first value to return as accumulator), an error is thrown."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "findLast": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/findLast",
          "title": "TypedArray.prototype.findLast()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since August 2022.\n\nThe findLast() method of TypedArray instances iterates the typed array in reverse order and returns the value of the first element that satisfies the provided testing function. If no elements satisfy the testing function, undefined is returned. This method has the same algorithm as Array.prototype.findLast().\n\nA function to execute for each element in the typed array. It should return a truthy value to indicate a matching element has been found, and a falsy value otherwise. The function is called with the following arguments:",
          "syntax": [],
          "parameters": [
            {
              "name": "callbackFn",
              "description": "A function to execute for each element in the typed array. It should return a truthy value to indicate a matching element has been found, and a falsy value otherwise. The function is called with the following arguments:\n\nelement\n\nThe current element being processed in the typed array.\n\nindex\n\nThe index of the current element being processed in the typed array.\n\narray\n\nThe typed array findLast() was called upon."
            },
            {
              "name": "element",
              "description": "The current element being processed in the typed array."
            },
            {
              "name": "index",
              "description": "The index of the current element being processed in the typed array."
            },
            {
              "name": "array",
              "description": "The typed array findLast() was called upon."
            },
            {
              "name": "thisArg Optional",
              "description": "A value to use as this when executing callbackFn. See iterative methods."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "fill": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/fill",
          "title": "TypedArray.prototype.fill()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nThe fill() method of TypedArray instances changes all elements within a range of indices in a typed array to a static value. It returns the modified typed array. This method has the same algorithm as Array.prototype.fill().\n\nValue to fill the typed array with.",
          "syntax": [],
          "parameters": [
            {
              "name": "value",
              "description": "Value to fill the typed array with."
            },
            {
              "name": "start Optional",
              "description": "Zero-based index at which to start filling, converted to an integer."
            },
            {
              "name": "end Optional",
              "description": "Zero-based index at which to end filling, converted to an integer. fill() fills up to but not including end."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "every": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/every",
          "title": "TypedArray.prototype.every()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nThe every() method of TypedArray instances tests whether all elements in the typed array pass the test implemented by the provided function. It returns a Boolean value. This method has the same algorithm as Array.prototype.every().\n\nA function to execute for each element in the typed array. It should return a truthy value to indicate the element passes the test, and a falsy value otherwise. The function is called with the following arguments:",
          "syntax": [],
          "parameters": [
            {
              "name": "callbackFn",
              "description": "A function to execute for each element in the typed array. It should return a truthy value to indicate the element passes the test, and a falsy value otherwise. The function is called with the following arguments:\n\nelement\n\nThe current element being processed in the typed array.\n\nindex\n\nThe index of the current element being processed in the typed array.\n\narray\n\nThe typed array every() was called upon."
            },
            {
              "name": "element",
              "description": "The current element being processed in the typed array."
            },
            {
              "name": "index",
              "description": "The index of the current element being processed in the typed array."
            },
            {
              "name": "array",
              "description": "The typed array every() was called upon."
            },
            {
              "name": "thisArg Optional",
              "description": "A value to use as this when executing callbackFn. See iterative methods."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "byteOffset": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/byteOffset",
          "title": "TypedArray.prototype.byteOffset",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe byteOffset accessor property of TypedArray instances returns the offset (in bytes) of this typed array from the start of its ArrayBuffer or SharedArrayBuffer.\n\nThe byteOffset property is an accessor property whose set accessor function is undefined, meaning that you can only read this property. The value is established when a TypedArray is constructed and cannot be changed. TypedArray is one of the TypedArray objects.",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "length": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/length",
          "title": "TypedArray.prototype.length",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe length accessor property of TypedArray instances returns the length (in elements) of this typed array.\n\nThe length property is an accessor property whose set accessor function is undefined, meaning that you can only read this property. The value is established when a TypedArray is constructed and cannot be changed. If the TypedArray is not specifying a byteOffset or a length, the length of the referenced ArrayBuffer will be returned. TypedArray is one of the TypedArray objects.",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "toSorted": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/toSorted",
          "title": "TypedArray.prototype.toSorted()",
          "description": "Since July 2023, this feature works across the latest devices and browser versions. This feature might not work in older devices or browsers.\n\nThe toSorted() method of TypedArray instances is the copying version of the sort() method. It returns a new typed array with the elements sorted in ascending order. This method has the same algorithm as Array.prototype.toSorted(), except that it sorts the values numerically instead of as strings by default.\n\nA function that determines the order of the elements. If omitted, the typed array elements are sorted according to numeric value. See sort() for more information.",
          "syntax": [],
          "parameters": [
            {
              "name": "compareFn Optional",
              "description": "A function that determines the order of the elements. If omitted, the typed array elements are sorted according to numeric value. See sort() for more information."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "findLastIndex": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/findLastIndex",
          "title": "TypedArray.prototype.findLastIndex()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since August 2022.\n\nThe findLastIndex() method of TypedArray instances iterates the typed array in reverse order and returns the index of the first element that satisfies the provided testing function. If no elements satisfy the testing function, -1 is returned. This method has the same algorithm as Array.prototype.findLastIndex().\n\nA function to execute for each element in the typed array. It should return a truthy value to indicate a matching element has been found, and a falsy value otherwise. The function is called with the following arguments:",
          "syntax": [],
          "parameters": [
            {
              "name": "callbackFn",
              "description": "A function to execute for each element in the typed array. It should return a truthy value to indicate a matching element has been found, and a falsy value otherwise. The function is called with the following arguments:\n\nelement\n\nThe current element being processed in the typed array.\n\nindex\n\nThe index of the current element being processed in the typed array.\n\narray\n\nThe typed array findLastIndex() was called upon."
            },
            {
              "name": "element",
              "description": "The current element being processed in the typed array."
            },
            {
              "name": "index",
              "description": "The index of the current element being processed in the typed array."
            },
            {
              "name": "array",
              "description": "The typed array findLastIndex() was called upon."
            },
            {
              "name": "thisArg Optional",
              "description": "A value to use as this when executing callbackFn. See iterative methods."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "with": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/with",
          "title": "TypedArray.prototype.with()",
          "description": "Since July 2023, this feature works across the latest devices and browser versions. This feature might not work in older devices or browsers.\n\nThe with() method of TypedArray instances is the copying version of using the bracket notation to change the value of a given index. It returns a new typed array with the element at the given index replaced with the given value. This method has the same algorithm as Array.prototype.with().\n\nZero-based index at which to change the typed array, converted to an integer.",
          "syntax": [],
          "parameters": [
            {
              "name": "index",
              "description": "Zero-based index at which to change the typed array, converted to an integer."
            },
            {
              "name": "value",
              "description": "Any value to be assigned to the given index."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "filter": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/filter",
          "title": "TypedArray.prototype.filter()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nThe filter() method of TypedArray instances creates a copy of a portion of a given typed array, filtered down to just the elements from the given typed array that pass the test implemented by the provided function. This method has the same algorithm as Array.prototype.filter().\n\nA function to execute for each element in the typed array. It should return a truthy value to keep the element in the resulting typed array, and a falsy value otherwise. The function is called with the following arguments:",
          "syntax": [],
          "parameters": [
            {
              "name": "callbackFn",
              "description": "A function to execute for each element in the typed array. It should return a truthy value to keep the element in the resulting typed array, and a falsy value otherwise. The function is called with the following arguments:\n\nelement\n\nThe current element being processed in the typed array.\n\nindex\n\nThe index of the current element being processed in the typed array.\n\narray\n\nThe typed array filter() was called upon."
            },
            {
              "name": "element",
              "description": "The current element being processed in the typed array."
            },
            {
              "name": "index",
              "description": "The index of the current element being processed in the typed array."
            },
            {
              "name": "array",
              "description": "The typed array filter() was called upon."
            },
            {
              "name": "thisArg Optional",
              "description": "A value to use as this when executing callbackFn. See iterative methods."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "slice": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice",
          "title": "TypedArray.prototype.slice()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nThe slice() method of TypedArray instances returns a copy of a portion of a typed array into a new typed array object selected from start to end (end not included) where start and end represent the index of items in that typed array. The original typed array will not be modified. This method has the same algorithm as Array.prototype.slice().\n\nZero-based index at which to start extraction, converted to an integer.",
          "syntax": [],
          "parameters": [
            {
              "name": "start Optional",
              "description": "Zero-based index at which to start extraction, converted to an integer."
            },
            {
              "name": "end Optional",
              "description": "Zero-based index at which to end extraction, converted to an integer. slice() extracts up to but not including end."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "buffer": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/buffer",
          "title": "TypedArray.prototype.buffer",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe buffer accessor property of TypedArray instances returns the ArrayBuffer or SharedArrayBuffer referenced by this typed array at construction time.\n\nThe buffer property is an accessor property whose set accessor function is undefined, meaning that you can only read this property. The value is established when the TypedArray is constructed and cannot be changed. TypedArray is one of the TypedArray objects.",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "BYTES PER ELEMENT": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT",
          "title": "TypedArray.BYTES_PER_ELEMENT",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe TypedArray.BYTES_PER_ELEMENT static data property represents the size in bytes of each element in a typed array.\n\nA number whose value depends on the type of TypedArray.",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "sort": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/sort",
          "title": "TypedArray.prototype.sort()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2016.\n\nThe sort() method of TypedArray instances sorts the elements of a typed array in place and returns the reference to the same typed array, now sorted. This method has the same algorithm as Array.prototype.sort(), except that it sorts the values numerically instead of as strings by default.\n\nA function that determines the order of the elements. The function is called with the following arguments:",
          "syntax": [],
          "parameters": [
            {
              "name": "compareFn Optional",
              "description": "A function that determines the order of the elements. The function is called with the following arguments:\n\na\n\nThe first element for comparison.\n\nb\n\nThe second element for comparison.\n\n\nIt should return a number where:\n\nA negative value indicates that a should come before b.\nA positive value indicates that a should come after b.\nZero or NaN indicates that a and b are considered equal.\n\nTo memorize this, remember that (a, b) => a - b sorts numbers in ascending order.\nIf omitted, the typed array elements are sorted according to numeric value."
            },
            {
              "name": "a",
              "description": "The first element for comparison."
            },
            {
              "name": "b",
              "description": "The second element for comparison."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "toReversed": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/toReversed",
          "title": "TypedArray.prototype.toReversed()",
          "description": "Since July 2023, this feature works across the latest devices and browser versions. This feature might not work in older devices or browsers.\n\nThe toReversed() method of TypedArray instances is the copying counterpart of the reverse() method. It returns a new typed array with the elements in reversed order. This method has the same algorithm as Array.prototype.toReversed().\n\nNone.",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        }
      },
      "Temporal": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal#browser_compatibility",
        "title": "Temporal",
        "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe Temporal object enables date and time management in various scenarios, including built-in time zone and calendar representation, wall-clock time conversions, arithmetics, formatting, and more. It is designed as a full replacement for the Date object.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": [],
        "Instant": {
          "epochMilliseconds": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/Instant/epochMilliseconds",
            "title": "Temporal.Instant.prototype.epochMilliseconds",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe epochMilliseconds accessor property of Temporal.Instant instances returns an integer representing the number of milliseconds elapsed since the Unix epoch (midnight at the beginning of January 1, 1970, UTC) to this instant. It is equivalent to dividing epochNanoseconds by 1e6 and flooring the result.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "epochNanoseconds": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/Instant/epochNanoseconds",
            "title": "Temporal.Instant.prototype.epochNanoseconds",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe epochNanoseconds accessor property of Temporal.Instant instances returns a BigInt representing the number of nanoseconds elapsed since the Unix epoch (midnight at the beginning of January 1, 1970, UTC) to this instant.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "Instant": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/Instant/Instant",
            "title": "Temporal.Instant()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe Temporal.Instant() constructor creates Temporal.Instant objects.",
            "syntax": [],
            "parameters": [
              {
                "name": "epochNanoseconds",
                "description": "A BigInt representing the number of nanoseconds since the Unix epoch."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "toZonedDateTimeISO": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/Instant/toZonedDateTimeISO",
            "title": "Temporal.Instant.prototype.toZonedDateTimeISO()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe toZonedDateTimeISO() method of Temporal.Instant instances returns a new Temporal.ZonedDateTime object representing this instant in the specified time zone using the ISO 8601 calendar system.",
            "syntax": [],
            "parameters": [
              {
                "name": "timeZone",
                "description": "Either a string or a Temporal.ZonedDateTime instance representing the time zone to use. If a Temporal.ZonedDateTime instance, its time zone is used. If a string, it can be a named time zone identifier, an offset time zone identifier, or a date-time string containing a time zone identifier or an offset (see time zones and offsets for more information)."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "from": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/Instant/from",
            "title": "Temporal.Instant.from()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe Temporal.Instant.from() static method creates a new Temporal.Instant object from another Temporal.Instant object, or an RFC 9557 string.",
            "syntax": [],
            "parameters": [
              {
                "name": "info",
                "description": "One of the following:\n\nA Temporal.Instant instance, which creates a copy of the instance.\nAn RFC 9557 string containing a date, time, and time zone offset. The time zone name is ignored; only the offset is used."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "add": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/Instant/add",
            "title": "Temporal.Instant.prototype.add()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe add() method of Temporal.Instant instances returns a new Temporal.Instant object representing this instant moved forward by a given duration (in a form convertible by Temporal.Duration.from()).",
            "syntax": [],
            "parameters": [
              {
                "name": "duration",
                "description": "A string, an object, or a Temporal.Duration instance representing a duration to add to this instant. It is converted to a Temporal.Duration object using the same algorithm as Temporal.Duration.from()."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "since": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/Instant/since",
            "title": "Temporal.Instant.prototype.since()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe since() method of Temporal.Instant instances returns a new Temporal.Duration object representing the duration from another instant (in a form convertible by Temporal.Instant.from()) to this instant. The duration is positive if the other instant is before this instant, and negative if after.",
            "syntax": [],
            "parameters": [
              {
                "name": "other",
                "description": "A string or a Temporal.Instant instance representing an instant to subtract from this instant. It is converted to a Temporal.Instant object using the same algorithm as Temporal.Instant.from()."
              },
              {
                "name": "options Optional",
                "description": "An object containing the options for Temporal.Duration.prototype.round(), which includes largestUnit, roundingIncrement, roundingMode, and smallestUnit. largestUnit and smallestUnit only accept the units: \"hours\", \"minutes\", \"seconds\", \"milliseconds\", \"microseconds\", \"nanoseconds\", or their singular forms. For largestUnit, the default value \"auto\" means \"seconds\" or smallestUnit, whichever is greater. For smallestUnit, the default value is \"nanoseconds\"."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "toLocaleString": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/Instant/toLocaleString",
            "title": "Temporal.Instant.prototype.toLocaleString()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe toLocaleString() method of Temporal.Instant instances returns a string with a language-sensitive representation of this instant. In implementations with Intl.DateTimeFormat API support, this method delegates to Intl.DateTimeFormat.",
            "syntax": [],
            "parameters": [
              {
                "name": "locales Optional",
                "description": "A string with a BCP 47 language tag, or an array of such strings. Corresponds to the locales parameter of the Intl.DateTimeFormat() constructor."
              },
              {
                "name": "options Optional",
                "description": "An object adjusting the output format. Corresponds to the options parameter of the Intl.DateTimeFormat() constructor."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "round": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/Instant/round",
            "title": "Temporal.Instant.prototype.round()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe round() method of Temporal.Instant instances returns a new Temporal.Instant object representing this instant rounded to the given unit.",
            "syntax": [],
            "parameters": [
              {
                "name": "smallestUnit",
                "description": "A string representing the smallestUnit option. This is a convenience overload, so round(smallestUnit) is equivalent to round({ smallestUnit }), where smallestUnit is a string."
              },
              {
                "name": "options",
                "description": "An object containing some or all of the following properties (in the order they are retrieved and validated):\n\nroundingIncrement Optional\n\nA number (truncated to an integer) representing the rounding increment in the given smallestUnit. Defaults to 1. The increment and the smallestUnit must evenly divide 24 hours; for example, 45 seconds is a divisor of 86400 seconds, and 100 minutes is a divisor of 3600 minutes. This is slightly less strict than the round() method of the other classes, which all require the increment to be a divisor of the maximum value of the unit.\n\nroundingMode Optional\n\nA string specifying how to round off the fractional part of smallestUnit. See Intl.NumberFormat(). Defaults to \"halfExpand\".\n\nsmallestUnit\n\nA string representing the smallest unit to include in the output. The value must be one of the following: \"hour\", \"minute\", \"second\", \"millisecond\", \"microsecond\", \"nanosecond\", or their plural forms. For units larger than \"nanosecond\", fractional parts of the smallestUnit will be rounded according to the roundingIncrement and roundingMode settings."
              },
              {
                "name": "roundingIncrement Optional",
                "description": "A number (truncated to an integer) representing the rounding increment in the given smallestUnit. Defaults to 1. The increment and the smallestUnit must evenly divide 24 hours; for example, 45 seconds is a divisor of 86400 seconds, and 100 minutes is a divisor of 3600 minutes. This is slightly less strict than the round() method of the other classes, which all require the increment to be a divisor of the maximum value of the unit."
              },
              {
                "name": "roundingMode Optional",
                "description": "A string specifying how to round off the fractional part of smallestUnit. See Intl.NumberFormat(). Defaults to \"halfExpand\"."
              },
              {
                "name": "smallestUnit",
                "description": "A string representing the smallest unit to include in the output. The value must be one of the following: \"hour\", \"minute\", \"second\", \"millisecond\", \"microsecond\", \"nanosecond\", or their plural forms. For units larger than \"nanosecond\", fractional parts of the smallestUnit will be rounded according to the roundingIncrement and roundingMode settings."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "until": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/Instant/until",
            "title": "Temporal.Instant.prototype.until()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe until() method of Temporal.Instant instances returns a new Temporal.Duration object representing the duration from this instant to another instant (in a form convertible by Temporal.Instant.from()). The duration is positive if the other instant is after this instant, and negative if before.",
            "syntax": [],
            "parameters": [
              {
                "name": "other",
                "description": "A string or a Temporal.Instant instance representing an instant to subtract this instant from. It is converted to a Temporal.Instant object using the same algorithm as Temporal.Instant.from()."
              },
              {
                "name": "options Optional",
                "description": "The same options as since()."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "toJSON": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/Instant/toJSON",
            "title": "Temporal.Instant.prototype.toJSON()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe toJSON() method of Temporal.Instant instances returns a string representing this instant in the same RFC 9557 format as calling toString(). It is intended to be implicitly called by JSON.stringify().",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "fromEpochMilliseconds": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/Instant/fromEpochMilliseconds",
            "title": "Temporal.Instant.fromEpochMilliseconds()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe Temporal.Instant.fromEpochMilliseconds() static method creates a new Temporal.Instant object from the number of milliseconds since the Unix epoch (midnight at the beginning of January 1, 1970, UTC).",
            "syntax": [],
            "parameters": [
              {
                "name": "epochMilliseconds",
                "description": "A number representing the number of milliseconds since the Unix epoch. Internally, it is converted to a BigInt and multiplied by 1e6 to get the number of nanoseconds."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "fromEpochNanoseconds": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/Instant/fromEpochNanoseconds",
            "title": "Temporal.Instant.fromEpochNanoseconds()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe Temporal.Instant.fromEpochNanoseconds() static method creates a new Temporal.Instant object from the number of nanoseconds since the Unix epoch (midnight at the beginning of January 1, 1970, UTC).",
            "syntax": [],
            "parameters": [
              {
                "name": "epochNanoseconds",
                "description": "A BigInt representing the number of nanoseconds since the Unix epoch."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "subtract": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/Instant/subtract",
            "title": "Temporal.Instant.prototype.subtract()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe subtract() method of Temporal.Instant instances returns a new Temporal.Instant object representing this instant moved backward by a given duration (in a form convertible by Temporal.Duration.from()).",
            "syntax": [],
            "parameters": [
              {
                "name": "duration",
                "description": "A string, an object, or a Temporal.Duration instance representing a duration to subtract from this instant. It is converted to a Temporal.Duration object using the same algorithm as Temporal.Duration.from()."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "equals": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/Instant/equals",
            "title": "Temporal.Instant.prototype.equals()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe equals() method of Temporal.Instant instances returns true if this instant is equivalent in value to another instant (in a form convertible by Temporal.Instant.from()), and false otherwise. They are compared by their epochNanoseconds. It is equivalent to Temporal.Instant.compare(this, other) === 0.",
            "syntax": [],
            "parameters": [
              {
                "name": "other",
                "description": "A string or a Temporal.Instant instance representing the other instant to compare. It is converted to a Temporal.Instant object using the same algorithm as Temporal.Instant.from()."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "toString": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/Instant/toString",
            "title": "Temporal.Instant.prototype.toString()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe toString() method of Temporal.Instant instances returns a string representing this instant in the RFC 9557 format using the specified time zone.",
            "syntax": [],
            "parameters": [
              {
                "name": "options Optional",
                "description": "An object containing some or all of the following properties (in the order they are retrieved and validated):\n\nfractionalSecondDigits Optional\n\nEither an integer from 0 to 9, or the string \"auto\". The default is \"auto\". If \"auto\", then trailing zeros are removed from the fractional seconds. Otherwise, the fractional part of the second component contains this many digits, padded with zeros or rounded as necessary.\n\nroundingMode Optional\n\nA string specifying how to round off fractional second digits beyond fractionalSecondDigits. See Intl.NumberFormat(). Defaults to \"trunc\".\n\nsmallestUnit Optional\n\nA string specifying the smallest unit to include in the output. Possible values are \"minute\", \"second\", \"millisecond\", \"microsecond\", and \"nanosecond\", or their plural forms, which (except \"minute\") are equivalent to fractionalSecondDigits values of 0, 3, 6, 9, respectively. If specified, then fractionalSecondDigits is ignored.\n\ntimeZone Optional\n\nEither a string or a Temporal.ZonedDateTime instance representing the time zone to use. If a Temporal.ZonedDateTime instance, its time zone is used. If a string, it can be a named time zone identifier, an offset time zone identifier, or a date-time string containing a time zone identifier or an offset (see time zones and offsets for more information). Defaults to \"UTC\"."
              },
              {
                "name": "fractionalSecondDigits Optional",
                "description": "Either an integer from 0 to 9, or the string \"auto\". The default is \"auto\". If \"auto\", then trailing zeros are removed from the fractional seconds. Otherwise, the fractional part of the second component contains this many digits, padded with zeros or rounded as necessary."
              },
              {
                "name": "roundingMode Optional",
                "description": "A string specifying how to round off fractional second digits beyond fractionalSecondDigits. See Intl.NumberFormat(). Defaults to \"trunc\"."
              },
              {
                "name": "smallestUnit Optional",
                "description": "A string specifying the smallest unit to include in the output. Possible values are \"minute\", \"second\", \"millisecond\", \"microsecond\", and \"nanosecond\", or their plural forms, which (except \"minute\") are equivalent to fractionalSecondDigits values of 0, 3, 6, 9, respectively. If specified, then fractionalSecondDigits is ignored."
              },
              {
                "name": "timeZone Optional",
                "description": "Either a string or a Temporal.ZonedDateTime instance representing the time zone to use. If a Temporal.ZonedDateTime instance, its time zone is used. If a string, it can be a named time zone identifier, an offset time zone identifier, or a date-time string containing a time zone identifier or an offset (see time zones and offsets for more information). Defaults to \"UTC\"."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "valueOf": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/Instant/valueOf",
            "title": "Temporal.Instant.prototype.valueOf()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe valueOf() method of Temporal.Instant instances throws a TypeError, which prevents Temporal.Instant instances from being implicitly converted to primitives when used in arithmetic or comparison operations.",
            "syntax": [],
            "parameters": [
              {
                "name": "TypeError",
                "description": "Always thrown."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "compare": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/Instant/compare",
            "title": "Temporal.Instant.compare()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe Temporal.Instant.compare() static method returns a number (-1, 0, or 1) indicating whether the first instant comes before, is the same as, or comes after the second instant. It is equivalent to comparing the epochNanoseconds of the two instants.",
            "syntax": [],
            "parameters": [
              {
                "name": "instant1",
                "description": "A string or a Temporal.Instant instance representing the first instant to compare. It is converted to a Temporal.Instant object using the same algorithm as Temporal.Instant.from()."
              },
              {
                "name": "instant2",
                "description": "The second instant to compare, converted to a Temporal.Instant object using the same algorithm as instant1."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          }
        },
        "PlainDateTime": {
          "second": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/second",
            "title": "Temporal.PlainDateTime.prototype.second",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe second accessor property of Temporal.PlainDateTime instances returns a integer from 0 to 59 representing the second component of this time.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "dayOfWeek": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/dayOfWeek",
            "title": "Temporal.PlainDateTime.prototype.dayOfWeek",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe dayOfWeek accessor property of Temporal.PlainDateTime instances returns a positive integer representing the 1-based day index in the week of this date. Days in a week are numbered sequentially from 1 to daysInWeek, with each number mapping to its name. It is calendar-dependent.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "add": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/add",
            "title": "Temporal.PlainDateTime.prototype.add()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe add() method of Temporal.PlainDateTime instances returns a new Temporal.PlainDateTime object representing this date-time moved forward by a given duration (in a form convertible by Temporal.Duration.from()).",
            "syntax": [],
            "parameters": [
              {
                "name": "duration",
                "description": "A string, an object, or a Temporal.Duration instance representing a duration to add to this date-time. It is converted to a Temporal.Duration object using the same algorithm as Temporal.Duration.from()."
              },
              {
                "name": "options Optional",
                "description": "An object containing the following property:\n\noverflow Optional\n\nA string specifying the behavior when a date component is out of range. Possible values are:\n\n\"constrain\" (default)\n\nThe date component is clamped to the valid range.\n\n\"reject\"\n\nA RangeError is thrown if the date component is out of range."
              },
              {
                "name": "overflow Optional",
                "description": "A string specifying the behavior when a date component is out of range. Possible values are:\n\n\"constrain\" (default)\n\nThe date component is clamped to the valid range.\n\n\"reject\"\n\nA RangeError is thrown if the date component is out of range."
              },
              {
                "name": "\"constrain\" (default)",
                "description": "The date component is clamped to the valid range."
              },
              {
                "name": "\"reject\"",
                "description": "A RangeError is thrown if the date component is out of range."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "with": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/with",
            "title": "Temporal.PlainDateTime.prototype.with()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe with() method of Temporal.PlainDateTime instances returns a new Temporal.PlainDateTime object representing this date-time with some fields replaced by new values. Because all Temporal objects are designed to be immutable, this method essentially functions as the setter for the date-time's fields.",
            "syntax": [],
            "parameters": [
              {
                "name": "info",
                "description": "An object containing at least one of the properties recognized by Temporal.PlainDateTime.from() (except calendar): day, era and eraYear, hour, microsecond, millisecond, minute, month, monthCode, nanosecond, second, year. Unspecified properties use the values from the original date-time. You only need to provide one of month or monthCode, and one of era and eraYear or year, and the other will be updated accordingly."
              },
              {
                "name": "options Optional",
                "description": "An object containing the following property:\n\noverflow Optional\n\nA string specifying the behavior when a date component is out of range. Possible values are:\n\n\"constrain\" (default)\n\nThe date component is clamped to the valid range.\n\n\"reject\"\n\nA RangeError is thrown if the date component is out of range."
              },
              {
                "name": "overflow Optional",
                "description": "A string specifying the behavior when a date component is out of range. Possible values are:\n\n\"constrain\" (default)\n\nThe date component is clamped to the valid range.\n\n\"reject\"\n\nA RangeError is thrown if the date component is out of range."
              },
              {
                "name": "\"constrain\" (default)",
                "description": "The date component is clamped to the valid range."
              },
              {
                "name": "\"reject\"",
                "description": "A RangeError is thrown if the date component is out of range."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "toPlainDate": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/toPlainDate",
            "title": "Temporal.PlainDateTime.prototype.toPlainDate()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe toPlainDate() method of Temporal.PlainDateTime instances returns a new Temporal.PlainDate object representing the date part (year, month, day) of this date-time in the same calendar system.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "since": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/since",
            "title": "Temporal.PlainDateTime.prototype.since()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe since() method of Temporal.PlainDateTime instances returns a new Temporal.Duration object representing the duration from another date-time (in a form convertible by Temporal.PlainDateTime.from()) to this date-time. The duration is positive if the other date-time is before this date-time, and negative if after.",
            "syntax": [],
            "parameters": [
              {
                "name": "other",
                "description": "A string, an object, or a Temporal.PlainDateTime instance representing a date-time to subtract from this date-time. It is converted to a Temporal.PlainDateTime object using the same algorithm as Temporal.PlainDateTime.from(). It must have the same calendar as this."
              },
              {
                "name": "options Optional",
                "description": "An object containing the options for Temporal.Duration.prototype.round(), which includes largestUnit, roundingIncrement, roundingMode, and smallestUnit. largestUnit and smallestUnit accept all possible units. For largestUnit, the default value \"auto\" means \"days\" or smallestUnit, whichever is greater. For smallestUnit, the default value is \"nanoseconds\". The current date is used as the relativeTo option. Note that using units larger than \"days\" may make the duration not portable to other calendars or dates."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "daysInYear": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/daysInYear",
            "title": "Temporal.PlainDateTime.prototype.daysInYear",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe daysInYear accessor property of Temporal.PlainDateTime instances returns a positive integer representing the number of days in the year of this date. It is calendar-dependent.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "month": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/month",
            "title": "Temporal.PlainDateTime.prototype.month",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe month accessor property of Temporal.PlainDateTime instances returns a positive integer representing the 1-based month index in the year of this date. The first month of this year is 1, and the last month is the monthsInYear. It is calendar-dependent.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "hour": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/hour",
            "title": "Temporal.PlainDateTime.prototype.hour",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe hour accessor property of Temporal.PlainDateTime instances returns a integer from 0 to 23 representing the hour component of this time.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "toLocaleString": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/toLocaleString",
            "title": "Temporal.PlainDateTime.prototype.toLocaleString()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe toLocaleString() method of Temporal.PlainDateTime instances returns a string with a language-sensitive representation of this date-time. In implementations with Intl.DateTimeFormat API support, this method delegates to Intl.DateTimeFormat.",
            "syntax": [],
            "parameters": [
              {
                "name": "locales Optional",
                "description": "A string with a BCP 47 language tag, or an array of such strings. Corresponds to the locales parameter of the Intl.DateTimeFormat() constructor."
              },
              {
                "name": "options Optional",
                "description": "An object adjusting the output format. Corresponds to the options parameter of the Intl.DateTimeFormat() constructor. If this date-time's calendar is not \"iso8601\", the calendar option must be provided with the same value; otherwise, if this date-time's calendar is \"iso8601\", the calendar option can be any value. Regarding the date-time component options and the style shortcuts (dateStyle and timeStyle), the options should follow one of these forms:\n\nProvide none of them: year, month, day, hour, minute, and second will default to \"numeric\".\nProvide at least one of dateStyle or timeStyle: the date-time components will be set according to the specified style and the locale.\nProvide some date-time component options. Only the specified date-time components will be included in the output."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "toPlainTime": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/toPlainTime",
            "title": "Temporal.PlainDateTime.prototype.toPlainTime()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe toPlainTime() method of Temporal.PlainDateTime instances returns a new Temporal.PlainTime object representing the time part (hour, minute, second, and subsecond components) of this date-time.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "minute": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/minute",
            "title": "Temporal.PlainDateTime.prototype.minute",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe minute accessor property of Temporal.PlainDateTime instances returns a integer from 0 to 59 representing the minute component of this time.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "monthCode": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/monthCode",
            "title": "Temporal.PlainDateTime.prototype.monthCode",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe monthCode accessor property of Temporal.PlainDateTime instances returns a calendar-specific string representing the month of this date. It is calendar-dependent.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "toZonedDateTime": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/toZonedDateTime",
            "title": "Temporal.PlainDateTime.prototype.toZonedDateTime()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe toZonedDateTime() method of Temporal.PlainDateTime instances returns a new Temporal.ZonedDateTime instance representing the same date-time as this plain date-time, but in the specified time zone.",
            "syntax": [],
            "parameters": [
              {
                "name": "timeZone",
                "description": "Either a string or a Temporal.ZonedDateTime instance representing the time zone to use. If a Temporal.ZonedDateTime instance, its time zone is used. If a string, it can be a named time zone identifier, an offset time zone identifier, or a date-time string containing a time zone identifier or an offset (see time zones and offsets for more information)."
              },
              {
                "name": "options Optional",
                "description": "An object containing the following property:\n\ndisambiguation Optional\n\nA string specifying what to do when this plain time corresponds to zero or more than one instants in the time zone, usually because of daylight saving time shifts. Possible values are \"compatible\", \"earlier\", \"later\", and \"reject\". Defaults to \"compatible\". For more information about these values, see ambiguity and gaps from local time to UTC time."
              },
              {
                "name": "disambiguation Optional",
                "description": "A string specifying what to do when this plain time corresponds to zero or more than one instants in the time zone, usually because of daylight saving time shifts. Possible values are \"compatible\", \"earlier\", \"later\", and \"reject\". Defaults to \"compatible\". For more information about these values, see ambiguity and gaps from local time to UTC time."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "withCalendar": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/withCalendar",
            "title": "Temporal.PlainDateTime.prototype.withCalendar()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe withCalendar() method of Temporal.PlainDateTime instances returns a new Temporal.PlainDateTime object representing this date-time interpreted in the new calendar system. Because all Temporal objects are designed to be immutable, this method essentially functions as the setter for the date-time's calendarId property.",
            "syntax": [],
            "parameters": [
              {
                "name": "calendar",
                "description": "A string that corresponds to the calendarId property. See Intl.supportedValuesOf() for a list of commonly supported calendar types."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "dayOfYear": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/dayOfYear",
            "title": "Temporal.PlainDateTime.prototype.dayOfYear",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe dayOfYear accessor property of Temporal.PlainDateTime instances returns a positive integer representing the 1-based day index in the year of this date. The first day of this year is 1, and the last day is the daysInYear. It is calendar-dependent.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "until": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/until",
            "title": "Temporal.PlainDateTime.prototype.until()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe until() method of Temporal.PlainDateTime instances returns a new Temporal.Duration object representing the duration from this date-time to another date-time (in a form convertible by Temporal.PlainDateTime.from()). The duration is positive if the other date-time is after this date-time, and negative if before.",
            "syntax": [],
            "parameters": [
              {
                "name": "other",
                "description": "A string, an object, or a Temporal.PlainDateTime instance representing a date-time to subtract this date-time from. It is converted to a Temporal.PlainDateTime object using the same algorithm as Temporal.PlainDateTime.from(). It must have the same calendar as this."
              },
              {
                "name": "options Optional",
                "description": "The same options as since()."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "daysInWeek": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/daysInWeek",
            "title": "Temporal.PlainDateTime.prototype.daysInWeek",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe daysInWeek accessor property of Temporal.PlainDateTime instances returns a positive integer representing the number of days in the week of this date. It is calendar-dependent.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "valueOf": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/valueOf",
            "title": "Temporal.PlainDateTime.prototype.valueOf()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe valueOf() method of Temporal.PlainDateTime instances throws a TypeError, which prevents Temporal.PlainDateTime instances from being implicitly converted to primitives when used in arithmetic or comparison operations.",
            "syntax": [],
            "parameters": [
              {
                "name": "TypeError",
                "description": "Always thrown."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "millisecond": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/millisecond",
            "title": "Temporal.PlainDateTime.prototype.millisecond",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe millisecond accessor property of Temporal.PlainDateTime instances returns a integer from 0 to 999 representing the millisecond (10-3 second) component of this time.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "day": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/day",
            "title": "Temporal.PlainDateTime.prototype.day",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe day accessor property of Temporal.PlainDateTime instances returns a positive integer representing the 1-based day index in the month of this date, which is the same day number you would see on a calendar. It is calendar-dependent.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "daysInMonth": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/daysInMonth",
            "title": "Temporal.PlainDateTime.prototype.daysInMonth",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe daysInMonth accessor property of Temporal.PlainDateTime instances returns a positive integer representing the number of days in the month of this date. It is calendar-dependent.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "inLeapYear": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/inLeapYear",
            "title": "Temporal.PlainDateTime.prototype.inLeapYear",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe inLeapYear accessor property of Temporal.PlainDateTime instances returns a boolean indicating whether this date is in a leap year. A leap year is a year that has more days (due to a leap day or leap month) than a common year. It is calendar-dependent.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "nanosecond": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/nanosecond",
            "title": "Temporal.PlainDateTime.prototype.nanosecond",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe nanosecond accessor property of Temporal.PlainDateTime instances returns a integer from 0 to 999 representing the nanosecond (10-9 second) component of this time.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "eraYear": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/eraYear",
            "title": "Temporal.PlainDateTime.prototype.eraYear",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe eraYear accessor property of Temporal.PlainDateTime instances returns a non-negative integer representing the year of this date within the era, or undefined if the calendar does not use eras (e.g., ISO 8601). The year index usually starts from 1 (more common) or 0, and years in an era can decrease with time (e.g., Gregorian BCE). era and eraYear together uniquely identify a year in a calendar, in the same way that year does. It is calendar-dependent.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "PlainDateTime": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/PlainDateTime",
            "title": "Temporal.PlainDateTime()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe Temporal.PlainDateTime() constructor creates Temporal.PlainDateTime objects.",
            "syntax": [],
            "parameters": [
              {
                "name": "year",
                "description": "A number, truncated to an integer, representing the year in the ISO calendar system."
              },
              {
                "name": "month",
                "description": "A number, truncated to an integer, representing the month in the ISO calendar system."
              },
              {
                "name": "day",
                "description": "A number, truncated to an integer, representing the day of the month in the ISO calendar system."
              },
              {
                "name": "hour Optional",
                "description": "A number, truncated to an integer, representing the hour component."
              },
              {
                "name": "minute Optional",
                "description": "A number, truncated to an integer, representing the minute component."
              },
              {
                "name": "second Optional",
                "description": "A number, truncated to an integer, representing the second component."
              },
              {
                "name": "millisecond Optional",
                "description": "A number, truncated to an integer, representing the millisecond component."
              },
              {
                "name": "microsecond Optional",
                "description": "A number, truncated to an integer, representing the microsecond component."
              },
              {
                "name": "nanosecond Optional",
                "description": "A number, truncated to an integer, representing the nanosecond component."
              },
              {
                "name": "calendar Optional",
                "description": "A string representing the calendar to use. See Intl.supportedValuesOf() for a list of commonly supported calendar types. Defaults to \"iso8601\". Note that irrespective of the calendar, the year, month, and day must be in the ISO 8601 calendar system."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "monthsInYear": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/monthsInYear",
            "title": "Temporal.PlainDateTime.prototype.monthsInYear",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe monthsInYear accessor property of Temporal.PlainDateTime instances returns a positive integer representing the number of months in the year of this date. It is calendar-dependent.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "calendarId": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/calendarId",
            "title": "Temporal.PlainDateTime.prototype.calendarId",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe calendarId accessor property of Temporal.PlainDateTime instances returns a string representing the calendar used to interpret the internal ISO 8601 date.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "weekOfYear": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/weekOfYear",
            "title": "Temporal.PlainDateTime.prototype.weekOfYear",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe weekOfYear accessor property of Temporal.PlainDateTime instances returns a positive integer representing the 1-based week index in the yearOfWeek of this date, or undefined if the calendar does not have a well-defined week system. The first week of the year is 1. It is calendar-dependent.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "toString": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/toString",
            "title": "Temporal.PlainDateTime.prototype.toString()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe toString() method of Temporal.PlainDateTime instances returns a string representing this date-time in the RFC 9557 format.",
            "syntax": [],
            "parameters": [
              {
                "name": "options Optional",
                "description": "An object containing the following property:\n\ncalendarName Optional\n\nWhether to show the calendar annotation ([u-ca=calendar_id]) in the return value. Possible values are:\n\n\"auto\" (default)\n\nInclude the calendar annotation if the calendar is not \"iso8601\".\n\n\"always\"\n\nAlways include the calendar annotation.\n\n\"never\"\n\nNever include the calendar annotation. This makes the returned string not recoverable to the same Temporal.PlainDateTime instance, although the date value still remains the same.\n\n\"critical\"\n\nAlways include the calendar annotation, and add a critical flag: [!u-ca=calendar_id]. Useful when sending the string to certain systems, but not useful for Temporal itself.\n\n\n\nfractionalSecondDigits Optional\n\nEither an integer from 0 to 9, or the string \"auto\". The default is \"auto\". If \"auto\", then trailing zeros are removed from the fractional seconds. Otherwise, the fractional part of the second component contains this many digits, padded with zeros or rounded as necessary.\n\nroundingMode Optional\n\nA string specifying how to round off fractional second digits beyond fractionalSecondDigits. See Intl.NumberFormat(). Defaults to \"trunc\".\n\nsmallestUnit Optional\n\nA string specifying the smallest unit to include in the output. Possible values are \"minute\", \"second\", \"millisecond\", \"microsecond\", and \"nanosecond\", or their plural forms, which (except \"minute\") are equivalent to fractionalSecondDigits values of 0, 3, 6, 9, respectively. If specified, then fractionalSecondDigits is ignored."
              },
              {
                "name": "calendarName Optional",
                "description": "Whether to show the calendar annotation ([u-ca=calendar_id]) in the return value. Possible values are:\n\n\"auto\" (default)\n\nInclude the calendar annotation if the calendar is not \"iso8601\".\n\n\"always\"\n\nAlways include the calendar annotation.\n\n\"never\"\n\nNever include the calendar annotation. This makes the returned string not recoverable to the same Temporal.PlainDateTime instance, although the date value still remains the same.\n\n\"critical\"\n\nAlways include the calendar annotation, and add a critical flag: [!u-ca=calendar_id]. Useful when sending the string to certain systems, but not useful for Temporal itself."
              },
              {
                "name": "\"auto\" (default)",
                "description": "Include the calendar annotation if the calendar is not \"iso8601\"."
              },
              {
                "name": "\"always\"",
                "description": "Always include the calendar annotation."
              },
              {
                "name": "\"never\"",
                "description": "Never include the calendar annotation. This makes the returned string not recoverable to the same Temporal.PlainDateTime instance, although the date value still remains the same."
              },
              {
                "name": "\"critical\"",
                "description": "Always include the calendar annotation, and add a critical flag: [!u-ca=calendar_id]. Useful when sending the string to certain systems, but not useful for Temporal itself."
              },
              {
                "name": "fractionalSecondDigits Optional",
                "description": "Either an integer from 0 to 9, or the string \"auto\". The default is \"auto\". If \"auto\", then trailing zeros are removed from the fractional seconds. Otherwise, the fractional part of the second component contains this many digits, padded with zeros or rounded as necessary."
              },
              {
                "name": "roundingMode Optional",
                "description": "A string specifying how to round off fractional second digits beyond fractionalSecondDigits. See Intl.NumberFormat(). Defaults to \"trunc\"."
              },
              {
                "name": "smallestUnit Optional",
                "description": "A string specifying the smallest unit to include in the output. Possible values are \"minute\", \"second\", \"millisecond\", \"microsecond\", and \"nanosecond\", or their plural forms, which (except \"minute\") are equivalent to fractionalSecondDigits values of 0, 3, 6, 9, respectively. If specified, then fractionalSecondDigits is ignored."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "subtract": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/subtract",
            "title": "Temporal.PlainDateTime.prototype.subtract()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe subtract() method of Temporal.PlainDateTime instances returns a new Temporal.PlainDateTime object representing this date-time moved backward by a given duration (in a form convertible by Temporal.Duration.from()).",
            "syntax": [],
            "parameters": [
              {
                "name": "duration",
                "description": "A string, an object, or a Temporal.Duration instance representing a duration to subtract from this date-time. It is converted to a Temporal.Duration object using the same algorithm as Temporal.Duration.from()."
              },
              {
                "name": "options Optional",
                "description": "An object containing the following property:\n\noverflow Optional\n\nA string specifying the behavior when a date component is out of range. Possible values are:\n\n\"constrain\" (default)\n\nThe date component is clamped to the valid range.\n\n\"reject\"\n\nA RangeError is thrown if the date component is out of range."
              },
              {
                "name": "overflow Optional",
                "description": "A string specifying the behavior when a date component is out of range. Possible values are:\n\n\"constrain\" (default)\n\nThe date component is clamped to the valid range.\n\n\"reject\"\n\nA RangeError is thrown if the date component is out of range."
              },
              {
                "name": "\"constrain\" (default)",
                "description": "The date component is clamped to the valid range."
              },
              {
                "name": "\"reject\"",
                "description": "A RangeError is thrown if the date component is out of range."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "from": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/from",
            "title": "Temporal.PlainDateTime.from()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe Temporal.PlainDateTime.from() static method creates a new Temporal.PlainDateTime object from another Temporal.PlainDateTime object, an object with date and time properties, or an RFC 9557 string.",
            "syntax": [],
            "parameters": [
              {
                "name": "info",
                "description": "One of the following:\n\nA Temporal.PlainDateTime instance, which creates a copy of the instance.\nAn RFC 9557 string containing a date, optionally a time, and optionally a calendar.\nAn object containing properties that are recognized by either Temporal.PlainDate.from() (calendar, era, eraYear, year, month, monthCode, day) or Temporal.PlainTime.from() (hour, minute, second, millisecond, microsecond, nanosecond). The info should explicitly specify a year (as year or era and eraYear), a month (as month or monthCode), and a day; others are optional and will be set to their default values."
              },
              {
                "name": "options Optional",
                "description": "An object containing the following property:\n\noverflow Optional\n\nA string specifying the behavior when a date component is out of range (when using the object info). Possible values are:\n\n\"constrain\" (default)\n\nThe date component is clamped to the valid range.\n\n\"reject\"\n\nA RangeError is thrown if the date component is out of range."
              },
              {
                "name": "overflow Optional",
                "description": "A string specifying the behavior when a date component is out of range (when using the object info). Possible values are:\n\n\"constrain\" (default)\n\nThe date component is clamped to the valid range.\n\n\"reject\"\n\nA RangeError is thrown if the date component is out of range."
              },
              {
                "name": "\"constrain\" (default)",
                "description": "The date component is clamped to the valid range."
              },
              {
                "name": "\"reject\"",
                "description": "A RangeError is thrown if the date component is out of range."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "equals": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/equals",
            "title": "Temporal.PlainDateTime.prototype.equals()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe equals() method of Temporal.PlainDateTime instances returns true if this date-time is equivalent in value to another date-time (in a form convertible by Temporal.PlainDateTime.from()), and false otherwise. They are compared both by their date and time values and their calendars, so two date-times from different calendars may be considered equal by Temporal.PlainDateTime.compare() but not by equals().",
            "syntax": [],
            "parameters": [
              {
                "name": "other",
                "description": "A string, an object, or a Temporal.PlainDateTime instance representing the other date-time to compare. It is converted to a Temporal.PlainDateTime object using the same algorithm as Temporal.PlainDateTime.from()."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "round": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/round",
            "title": "Temporal.PlainDateTime.prototype.round()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe round() method of Temporal.PlainDateTime instances returns a new Temporal.PlainDateTime object representing this date-time rounded to the given unit.",
            "syntax": [],
            "parameters": [
              {
                "name": "smallestUnit",
                "description": "A string representing the smallestUnit option. This is a convenience overload, so round(smallestUnit) is equivalent to round({ smallestUnit }), where smallestUnit is a string."
              },
              {
                "name": "options",
                "description": "An object containing some or all of the following properties (in the order they are retrieved and validated):\n\nroundingIncrement Optional\n\nA number (truncated to an integer) representing the rounding increment in the given smallestUnit. Defaults to 1. For all values of smallestUnit except \"day\", the increment must be a divisor of the maximum value of the unit; for example, if the unit is hours, the increment must be a divisor of 24 and must not be 24 itself, which means it can be 1, 2, 3, 4, 6, 8, or 12. For \"day\", the increment must be 1.\n\nroundingMode Optional\n\nA string specifying how to round off the fractional part of smallestUnit. See Intl.NumberFormat(). Defaults to \"halfExpand\".\n\nsmallestUnit\n\nA string representing the smallest unit to include in the output. The value must be one of the following: \"day\", \"hour\", \"minute\", \"second\", \"millisecond\", \"microsecond\", \"nanosecond\", or their plural forms. For units larger than \"nanosecond\", fractional parts of the smallestUnit will be rounded according to the roundingIncrement and roundingMode settings."
              },
              {
                "name": "roundingIncrement Optional",
                "description": "A number (truncated to an integer) representing the rounding increment in the given smallestUnit. Defaults to 1. For all values of smallestUnit except \"day\", the increment must be a divisor of the maximum value of the unit; for example, if the unit is hours, the increment must be a divisor of 24 and must not be 24 itself, which means it can be 1, 2, 3, 4, 6, 8, or 12. For \"day\", the increment must be 1."
              },
              {
                "name": "roundingMode Optional",
                "description": "A string specifying how to round off the fractional part of smallestUnit. See Intl.NumberFormat(). Defaults to \"halfExpand\"."
              },
              {
                "name": "smallestUnit",
                "description": "A string representing the smallest unit to include in the output. The value must be one of the following: \"day\", \"hour\", \"minute\", \"second\", \"millisecond\", \"microsecond\", \"nanosecond\", or their plural forms. For units larger than \"nanosecond\", fractional parts of the smallestUnit will be rounded according to the roundingIncrement and roundingMode settings."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "microsecond": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/microsecond",
            "title": "Temporal.PlainDateTime.prototype.microsecond",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe microsecond accessor property of Temporal.PlainDateTime instances returns a integer from 0 to 999 representing the microsecond (10-6 second) component of this time.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "era": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/era",
            "title": "Temporal.PlainDateTime.prototype.era",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe era accessor property of Temporal.PlainDateTime instances returns a calendar-specific lowercase string representing the era of this date, or undefined if the calendar does not use eras (e.g., ISO 8601). era and eraYear together uniquely identify a year in a calendar, in the same way that year does. It is calendar-dependent.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "year": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/year",
            "title": "Temporal.PlainDateTime.prototype.year",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe year accessor property of Temporal.PlainDateTime instances returns an integer representing the number of years of this date relative to the start of a calendar-specific epoch year. It is calendar-dependent.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "yearOfWeek": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/yearOfWeek",
            "title": "Temporal.PlainDateTime.prototype.yearOfWeek",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe yearOfWeek accessor property of Temporal.PlainDateTime instances returns an integer representing the year to be paired with the weekOfYear of this date, or undefined if the calendar does not have a well-defined week system. It is calendar-dependent.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "withPlainTime": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/withPlainTime",
            "title": "Temporal.PlainDateTime.prototype.withPlainTime()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe withPlainTime() method of Temporal.PlainDateTime instances returns a new Temporal.PlainDateTime object representing this date-time with the time part entirely replaced by the new time (in a form convertible by Temporal.PlainTime.from())",
            "syntax": [],
            "parameters": [
              {
                "name": "plainTime Optional",
                "description": "A string, an object, or a Temporal.PlainTime instance representing the new time. It is converted to a Temporal.PlainTime object using the same algorithm as Temporal.PlainTime.from(). If not specified, the time part is set to 00:00:00."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "toJSON": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/toJSON",
            "title": "Temporal.PlainDateTime.prototype.toJSON()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe toJSON() method of Temporal.PlainDateTime instances returns a string representing this date-time in the same RFC 9557 format as calling toString(). It is intended to be implicitly called by JSON.stringify().",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "compare": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDateTime/compare",
            "title": "Temporal.PlainDateTime.compare()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe Temporal.PlainDateTime.compare() static method returns a number (-1, 0, or 1) indicating whether the first date-time comes before, is the same as, or comes after the second date-time. Equivalent to first comparing their dates, then comparing their times if the dates are the same.",
            "syntax": [],
            "parameters": [
              {
                "name": "dateTime1",
                "description": "A string, an object, or a Temporal.PlainDateTime instance representing the first date-time to compare. It is converted to a Temporal.PlainDateTime object using the same algorithm as Temporal.PlainDateTime.from()."
              },
              {
                "name": "dateTime2",
                "description": "The second date-time to compare, converted to a Temporal.PlainDateTime object using the same algorithm as dateTime1."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          }
        },
        "PlainDate": {
          "monthCode": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/monthCode",
            "title": "Temporal.PlainDate.prototype.monthCode",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe monthCode accessor property of Temporal.PlainDate instances returns a calendar-specific string representing the month of this date. It is calendar-dependent.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "daysInMonth": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/daysInMonth",
            "title": "Temporal.PlainDate.prototype.daysInMonth",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe daysInMonth accessor property of Temporal.PlainDate instances returns a positive integer representing the number of days in the month of this date. It is calendar-dependent.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "day": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/day",
            "title": "Temporal.PlainDate.prototype.day",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe day accessor property of Temporal.PlainDate instances returns a positive integer representing the 1-based day index in the month of this date, which is the same day number you would see on a calendar. It is calendar-dependent.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "compare": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/compare",
            "title": "Temporal.PlainDate.compare()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe Temporal.PlainDate.compare() static method returns a number (-1, 0, or 1) indicating whether the first date comes before, is the same as, or comes after the second date. Equivalent to comparing the year, month, and day fields of the underlying ISO 8601 dates.",
            "syntax": [],
            "parameters": [
              {
                "name": "date1",
                "description": "A string, an object, or a Temporal.PlainDate instance representing the first date to compare. It is converted to a Temporal.PlainDate object using the same algorithm as Temporal.PlainDate.from()."
              },
              {
                "name": "date2",
                "description": "The second date to compare, converted to a Temporal.PlainDate object using the same algorithm as date1."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "toZonedDateTime": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/toZonedDateTime",
            "title": "Temporal.PlainDate.prototype.toZonedDateTime()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe toZonedDateTime() method of Temporal.PlainDate instances returns a new Temporal.ZonedDateTime object representing this date, a supplied time, and a supplied time zone, in the same calendar system.",
            "syntax": [],
            "parameters": [
              {
                "name": "timeZone",
                "description": "Either a string or a Temporal.ZonedDateTime instance representing the timeZone option. This is a convenience overload, so toZonedDateTime(timeZone) is equivalent to toZonedDateTime({ timeZone }), where timeZone is a string or Temporal.ZonedDateTime. This overload is chosen when the first argument is not an object, or the object's timeZone property is undefined (because ZonedDateTime instances have a timeZoneId property instead)."
              },
              {
                "name": "info",
                "description": "An object containing some or all of the following properties (in the order they are retrieved and validated):\n\nplainTime Optional\n\nA string, an object, or a Temporal.PlainTime instance representing the time component of the resulting ZonedDateTime. It is converted to a Temporal.PlainTime object using the same algorithm as Temporal.PlainTime.from(). Defaults to the first valid time in this time zone on this calendar date, which is usually \"00:00:00\", but may be different if, for example, daylight saving time skips midnight.\n\ntimeZone\n\nEither a string or a Temporal.ZonedDateTime instance representing the time zone to use. If a Temporal.ZonedDateTime instance, its time zone is used. If a string, it can be a named time zone identifier, an offset time zone identifier, or a date-time string containing a time zone identifier or an offset (see time zones and offsets for more information)."
              },
              {
                "name": "plainTime Optional",
                "description": "A string, an object, or a Temporal.PlainTime instance representing the time component of the resulting ZonedDateTime. It is converted to a Temporal.PlainTime object using the same algorithm as Temporal.PlainTime.from(). Defaults to the first valid time in this time zone on this calendar date, which is usually \"00:00:00\", but may be different if, for example, daylight saving time skips midnight."
              },
              {
                "name": "timeZone",
                "description": "Either a string or a Temporal.ZonedDateTime instance representing the time zone to use. If a Temporal.ZonedDateTime instance, its time zone is used. If a string, it can be a named time zone identifier, an offset time zone identifier, or a date-time string containing a time zone identifier or an offset (see time zones and offsets for more information)."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "equals": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/equals",
            "title": "Temporal.PlainDate.prototype.equals()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe equals() method of Temporal.PlainDate instances returns true if this date is equivalent in value to another date (in a form convertible by Temporal.PlainDate.from()), and false otherwise. They are compared both by their date values and their calendars, so two dates from different calendars may be considered equal by Temporal.PlainDate.compare() but not by equals().",
            "syntax": [],
            "parameters": [
              {
                "name": "other",
                "description": "A string, an object, or a Temporal.PlainDate instance representing the other date to compare. It is converted to a Temporal.PlainDate object using the same algorithm as Temporal.PlainDate.from()."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "toJSON": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/toJSON",
            "title": "Temporal.PlainDate.prototype.toJSON()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe toJSON() method of Temporal.PlainDate instances returns a string representing this date in the same RFC 9557 format as calling toString(). It is intended to be implicitly called by JSON.stringify().",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "monthsInYear": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/monthsInYear",
            "title": "Temporal.PlainDate.prototype.monthsInYear",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe monthsInYear accessor property of Temporal.PlainDate instances returns a positive integer representing the number of months in the year of this date. It is calendar-dependent.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "add": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/add",
            "title": "Temporal.PlainDate.prototype.add()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe add() method of Temporal.PlainDate instances returns a new Temporal.PlainDate object representing this date moved forward by a given duration (in a form convertible by Temporal.Duration.from()).",
            "syntax": [],
            "parameters": [
              {
                "name": "duration",
                "description": "A string, an object, or a Temporal.Duration instance representing a duration to add to this date. It is converted to a Temporal.Duration object using the same algorithm as Temporal.Duration.from()."
              },
              {
                "name": "options Optional",
                "description": "An object containing the following property:\n\noverflow Optional\n\nA string specifying the behavior when a date component is out of range. Possible values are:\n\n\"constrain\" (default)\n\nThe date component is clamped to the valid range.\n\n\"reject\"\n\nA RangeError is thrown if the date component is out of range."
              },
              {
                "name": "overflow Optional",
                "description": "A string specifying the behavior when a date component is out of range. Possible values are:\n\n\"constrain\" (default)\n\nThe date component is clamped to the valid range.\n\n\"reject\"\n\nA RangeError is thrown if the date component is out of range."
              },
              {
                "name": "\"constrain\" (default)",
                "description": "The date component is clamped to the valid range."
              },
              {
                "name": "\"reject\"",
                "description": "A RangeError is thrown if the date component is out of range."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "since": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/since",
            "title": "Temporal.PlainDate.prototype.since()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe since() method of Temporal.PlainDate instances returns a new Temporal.Duration object representing the duration from another date (in a form convertible by Temporal.PlainDate.from()) to this date. The duration is positive if the other date is before this date, and negative if after.",
            "syntax": [],
            "parameters": [
              {
                "name": "other",
                "description": "A string, an object, or a Temporal.PlainDate instance representing a date to subtract from this date. It is converted to a Temporal.PlainDate object using the same algorithm as Temporal.PlainDate.from(). It must have the same calendar as this."
              },
              {
                "name": "options Optional",
                "description": "An object containing the options for Temporal.Duration.prototype.round(), which includes largestUnit, roundingIncrement, roundingMode, and smallestUnit. largestUnit and smallestUnit only accept the units: \"years\", \"months\", \"weeks\", \"days\", or their singular forms. For largestUnit, the default value \"auto\" means \"days\" or smallestUnit, whichever is greater. For smallestUnit, the default value is \"days\". The current date is used as the relativeTo option. Note that using units larger than \"days\" may make the duration not portable to other calendars or dates."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "subtract": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/subtract",
            "title": "Temporal.PlainDate.prototype.subtract()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe subtract() method of Temporal.PlainDate instances returns a new Temporal.PlainDate object representing this date moved backward by a given duration (in a form convertible by Temporal.Duration.from()).",
            "syntax": [],
            "parameters": [
              {
                "name": "duration",
                "description": "A string, an object, or a Temporal.Duration instance representing a duration to subtract from this date. It is converted to a Temporal.Duration object using the same algorithm as Temporal.Duration.from()."
              },
              {
                "name": "options Optional",
                "description": "An object containing the following property:\n\noverflow Optional\n\nA string specifying the behavior when a date component is out of range. Possible values are:\n\n\"constrain\" (default)\n\nThe date component is clamped to the valid range.\n\n\"reject\"\n\nA RangeError is thrown if the date component is out of range."
              },
              {
                "name": "overflow Optional",
                "description": "A string specifying the behavior when a date component is out of range. Possible values are:\n\n\"constrain\" (default)\n\nThe date component is clamped to the valid range.\n\n\"reject\"\n\nA RangeError is thrown if the date component is out of range."
              },
              {
                "name": "\"constrain\" (default)",
                "description": "The date component is clamped to the valid range."
              },
              {
                "name": "\"reject\"",
                "description": "A RangeError is thrown if the date component is out of range."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "with": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/with",
            "title": "Temporal.PlainDate.prototype.with()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe with() method of Temporal.PlainDate instances returns a new Temporal.PlainDate object representing this date with some fields replaced by new values. Because all Temporal objects are designed to be immutable, this method essentially functions as the setter for the date's fields.",
            "syntax": [],
            "parameters": [
              {
                "name": "info",
                "description": "An object containing at least one of the properties recognized by Temporal.PlainDate.from() (except calendar): day, era and eraYear, month, monthCode, year. Unspecified properties use the values from the original date. You only need to provide one of month or monthCode, and one of era and eraYear or year, and the other will be updated accordingly."
              },
              {
                "name": "options Optional",
                "description": "An object containing the following property:\n\noverflow Optional\n\nA string specifying the behavior when a date component is out of range. Possible values are:\n\n\"constrain\" (default)\n\nThe date component is clamped to the valid range.\n\n\"reject\"\n\nA RangeError is thrown if the date component is out of range."
              },
              {
                "name": "overflow Optional",
                "description": "A string specifying the behavior when a date component is out of range. Possible values are:\n\n\"constrain\" (default)\n\nThe date component is clamped to the valid range.\n\n\"reject\"\n\nA RangeError is thrown if the date component is out of range."
              },
              {
                "name": "\"constrain\" (default)",
                "description": "The date component is clamped to the valid range."
              },
              {
                "name": "\"reject\"",
                "description": "A RangeError is thrown if the date component is out of range."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "daysInWeek": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/daysInWeek",
            "title": "Temporal.PlainDate.prototype.daysInWeek",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe daysInWeek accessor property of Temporal.PlainDate instances returns a positive integer representing the number of days in the week of this date. It is calendar-dependent.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "PlainDate": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/PlainDate",
            "title": "Temporal.PlainDate()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe Temporal.PlainDate() constructor creates Temporal.PlainDate objects.",
            "syntax": [],
            "parameters": [
              {
                "name": "year",
                "description": "A number, truncated to an integer, representing the year in the ISO calendar system."
              },
              {
                "name": "month",
                "description": "A number, truncated to an integer, representing the month in the ISO calendar system."
              },
              {
                "name": "day",
                "description": "A number, truncated to an integer, representing the day of the month in the ISO calendar system."
              },
              {
                "name": "calendar Optional",
                "description": "A string representing the calendar to use. See Intl.supportedValuesOf() for a list of commonly supported calendar types. Defaults to \"iso8601\". Note that irrespective of the calendar, the year, month, and day must be in the ISO 8601 calendar system."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "month": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/month",
            "title": "Temporal.PlainDate.prototype.month",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe month accessor property of Temporal.PlainDate instances returns a positive integer representing the 1-based month index in the year of this date. The first month of this year is 1, and the last month is the monthsInYear. It is calendar-dependent.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "yearOfWeek": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/yearOfWeek",
            "title": "Temporal.PlainDate.prototype.yearOfWeek",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe yearOfWeek accessor property of Temporal.PlainDate instances returns an integer representing the year to be paired with the weekOfYear of this date, or undefined if the calendar does not have a well-defined week system. It is calendar-dependent.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "daysInYear": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/daysInYear",
            "title": "Temporal.PlainDate.prototype.daysInYear",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe daysInYear accessor property of Temporal.PlainDate instances returns a positive integer representing the number of days in the year of this date. It is calendar-dependent.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "dayOfYear": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/dayOfYear",
            "title": "Temporal.PlainDate.prototype.dayOfYear",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe dayOfYear accessor property of Temporal.PlainDate instances returns a positive integer representing the 1-based day index in the year of this date. The first day of this year is 1, and the last day is the daysInYear. It is calendar-dependent.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "year": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/year",
            "title": "Temporal.PlainDate.prototype.year",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe year accessor property of Temporal.PlainDate instances returns an integer representing the number of years of this date relative to the start of a calendar-specific epoch year. It is calendar-dependent.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "toPlainMonthDay": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/toPlainMonthDay",
            "title": "Temporal.PlainDate.prototype.toPlainMonthDay()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe toPlainMonthDay() method of Temporal.PlainDate instances returns a new Temporal.PlainMonthDay object representing the monthCode and day of this date in the same calendar system.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "from": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/from",
            "title": "Temporal.PlainDate.from()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe Temporal.PlainDate.from() static method creates a new Temporal.PlainDate object from another Temporal.PlainDate object, an object with date properties, or an RFC 9557 string.",
            "syntax": [],
            "parameters": [
              {
                "name": "info",
                "description": "One of the following:\n\n\nA Temporal.PlainDate instance, which creates a copy of the instance.\n\n\nA Temporal.PlainDateTime instance, which provides the calendar date in the same fashion as Temporal.PlainDateTime.prototype.toPlainDate().\n\n\nA Temporal.ZonedDateTime instance, which provides the calendar date in the same fashion as Temporal.ZonedDateTime.prototype.toPlainDate().\n\n\nAn RFC 9557 string containing a date and optionally a calendar.\n\n\nAn object containing the following properties (in the order they are retrieved and validated):\n\ncalendar Optional\n\nA string that corresponds to the calendarId property. See Intl.supportedValuesOf() for a list of commonly supported calendar types. Defaults to \"iso8601\". All other properties are interpreted in this calendar system (unlike the Temporal.PlainDate() constructor, which interprets the values in the ISO calendar system).\n\nday\n\nAn integer that corresponds to the day property. Must be positive regardless of the overflow option.\n\nera and eraYear\n\nA string and an integer that correspond to the era and eraYear properties. Are only used if the calendar system has eras. era and eraYear must be provided simultaneously. At least one of era+eraYear or year must be provided. If all of era, eraYear, and year are provided, they must be consistent.\n\nmonth\n\nCorresponds to the month property. Must be positive regardless of the overflow option. At least one of month or monthCode must be provided. If both month and monthCode are provided, they must be consistent.\n\nmonthCode\n\nCorresponds to the monthCode property. At least one of month or monthCode must be provided. If both month and monthCode are provided, they must be consistent.\n\nyear\n\nCorresponds to the year property. At least one of era+eraYear or year must be provided. If all of era, eraYear, and year are provided, they must be consistent.\n\n\nThe info should explicitly specify a year (as year or era and eraYear), a month (as month or monthCode), and a day."
              },
              {
                "name": "calendar Optional",
                "description": "A string that corresponds to the calendarId property. See Intl.supportedValuesOf() for a list of commonly supported calendar types. Defaults to \"iso8601\". All other properties are interpreted in this calendar system (unlike the Temporal.PlainDate() constructor, which interprets the values in the ISO calendar system)."
              },
              {
                "name": "day",
                "description": "An integer that corresponds to the day property. Must be positive regardless of the overflow option."
              },
              {
                "name": "era and eraYear",
                "description": "A string and an integer that correspond to the era and eraYear properties. Are only used if the calendar system has eras. era and eraYear must be provided simultaneously. At least one of era+eraYear or year must be provided. If all of era, eraYear, and year are provided, they must be consistent."
              },
              {
                "name": "month",
                "description": "Corresponds to the month property. Must be positive regardless of the overflow option. At least one of month or monthCode must be provided. If both month and monthCode are provided, they must be consistent."
              },
              {
                "name": "monthCode",
                "description": "Corresponds to the monthCode property. At least one of month or monthCode must be provided. If both month and monthCode are provided, they must be consistent."
              },
              {
                "name": "year",
                "description": "Corresponds to the year property. At least one of era+eraYear or year must be provided. If all of era, eraYear, and year are provided, they must be consistent."
              },
              {
                "name": "options Optional",
                "description": "An object containing the following property:\n\noverflow Optional\n\nA string specifying the behavior when a date component is out of range (when using the object info). Possible values are:\n\n\"constrain\" (default)\n\nThe date component is clamped to the valid range.\n\n\"reject\"\n\nA RangeError is thrown if the date component is out of range."
              },
              {
                "name": "overflow Optional",
                "description": "A string specifying the behavior when a date component is out of range (when using the object info). Possible values are:\n\n\"constrain\" (default)\n\nThe date component is clamped to the valid range.\n\n\"reject\"\n\nA RangeError is thrown if the date component is out of range."
              },
              {
                "name": "\"constrain\" (default)",
                "description": "The date component is clamped to the valid range."
              },
              {
                "name": "\"reject\"",
                "description": "A RangeError is thrown if the date component is out of range."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "toPlainYearMonth": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/toPlainYearMonth",
            "title": "Temporal.PlainDate.prototype.toPlainYearMonth()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe toPlainYearMonth() method of Temporal.PlainDate instances returns a new Temporal.PlainYearMonth object representing the year and month of this date in the same calendar system.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "until": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/until",
            "title": "Temporal.PlainDate.prototype.until()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe until() method of Temporal.PlainDate instances returns a new Temporal.Duration object representing the duration from this date to another date (in a form convertible by Temporal.PlainDate.from()). The duration is positive if the other date is after this date, and negative if before.",
            "syntax": [],
            "parameters": [
              {
                "name": "other",
                "description": "A string, an object, or a Temporal.PlainDate instance representing a date to subtract this date from. It is converted to a Temporal.PlainDate object using the same algorithm as Temporal.PlainDate.from(). It must have the same calendar as this."
              },
              {
                "name": "options Optional",
                "description": "The same options as since()."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "dayOfWeek": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/dayOfWeek",
            "title": "Temporal.PlainDate.prototype.dayOfWeek",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe dayOfWeek accessor property of Temporal.PlainDate instances returns a positive integer representing the 1-based day index in the week of this date. Days in a week are numbered sequentially from 1 to daysInWeek, with each number mapping to its name. It is calendar-dependent. 1 usually represents Monday in the calendar, even when locales using the calendar may consider a different day as the first day of the week (see Intl.Locale.prototype.getWeekInfo()).",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "calendarId": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/calendarId",
            "title": "Temporal.PlainDate.prototype.calendarId",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe calendarId accessor property of Temporal.PlainDate instances returns a string representing the calendar used to interpret the internal ISO 8601 date.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "era": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/era",
            "title": "Temporal.PlainDate.prototype.era",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe era accessor property of Temporal.PlainDate instances returns a calendar-specific lowercase string representing the era of this date, or undefined if the calendar does not use eras (e.g., ISO 8601). era and eraYear together uniquely identify a year in a calendar, in the same way that year does. It is calendar-dependent. For Gregorian, it is either \"gregory\" or \"gregory-inverse\".",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "withCalendar": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/withCalendar",
            "title": "Temporal.PlainDate.prototype.withCalendar()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe withCalendar() method of Temporal.PlainDate instances returns a new Temporal.PlainDate object representing this date interpreted in the new calendar system. Because all Temporal objects are designed to be immutable, this method essentially functions as the setter for the date's calendarId property.",
            "syntax": [],
            "parameters": [
              {
                "name": "calendar",
                "description": "A string that corresponds to the calendarId property. See Intl.supportedValuesOf() for a list of commonly supported calendar types."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "toPlainDateTime": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/toPlainDateTime",
            "title": "Temporal.PlainDate.prototype.toPlainDateTime()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe toPlainDateTime() method of Temporal.PlainDate instances returns a new Temporal.PlainDateTime object representing this date and a supplied time in the same calendar system.",
            "syntax": [],
            "parameters": [
              {
                "name": "plainTime Optional",
                "description": "A string, an object, or a Temporal.PlainTime instance representing the time component of the resulting PlainDateTime. It is converted to a Temporal.PlainTime object using the same algorithm as Temporal.PlainTime.from(). Defaults to \"00:00:00\"."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "weekOfYear": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/weekOfYear",
            "title": "Temporal.PlainDate.prototype.weekOfYear",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe weekOfYear accessor property of Temporal.PlainDate instances returns a positive integer representing the 1-based week index in the yearOfWeek of this date, or undefined if the calendar does not have a well-defined week system. The first week of the year is 1. It is calendar-dependent.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "valueOf": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/valueOf",
            "title": "Temporal.PlainDate.prototype.valueOf()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe valueOf() method of Temporal.PlainDate instances throws a TypeError, which prevents Temporal.PlainDate instances from being implicitly converted to primitives when used in arithmetic or comparison operations.",
            "syntax": [],
            "parameters": [
              {
                "name": "TypeError",
                "description": "Always thrown."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "toString": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/toString",
            "title": "Temporal.PlainDate.prototype.toString()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe toString() method of Temporal.PlainDate instances returns a string representing this date in the RFC 9557 format.",
            "syntax": [],
            "parameters": [
              {
                "name": "options Optional",
                "description": "An object containing the following property:\n\ncalendarName Optional\n\nWhether to show the calendar annotation ([u-ca=calendar_id]) in the return value. Possible values are:\n\n\"auto\" (default)\n\nInclude the calendar annotation if the calendar is not \"iso8601\".\n\n\"always\"\n\nAlways include the calendar annotation.\n\n\"never\"\n\nNever include the calendar annotation. This makes the returned string not recoverable to the same Temporal.PlainDate instance, although the date value still remains the same.\n\n\"critical\"\n\nAlways include the calendar annotation, and add a critical flag: [!u-ca=calendar_id]. Useful when sending the string to certain systems, but not useful for Temporal itself."
              },
              {
                "name": "calendarName Optional",
                "description": "Whether to show the calendar annotation ([u-ca=calendar_id]) in the return value. Possible values are:\n\n\"auto\" (default)\n\nInclude the calendar annotation if the calendar is not \"iso8601\".\n\n\"always\"\n\nAlways include the calendar annotation.\n\n\"never\"\n\nNever include the calendar annotation. This makes the returned string not recoverable to the same Temporal.PlainDate instance, although the date value still remains the same.\n\n\"critical\"\n\nAlways include the calendar annotation, and add a critical flag: [!u-ca=calendar_id]. Useful when sending the string to certain systems, but not useful for Temporal itself."
              },
              {
                "name": "\"auto\" (default)",
                "description": "Include the calendar annotation if the calendar is not \"iso8601\"."
              },
              {
                "name": "\"always\"",
                "description": "Always include the calendar annotation."
              },
              {
                "name": "\"never\"",
                "description": "Never include the calendar annotation. This makes the returned string not recoverable to the same Temporal.PlainDate instance, although the date value still remains the same."
              },
              {
                "name": "\"critical\"",
                "description": "Always include the calendar annotation, and add a critical flag: [!u-ca=calendar_id]. Useful when sending the string to certain systems, but not useful for Temporal itself."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "inLeapYear": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/inLeapYear",
            "title": "Temporal.PlainDate.prototype.inLeapYear",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe inLeapYear accessor property of Temporal.PlainDate instances returns a boolean indicating whether this date is in a leap year. A leap year is a year that has more days (due to a leap day or leap month) than a common year. It is calendar-dependent.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "eraYear": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/eraYear",
            "title": "Temporal.PlainDate.prototype.eraYear",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe eraYear accessor property of Temporal.PlainDate instances returns a non-negative integer representing the year of this date within the era, or undefined if the calendar does not use eras (e.g., ISO 8601). The year index usually starts from 1 (more common) or 0, and years in an era can decrease with time (e.g., Gregorian BCE). era and eraYear together uniquely identify a year in a calendar, in the same way that year does. It is calendar-dependent.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          }
        },
        "ZonedDateTime": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime#time_zones_and_offsets",
          "title": "Temporal.ZonedDateTime",
          "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe Temporal.ZonedDateTime object represents a date and time with a time zone. It is fundamentally represented as a combination of an instant, a time zone, and a calendar system.",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": [],
          "dayOfYear": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/dayOfYear",
            "title": "Temporal.ZonedDateTime.prototype.dayOfYear",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe dayOfYear accessor property of Temporal.ZonedDateTime instances returns a positive integer representing the 1-based day index in the year of this date. The first day of this year is 1, and the last day is the daysInYear. It is calendar-dependent.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "getTimeZoneTransition": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/getTimeZoneTransition",
            "title": "Temporal.ZonedDateTime.prototype.getTimeZoneTransition()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe getTimeZoneTransition() method of Temporal.ZonedDateTime instances returns a Temporal.ZonedDateTime object representing the closest instant after or before this instant at which the time zone's UTC offset changes (the returned instant is the first instant after the change), or null if there is no such transition. This is useful for finding out the offset rules of a time zone, such as its daylight saving time pattern.",
            "syntax": [],
            "parameters": [
              {
                "name": "direction",
                "description": "A string representing the direction option. This is a convenience overload, so getTimeZoneTransition(direction) is equivalent to getTimeZoneTransition({ direction }), where direction is a string."
              },
              {
                "name": "options",
                "description": "An object containing the following property:\n\ndirection\n\nWhether to search before or after the current instant. Must be one of \"next\" or \"previous\"."
              },
              {
                "name": "direction",
                "description": "Whether to search before or after the current instant. Must be one of \"next\" or \"previous\"."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "epochMilliseconds": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/epochMilliseconds",
            "title": "Temporal.ZonedDateTime.prototype.epochMilliseconds",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe epochMilliseconds accessor property of Temporal.ZonedDateTime instances returns an integer representing the number of milliseconds elapsed since the Unix epoch (midnight at the beginning of January 1, 1970, UTC) to this instant. It is equivalent to dividing epochNanoseconds by 1e6 and flooring the result.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "subtract": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/subtract",
            "title": "Temporal.ZonedDateTime.prototype.subtract()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe subtract() method of Temporal.ZonedDateTime instances returns a new Temporal.ZonedDateTime object representing this date-time moved backward by a given duration (in a form convertible by Temporal.Duration.from()).",
            "syntax": [],
            "parameters": [
              {
                "name": "duration",
                "description": "A string, an object, or a Temporal.Duration instance representing a duration to subtract from this date-time. It is converted to a Temporal.Duration object using the same algorithm as Temporal.Duration.from()."
              },
              {
                "name": "options Optional",
                "description": "An object containing the following property:\n\noverflow Optional\n\nA string specifying the behavior when a date component is out of range. Possible values are:\n\n\"constrain\" (default)\n\nThe date component is clamped to the valid range.\n\n\"reject\"\n\nA RangeError is thrown if the date component is out of range."
              },
              {
                "name": "overflow Optional",
                "description": "A string specifying the behavior when a date component is out of range. Possible values are:\n\n\"constrain\" (default)\n\nThe date component is clamped to the valid range.\n\n\"reject\"\n\nA RangeError is thrown if the date component is out of range."
              },
              {
                "name": "\"constrain\" (default)",
                "description": "The date component is clamped to the valid range."
              },
              {
                "name": "\"reject\"",
                "description": "A RangeError is thrown if the date component is out of range."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "hour": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/hour",
            "title": "Temporal.ZonedDateTime.prototype.hour",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe hour accessor property of Temporal.ZonedDateTime instances returns a integer from 0 to 23 representing the hour component of this time.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "nanosecond": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/nanosecond",
            "title": "Temporal.ZonedDateTime.prototype.nanosecond",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe nanosecond accessor property of Temporal.ZonedDateTime instances returns a integer from 0 to 999 representing the nanosecond (10-9 second) component of this time.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "daysInWeek": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/daysInWeek",
            "title": "Temporal.ZonedDateTime.prototype.daysInWeek",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe daysInWeek accessor property of Temporal.ZonedDateTime instances returns a positive integer representing the number of days in the week of this date. It is calendar-dependent.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "day": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/day",
            "title": "Temporal.ZonedDateTime.prototype.day",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe day accessor property of Temporal.ZonedDateTime instances returns a positive integer representing the 1-based day index in the month of this date, which is the same day number you would see on a calendar. It is calendar-dependent.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "from": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/from",
            "title": "Temporal.ZonedDateTime.from()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe Temporal.ZonedDateTime.from() static method creates a new Temporal.ZonedDateTime object from another Temporal.ZonedDateTime object, an object with date, time, and time zone properties, or an RFC 9557 string.",
            "syntax": [],
            "parameters": [
              {
                "name": "info",
                "description": "One of the following:\n\nA Temporal.ZonedDateTime instance, which creates a copy of the instance.\nAn RFC 9557 format string containing a date, optionally a time, optionally an offset, a time zone annotation, and optionally a calendar.\nAn object containing properties that are accepted by either Temporal.PlainDate.from() (calendar, era, eraYear, year, month, monthCode, day) or Temporal.PlainTime.from() (hour, minute, second, millisecond, microsecond, nanosecond). The info should explicitly specify a year (as year or as era and eraYear), a month (as month or monthCode), and a day; others are optional and will be set to their default values. The following properties should be provided too:\n\ntimeZone\n\nEither a string or a Temporal.ZonedDateTime instance representing the time zone to use. If a Temporal.ZonedDateTime instance, its time zone is used. If a string, it can be a named time zone identifier, an offset time zone identifier, or a date-time string containing a time zone identifier or an offset (see time zones and offsets for more information). The time properties are interpreted in this time zone.\n\noffset Optional\n\nA offset string, in the same format as the RFC 9557 offset but with optional seconds and subsecond components (\u00c2\u00b1HH:mm:ss.sssssssss), representing the offset from UTC. If omitted, it will be calculated from the time zone and the date-time. \"Z\" is not allowed."
              },
              {
                "name": "timeZone",
                "description": "Either a string or a Temporal.ZonedDateTime instance representing the time zone to use. If a Temporal.ZonedDateTime instance, its time zone is used. If a string, it can be a named time zone identifier, an offset time zone identifier, or a date-time string containing a time zone identifier or an offset (see time zones and offsets for more information). The time properties are interpreted in this time zone."
              },
              {
                "name": "offset Optional",
                "description": "A offset string, in the same format as the RFC 9557 offset but with optional seconds and subsecond components (\u00c2\u00b1HH:mm:ss.sssssssss), representing the offset from UTC. If omitted, it will be calculated from the time zone and the date-time. \"Z\" is not allowed."
              },
              {
                "name": "options Optional",
                "description": "An object containing some or all of the following properties (in the order they are retrieved and validated):\n\ndisambiguation Optional\n\nWhat to do if the local date-time is ambiguous in the given time zone (there are more than one instants with such local time, or the local time does not exist). Possible values are \"compatible\", \"earlier\", \"later\", and \"reject\". Defaults to \"compatible\". For more information about these values, see ambiguity and gaps from local time to UTC time.\n\noffset Optional\n\nWhat to do if the offset is explicitly provided in info but the offset is invalid for the given time zone in the given local time. Possible values are \"use\", \"ignore\", \"reject\", and \"prefer\". Defaults to \"reject\". For more information about these values, see offset ambiguity.\n\noverflow Optional\n\nA string specifying the behavior when a date component is out of range (when using the object info). Possible values are:\n\n\"constrain\" (default)\n\nThe date component is clamped to the valid range.\n\n\"reject\"\n\nA RangeError is thrown if the date component is out of range."
              },
              {
                "name": "disambiguation Optional",
                "description": "What to do if the local date-time is ambiguous in the given time zone (there are more than one instants with such local time, or the local time does not exist). Possible values are \"compatible\", \"earlier\", \"later\", and \"reject\". Defaults to \"compatible\". For more information about these values, see ambiguity and gaps from local time to UTC time."
              },
              {
                "name": "offset Optional",
                "description": "What to do if the offset is explicitly provided in info but the offset is invalid for the given time zone in the given local time. Possible values are \"use\", \"ignore\", \"reject\", and \"prefer\". Defaults to \"reject\". For more information about these values, see offset ambiguity."
              },
              {
                "name": "overflow Optional",
                "description": "A string specifying the behavior when a date component is out of range (when using the object info). Possible values are:\n\n\"constrain\" (default)\n\nThe date component is clamped to the valid range.\n\n\"reject\"\n\nA RangeError is thrown if the date component is out of range."
              },
              {
                "name": "\"constrain\" (default)",
                "description": "The date component is clamped to the valid range."
              },
              {
                "name": "\"reject\"",
                "description": "A RangeError is thrown if the date component is out of range."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "microsecond": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/microsecond",
            "title": "Temporal.ZonedDateTime.prototype.microsecond",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe microsecond accessor property of Temporal.ZonedDateTime instances returns a integer from 0 to 999 representing the microsecond (10-6 second) component of this time.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "dayOfWeek": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/dayOfWeek",
            "title": "Temporal.ZonedDateTime.prototype.dayOfWeek",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe dayOfWeek accessor property of Temporal.ZonedDateTime instances returns a positive integer representing the 1-based day index in the week of this date. Days in a week are numbered sequentially from 1 to daysInWeek, with each number mapping to its name. It is calendar-dependent.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "month": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/month",
            "title": "Temporal.ZonedDateTime.prototype.month",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe month accessor property of Temporal.ZonedDateTime instances returns a positive integer representing the 1-based month index in the year of this date. The first month of this year is 1, and the last month is the monthsInYear. It is calendar-dependent.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "era": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/ZonedDateTime/era",
            "title": "Temporal.ZonedDateTime.prototype.era",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe era accessor property of Temporal.ZonedDateTime instances returns a calendar-specific lowercase string representing the era of this date, or undefined if the calendar does not use eras (e.g., ISO 8601). era and eraYear together uniquely identify a year in a calendar, in the same way that year does. It is calendar-dependent.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          }
        },
        "PlainTime": {
          "subtract": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/subtract",
            "title": "Temporal.PlainTime.prototype.subtract()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe subtract() method of Temporal.PlainTime instances returns a new Temporal.PlainTime object representing this time moved backward by a given duration (in a form convertible by Temporal.Duration.from()), wrapping around the clock if necessary.",
            "syntax": [],
            "parameters": [
              {
                "name": "duration",
                "description": "A string, an object, or a Temporal.Duration instance representing a duration to subtract from this time. It is converted to a Temporal.Duration object using the same algorithm as Temporal.Duration.from()."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "toString": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/toString",
            "title": "Temporal.PlainTime.prototype.toString()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe toString() method of Temporal.PlainTime instances returns a string representing this time in the RFC 9557 format.",
            "syntax": [],
            "parameters": [
              {
                "name": "options Optional",
                "description": "An object containing some or all of the following properties (in the order they are retrieved and validated):\n\nfractionalSecondDigits Optional\n\nEither an integer from 0 to 9, or the string \"auto\". The default is \"auto\". If \"auto\", then trailing zeros are removed from the fractional seconds. Otherwise, the fractional part of the second component contains this many digits, padded with zeros or rounded as necessary.\n\nroundingMode Optional\n\nA string specifying how to round off fractional second digits beyond fractionalSecondDigits. See Intl.NumberFormat(). Defaults to \"trunc\".\n\nsmallestUnit Optional\n\nA string specifying the smallest unit to include in the output. Possible values are \"minute\", \"second\", \"millisecond\", \"microsecond\", and \"nanosecond\", or their plural forms, which (except \"minute\") are equivalent to fractionalSecondDigits values of 0, 3, 6, 9, respectively. If specified, then fractionalSecondDigits is ignored."
              },
              {
                "name": "fractionalSecondDigits Optional",
                "description": "Either an integer from 0 to 9, or the string \"auto\". The default is \"auto\". If \"auto\", then trailing zeros are removed from the fractional seconds. Otherwise, the fractional part of the second component contains this many digits, padded with zeros or rounded as necessary."
              },
              {
                "name": "roundingMode Optional",
                "description": "A string specifying how to round off fractional second digits beyond fractionalSecondDigits. See Intl.NumberFormat(). Defaults to \"trunc\"."
              },
              {
                "name": "smallestUnit Optional",
                "description": "A string specifying the smallest unit to include in the output. Possible values are \"minute\", \"second\", \"millisecond\", \"microsecond\", and \"nanosecond\", or their plural forms, which (except \"minute\") are equivalent to fractionalSecondDigits values of 0, 3, 6, 9, respectively. If specified, then fractionalSecondDigits is ignored."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "millisecond": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/millisecond",
            "title": "Temporal.PlainTime.prototype.millisecond",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe millisecond accessor property of Temporal.PlainTime instances returns a integer from 0 to 999 representing the millisecond (10-3 second) component of this time.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "PlainTime": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/PlainTime",
            "title": "Temporal.PlainTime()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe Temporal.PlainTime() constructor creates Temporal.PlainTime objects.",
            "syntax": [],
            "parameters": [
              {
                "name": "hour Optional",
                "description": "A number, truncated to an integer, representing the hour component."
              },
              {
                "name": "minute Optional",
                "description": "A number, truncated to an integer, representing the minute component."
              },
              {
                "name": "second Optional",
                "description": "A number, truncated to an integer, representing the second component."
              },
              {
                "name": "millisecond Optional",
                "description": "A number, truncated to an integer, representing the millisecond component."
              },
              {
                "name": "microsecond Optional",
                "description": "A number, truncated to an integer, representing the microsecond component."
              },
              {
                "name": "nanosecond Optional",
                "description": "A number, truncated to an integer, representing the nanosecond component."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "round": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/round",
            "title": "Temporal.PlainTime.prototype.round()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe round() method of Temporal.PlainTime instances returns a new Temporal.PlainTime object representing this time rounded to the given unit.",
            "syntax": [],
            "parameters": [
              {
                "name": "smallestUnit",
                "description": "A string representing the smallestUnit option. This is a convenience overload, so round(smallestUnit) is equivalent to round({ smallestUnit }), where smallestUnit is a string."
              },
              {
                "name": "options",
                "description": "An object containing some or all of the following properties (in the order they are retrieved and validated):\n\nroundingIncrement Optional\n\nA number (truncated to an integer) representing the rounding increment in the given smallestUnit. Defaults to 1. The increment must be a divisor of the maximum value of smallestUnit; for example, if the unit is hours, the increment must be a divisor of 24 and must not be 24 itself, which means it can be 1, 2, 3, 4, 6, 8, or 12.\n\nroundingMode Optional\n\nA string specifying how to round off the fractional part of smallestUnit. See Intl.NumberFormat(). Defaults to \"halfExpand\".\n\nsmallestUnit\n\nA string representing the smallest unit to include in the output. The value must be one of the following: \"hour\", \"minute\", \"second\", \"millisecond\", \"microsecond\", \"nanosecond\", or their plural forms. For units larger than \"nanosecond\", fractional parts of the smallestUnit will be rounded according to the roundingIncrement and roundingMode settings."
              },
              {
                "name": "roundingIncrement Optional",
                "description": "A number (truncated to an integer) representing the rounding increment in the given smallestUnit. Defaults to 1. The increment must be a divisor of the maximum value of smallestUnit; for example, if the unit is hours, the increment must be a divisor of 24 and must not be 24 itself, which means it can be 1, 2, 3, 4, 6, 8, or 12."
              },
              {
                "name": "roundingMode Optional",
                "description": "A string specifying how to round off the fractional part of smallestUnit. See Intl.NumberFormat(). Defaults to \"halfExpand\"."
              },
              {
                "name": "smallestUnit",
                "description": "A string representing the smallest unit to include in the output. The value must be one of the following: \"hour\", \"minute\", \"second\", \"millisecond\", \"microsecond\", \"nanosecond\", or their plural forms. For units larger than \"nanosecond\", fractional parts of the smallestUnit will be rounded according to the roundingIncrement and roundingMode settings."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "since": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/since",
            "title": "Temporal.PlainTime.prototype.since()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe since() method of Temporal.PlainTime instances returns a new Temporal.Duration object representing the duration from another time (in a form convertible by Temporal.PlainTime.from()) to this time. The duration is positive if the other time is before this time, and negative if after.",
            "syntax": [],
            "parameters": [
              {
                "name": "other",
                "description": "A string, an object, or a Temporal.PlainTime instance representing a time to subtract from this time. It is converted to a Temporal.PlainTime object using the same algorithm as Temporal.PlainTime.from()."
              },
              {
                "name": "options Optional",
                "description": "An object containing the options for Temporal.Duration.prototype.round(), which includes largestUnit, roundingIncrement, roundingMode, and smallestUnit. largestUnit and smallestUnit only accept the units: \"hours\", \"minutes\", \"seconds\", \"milliseconds\", \"microseconds\", \"nanoseconds\", or their singular forms. For largestUnit, the default value \"auto\" means \"hours\". For smallestUnit, the default value is \"nanoseconds\"."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "toLocaleString": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/toLocaleString",
            "title": "Temporal.PlainTime.prototype.toLocaleString()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe toLocaleString() method of Temporal.PlainTime instances returns a string with a language-sensitive representation of this time. In implementations with Intl.DateTimeFormat API support, this method delegates to Intl.DateTimeFormat.",
            "syntax": [],
            "parameters": [
              {
                "name": "locales Optional",
                "description": "A string with a BCP 47 language tag, or an array of such strings. Corresponds to the locales parameter of the Intl.DateTimeFormat() constructor."
              },
              {
                "name": "options Optional",
                "description": "An object adjusting the output format. Corresponds to the options parameter of the Intl.DateTimeFormat() constructor. Regarding the date-time component options and the style shortcuts (dateStyle and timeStyle), the options should follow one of these forms:\n\nProvide none of them: hour, minute, and second will default to \"numeric\".\nProvide timeStyle only: it expands to dayPeriod, hour, minute, second, and fractionalSecondDigits formats.\nProvide some date-time component options, where at least one of them is a time option (dayPeriod, hour, minute, second, fractionalSecondDigits). Only the specified time components will be included in the output."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "compare": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/compare",
            "title": "Temporal.PlainTime.compare()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe Temporal.PlainTime.compare() static method returns a number (-1, 0, or 1) indicating whether the first time comes before, is the same as, or comes after the second time. It is equivalent to comparing the hour, minute, second, millisecond, microsecond, and nanosecond fields one by one.",
            "syntax": [],
            "parameters": [
              {
                "name": "time1",
                "description": "A string, an object, or a Temporal.PlainTime instance representing the first time to compare. It is converted to a Temporal.PlainTime object using the same algorithm as Temporal.PlainTime.from()."
              },
              {
                "name": "time2",
                "description": "The second time to compare, converted to a Temporal.PlainTime object using the same algorithm as time1."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "with": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/with",
            "title": "Temporal.PlainTime.prototype.with()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe with() method of Temporal.PlainTime instances returns a new Temporal.PlainTime object representing this time with some fields replaced by new values. Because all Temporal objects are designed to be immutable, this method essentially functions as the setter for the time's fields.",
            "syntax": [],
            "parameters": [
              {
                "name": "info",
                "description": "An object containing at least one of the properties recognized by Temporal.PlainTime.from(): hour, microsecond, millisecond, minute, nanosecond, second. Unspecified properties use the values from the original time."
              },
              {
                "name": "options Optional",
                "description": "An object containing the following property:\n\noverflow Optional\n\nA string specifying the behavior when a time component is out of range. Possible values are:\n\n\"constrain\" (default)\n\nThe time component is clamped to the valid range.\n\n\"reject\"\n\nA RangeError is thrown if the time component is out of range."
              },
              {
                "name": "overflow Optional",
                "description": "A string specifying the behavior when a time component is out of range. Possible values are:\n\n\"constrain\" (default)\n\nThe time component is clamped to the valid range.\n\n\"reject\"\n\nA RangeError is thrown if the time component is out of range."
              },
              {
                "name": "\"constrain\" (default)",
                "description": "The time component is clamped to the valid range."
              },
              {
                "name": "\"reject\"",
                "description": "A RangeError is thrown if the time component is out of range."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "until": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/until",
            "title": "Temporal.PlainTime.prototype.until()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe until() method of Temporal.PlainTime instances returns a new Temporal.Duration object representing the duration from this time to another time (in a form convertible by Temporal.PlainTime.from()). The duration is positive if the other time is after this time, and negative if before.",
            "syntax": [],
            "parameters": [
              {
                "name": "other",
                "description": "A string, an object, or a Temporal.PlainTime instance representing a time to subtract this time from. It is converted to a Temporal.PlainTime object using the same algorithm as Temporal.PlainTime.from(). It must have the same calendar as this."
              },
              {
                "name": "options Optional",
                "description": "The same options as since()."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "equals": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/equals",
            "title": "Temporal.PlainTime.prototype.equals()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe equals() method of Temporal.PlainTime instances returns true if this time is equivalent in value to another time (in a form convertible by Temporal.PlainTime.from()), and false otherwise. They are compared by their time values. It is equivalent to Temporal.PlainTime.compare(this, other) === 0.",
            "syntax": [],
            "parameters": [
              {
                "name": "other",
                "description": "A string, an object, or a Temporal.PlainTime instance representing the other time to compare. It is converted to a Temporal.PlainTime object using the same algorithm as Temporal.PlainTime.from()."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "from": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/from",
            "title": "Temporal.PlainTime.from()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe Temporal.PlainTime.from() static method creates a new Temporal.PlainTime object from another Temporal.PlainTime object, an object with time properties, or an RFC 9557 string.",
            "syntax": [],
            "parameters": [
              {
                "name": "info",
                "description": "One of the following:\n\n\nA Temporal.PlainTime instance, which creates a copy of the instance.\n\n\nA Temporal.PlainDateTime instance, which provides the time in the same fashion as Temporal.PlainDateTime.prototype.toPlainTime().\n\n\nA Temporal.ZonedDateTime instance, which provides the time in the same fashion as Temporal.ZonedDateTime.prototype.toPlainTime().\n\n\nAn RFC 9557 string containing a time.\n\n\nAn object containing at least one of the following properties (in the order they are retrieved and validated):\n\nhour\nmicrosecond\nmillisecond\nminute\nnanosecond\nsecond\n\nThey are truncated to be integers. Out-of-range values are handled by the overflow option."
              },
              {
                "name": "options Optional",
                "description": "An object containing the following property:\n\noverflow Optional\n\nA string specifying the behavior when a time component is out of range (when using the object info). Possible values are:\n\n\"constrain\" (default)\n\nThe time component is clamped to the valid range.\n\n\"reject\"\n\nA RangeError is thrown if the time component is out of range."
              },
              {
                "name": "overflow Optional",
                "description": "A string specifying the behavior when a time component is out of range (when using the object info). Possible values are:\n\n\"constrain\" (default)\n\nThe time component is clamped to the valid range.\n\n\"reject\"\n\nA RangeError is thrown if the time component is out of range."
              },
              {
                "name": "\"constrain\" (default)",
                "description": "The time component is clamped to the valid range."
              },
              {
                "name": "\"reject\"",
                "description": "A RangeError is thrown if the time component is out of range."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "hour": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/hour",
            "title": "Temporal.PlainTime.prototype.hour",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe hour accessor property of Temporal.PlainTime instances returns a integer from 0 to 23 representing the hour component of this time.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "microsecond": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/microsecond",
            "title": "Temporal.PlainTime.prototype.microsecond",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe microsecond accessor property of Temporal.PlainTime instances returns a integer from 0 to 999 representing the microsecond (10-6 second) component of this time.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "add": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/add",
            "title": "Temporal.PlainTime.prototype.add()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe add() method of Temporal.PlainTime instances returns a new Temporal.PlainTime object representing this time moved forward by a given duration (in a form convertible by Temporal.Duration.from()), wrapping around the clock if necessary.",
            "syntax": [],
            "parameters": [
              {
                "name": "duration",
                "description": "A string, an object, or a Temporal.Duration instance representing a duration to add to this time. It is converted to a Temporal.Duration object using the same algorithm as Temporal.Duration.from()."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "second": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/second",
            "title": "Temporal.PlainTime.prototype.second",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe second accessor property of Temporal.PlainTime instances returns a integer from 0 to 59 representing the second component of this time.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "toJSON": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/toJSON",
            "title": "Temporal.PlainTime.prototype.toJSON()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe toJSON() method of Temporal.PlainTime instances returns a string representing this time in the same RFC 9557 format as calling toString(). It is intended to be implicitly called by JSON.stringify().",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "minute": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/minute",
            "title": "Temporal.PlainTime.prototype.minute",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe minute accessor property of Temporal.PlainTime instances returns a integer from 0 to 59 representing the minute component of this time.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "nanosecond": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/nanosecond",
            "title": "Temporal.PlainTime.prototype.nanosecond",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe nanosecond accessor property of Temporal.PlainTime instances returns a integer from 0 to 999 representing the nanosecond (10-9 second) component of this time.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "valueOf": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainTime/valueOf",
            "title": "Temporal.PlainTime.prototype.valueOf()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe valueOf() method of Temporal.PlainTime instances throws a TypeError, which prevents Temporal.PlainTime instances from being implicitly converted to primitives when used in arithmetic or comparison operations.",
            "syntax": [],
            "parameters": [
              {
                "name": "TypeError",
                "description": "Always thrown."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          }
        },
        "PlainMonthDay": {
          "day": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainMonthDay/day",
            "title": "Temporal.PlainMonthDay.prototype.day",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe day accessor property of Temporal.PlainMonthDay instances returns a positive integer representing the 1-based day index in the month of this date, which is the same day number you would see on a calendar. It is calendar-dependent.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "PlainMonthDay": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainMonthDay/PlainMonthDay",
            "title": "Temporal.PlainMonthDay()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe Temporal.PlainMonthDay() constructor creates Temporal.PlainMonthDay objects.",
            "syntax": [],
            "parameters": [
              {
                "name": "month",
                "description": "A number, truncated to an integer, representing the month in the ISO calendar system."
              },
              {
                "name": "day",
                "description": "A number, truncated to an integer, representing the day of the month in the ISO calendar system."
              },
              {
                "name": "calendar Optional",
                "description": "A string representing the calendar to use. See Intl.supportedValuesOf() for a list of commonly supported calendar types. Defaults to \"iso8601\". Note that irrespective of the calendar, the referenceYear, month, and day must be in the ISO 8601 calendar system."
              },
              {
                "name": "referenceYear Optional",
                "description": "A number, truncated to an integer, representing the year in the ISO calendar system. Defaults to 1972. The same ISO month-day can represent different dates in different years with non-ISO calendars. For example, the days 2021-07-01 and 1972-07-01 may fall on different month-days in a non-Gregorian calendar, and just specifying \"07-01\" is insufficient to unambiguously determine a month-day in the target calendar. Therefore, you virtually always want to specify a referenceYear when using a non-ISO calendar."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "toPlainDate": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainMonthDay/toPlainDate",
            "title": "Temporal.PlainMonthDay.prototype.toPlainDate()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe toPlainDate() method of Temporal.PlainMonthDay instances returns a new Temporal.PlainDate object representing this month-day and a supplied year in the same calendar system.",
            "syntax": [],
            "parameters": [
              {
                "name": "yearInfo",
                "description": "An object representing the year component of the resulting PlainDate, containing the following properties (in the order they are retrieved and validated):\n\nera and eraYear\n\nA string and an integer that correspond to the era and eraYear properties. Are only used if the calendar system has eras. era and eraYear must be provided simultaneously. If they are not provided, then year must be provided. If all of era, eraYear, and year are provided, they must be consistent.\n\nyear\n\nCorresponds to the year property."
              },
              {
                "name": "era and eraYear",
                "description": "A string and an integer that correspond to the era and eraYear properties. Are only used if the calendar system has eras. era and eraYear must be provided simultaneously. If they are not provided, then year must be provided. If all of era, eraYear, and year are provided, they must be consistent."
              },
              {
                "name": "year",
                "description": "Corresponds to the year property."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "monthCode": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainMonthDay/monthCode",
            "title": "Temporal.PlainMonthDay.prototype.monthCode",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe monthCode accessor property of Temporal.PlainMonthDay instances returns a calendar-specific string representing the month of this date. It is calendar-dependent.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "toJSON": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainMonthDay/toJSON",
            "title": "Temporal.PlainMonthDay.prototype.toJSON()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe toJSON() method of Temporal.PlainMonthDay instances returns a string representing this month-day in the same RFC 9557 format as calling toString(). It is intended to be implicitly called by JSON.stringify().",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "with": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainMonthDay/with",
            "title": "Temporal.PlainMonthDay.prototype.with()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe with() method of Temporal.PlainMonthDay instances returns a new Temporal.PlainMonthDay object representing this month-day with some fields replaced by new values. Because all Temporal objects are designed to be immutable, this method essentially functions as the setter for the month-day's fields.",
            "syntax": [],
            "parameters": [
              {
                "name": "info",
                "description": "An object containing at least one of the properties recognized by Temporal.PlainMonthDay.from() (except calendar): day, era and eraYear, month, monthCode, year. Unspecified properties use the values from the original month-day. You need to provide the year if and only if you provide month and the calendar is not iso8601. You only need to provide one of month or monthCode, and one of era and eraYear or year, and the other will be updated accordingly."
              },
              {
                "name": "options Optional",
                "description": "An object containing the following property:\n\noverflow Optional\n\nA string specifying the behavior when a date component is out of range. Possible values are:\n\n\"constrain\" (default)\n\nThe date component is clamped to the valid range.\n\n\"reject\"\n\nA RangeError is thrown if the date component is out of range."
              },
              {
                "name": "overflow Optional",
                "description": "A string specifying the behavior when a date component is out of range. Possible values are:\n\n\"constrain\" (default)\n\nThe date component is clamped to the valid range.\n\n\"reject\"\n\nA RangeError is thrown if the date component is out of range."
              },
              {
                "name": "\"constrain\" (default)",
                "description": "The date component is clamped to the valid range."
              },
              {
                "name": "\"reject\"",
                "description": "A RangeError is thrown if the date component is out of range."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "valueOf": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainMonthDay/valueOf",
            "title": "Temporal.PlainMonthDay.prototype.valueOf()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe valueOf() method of Temporal.PlainMonthDay instances throws a TypeError, which prevents Temporal.PlainMonthDay instances from being implicitly converted to primitives when used in arithmetic or comparison operations.",
            "syntax": [],
            "parameters": [
              {
                "name": "TypeError",
                "description": "Always thrown."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "from": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainMonthDay/from",
            "title": "Temporal.PlainMonthDay.from()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe Temporal.PlainMonthDay.from() static method creates a new Temporal.PlainMonthDay object from another Temporal.PlainMonthDay object, an object with month and day properties, or an RFC 9557 string.",
            "syntax": [],
            "parameters": [
              {
                "name": "info",
                "description": "One of the following:\n\n\nA Temporal.PlainMonthDay instance, which creates a copy of the instance.\n\n\nAn RFC 9557 string containing a date and optionally a calendar. If the calendar is not iso8601, a year is required.\n\n\nAn object containing the following properties (in the order they are retrieved and validated):\n\ncalendar Optional\n\nA string that corresponds to the calendarId property. Defaults to \"iso8601\". All other properties are interpreted in this calendar system (unlike the Temporal.PlainMonthDay() constructor, which interprets the values in the ISO calendar system). See Intl.supportedValuesOf() for a list of commonly supported calendar types.\n\nday\n\nAn integer that corresponds to the day property. Must be positive regardless of the overflow option.\n\nera and eraYear\n\nA string and an integer that can be used instead of year. See era and eraYear of PlainDate. Are only used if the calendar system has eras. era and eraYear must be provided simultaneously. If month is specified, at least one of era+eraYear or year must be provided. If all of era, eraYear, and year are provided, they must be consistent.\n\nmonth\n\nA positive integer that can be used instead of monthCode. See month of PlainDate. Must be positive regardless of the overflow option. If month is provided, and the calendar is not iso8601, then year (or era + eraYear as a substitution) must be provided too, because the same month may map to multiple possible monthCode values in different years. At least one of month or monthCode must be provided. If both month and monthCode are provided, they must be consistent.\n\nmonthCode\n\nCorresponds to the monthCode property. At least one of month or monthCode must be provided. If both month and monthCode are provided, they must be consistent.\n\nyear\n\nAn integer used to disambiguate month if provided, because for some calendars, the same month can mean different monthCode in different years. See year of PlainDate. If a year is provided, then the overflow option validates the month-day in the given year, not just any year. If month is specified, at least one of era+eraYear or year must be provided. If all of era, eraYear, and year are provided, they must be consistent."
              },
              {
                "name": "calendar Optional",
                "description": "A string that corresponds to the calendarId property. Defaults to \"iso8601\". All other properties are interpreted in this calendar system (unlike the Temporal.PlainMonthDay() constructor, which interprets the values in the ISO calendar system). See Intl.supportedValuesOf() for a list of commonly supported calendar types."
              },
              {
                "name": "day",
                "description": "An integer that corresponds to the day property. Must be positive regardless of the overflow option."
              },
              {
                "name": "era and eraYear",
                "description": "A string and an integer that can be used instead of year. See era and eraYear of PlainDate. Are only used if the calendar system has eras. era and eraYear must be provided simultaneously. If month is specified, at least one of era+eraYear or year must be provided. If all of era, eraYear, and year are provided, they must be consistent."
              },
              {
                "name": "month",
                "description": "A positive integer that can be used instead of monthCode. See month of PlainDate. Must be positive regardless of the overflow option. If month is provided, and the calendar is not iso8601, then year (or era + eraYear as a substitution) must be provided too, because the same month may map to multiple possible monthCode values in different years. At least one of month or monthCode must be provided. If both month and monthCode are provided, they must be consistent."
              },
              {
                "name": "monthCode",
                "description": "Corresponds to the monthCode property. At least one of month or monthCode must be provided. If both month and monthCode are provided, they must be consistent."
              },
              {
                "name": "year",
                "description": "An integer used to disambiguate month if provided, because for some calendars, the same month can mean different monthCode in different years. See year of PlainDate. If a year is provided, then the overflow option validates the month-day in the given year, not just any year. If month is specified, at least one of era+eraYear or year must be provided. If all of era, eraYear, and year are provided, they must be consistent."
              },
              {
                "name": "options Optional",
                "description": "An object containing the following property:\n\noverflow Optional\n\nA string specifying the behavior when a date component is out of range (when using the object info). Possible values are:\n\n\"constrain\" (default)\n\nThe date component is clamped to the valid range.\n\n\"reject\"\n\nA RangeError is thrown if the date component is out of range."
              },
              {
                "name": "overflow Optional",
                "description": "A string specifying the behavior when a date component is out of range (when using the object info). Possible values are:\n\n\"constrain\" (default)\n\nThe date component is clamped to the valid range.\n\n\"reject\"\n\nA RangeError is thrown if the date component is out of range."
              },
              {
                "name": "\"constrain\" (default)",
                "description": "The date component is clamped to the valid range."
              },
              {
                "name": "\"reject\"",
                "description": "A RangeError is thrown if the date component is out of range."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "toLocaleString": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainMonthDay/toLocaleString",
            "title": "Temporal.PlainMonthDay.prototype.toLocaleString()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe toLocaleString() method of Temporal.PlainMonthDay instances returns a string with a language-sensitive representation of this month-day. In implementations with Intl.DateTimeFormat API support, this method delegates to Intl.DateTimeFormat.",
            "syntax": [],
            "parameters": [
              {
                "name": "locales Optional",
                "description": "A string with a BCP 47 language tag, or an array of such strings. Corresponds to the locales parameter of the Intl.DateTimeFormat() constructor."
              },
              {
                "name": "options Optional",
                "description": "An object adjusting the output format. Corresponds to the options parameter of the Intl.DateTimeFormat() constructor. The calendar option must be provided with the same value as this month-day's calendar. Regarding the date-time component options and the style shortcuts (dateStyle and timeStyle), the options should follow one of these forms:\n\nProvide none of them: month and day will default to \"numeric\".\nProvide dateStyle only: it expands to month and day formats.\nProvide some date-time component options, where at least one of them is month or day. Only the specified date components will be included in the output."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "toString": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainMonthDay/toString",
            "title": "Temporal.PlainMonthDay.prototype.toString()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe toString() method of Temporal.PlainMonthDay instances returns a string representing this month-day in the RFC 9557 format.",
            "syntax": [],
            "parameters": [
              {
                "name": "options Optional",
                "description": "An object containing the following property:\n\ncalendarName Optional\n\nWhether to show the calendar annotation ([u-ca=calendar_id]) in the return value. Possible values are:\n\n\"auto\" (default)\n\nInclude the calendar annotation if the calendar is not \"iso8601\". The reference year is included if the calendar is not \"iso8601\".\n\n\"always\"\n\nAlways include the calendar annotation. The reference year is always included too.\n\n\"never\"\n\nNever include the calendar annotation. This makes the returned string not recoverable to the same Temporal.PlainMonthDay instance, although the month-day value still remains the same. The reference year is included if the calendar is not \"iso8601\".\n\n\"critical\"\n\nAlways include the calendar annotation, and add a critical flag: [!u-ca=calendar_id]. Useful when sending the string to certain systems, but not useful for Temporal itself. The reference year is always included too."
              },
              {
                "name": "calendarName Optional",
                "description": "Whether to show the calendar annotation ([u-ca=calendar_id]) in the return value. Possible values are:\n\n\"auto\" (default)\n\nInclude the calendar annotation if the calendar is not \"iso8601\". The reference year is included if the calendar is not \"iso8601\".\n\n\"always\"\n\nAlways include the calendar annotation. The reference year is always included too.\n\n\"never\"\n\nNever include the calendar annotation. This makes the returned string not recoverable to the same Temporal.PlainMonthDay instance, although the month-day value still remains the same. The reference year is included if the calendar is not \"iso8601\".\n\n\"critical\"\n\nAlways include the calendar annotation, and add a critical flag: [!u-ca=calendar_id]. Useful when sending the string to certain systems, but not useful for Temporal itself. The reference year is always included too."
              },
              {
                "name": "\"auto\" (default)",
                "description": "Include the calendar annotation if the calendar is not \"iso8601\". The reference year is included if the calendar is not \"iso8601\"."
              },
              {
                "name": "\"always\"",
                "description": "Always include the calendar annotation. The reference year is always included too."
              },
              {
                "name": "\"never\"",
                "description": "Never include the calendar annotation. This makes the returned string not recoverable to the same Temporal.PlainMonthDay instance, although the month-day value still remains the same. The reference year is included if the calendar is not \"iso8601\"."
              },
              {
                "name": "\"critical\"",
                "description": "Always include the calendar annotation, and add a critical flag: [!u-ca=calendar_id]. Useful when sending the string to certain systems, but not useful for Temporal itself. The reference year is always included too."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "equals": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainMonthDay/equals",
            "title": "Temporal.PlainMonthDay.prototype.equals()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe equals() method of Temporal.PlainMonthDay instances returns true if this month-day is equivalent in value to another month-day (in a form convertible by Temporal.PlainMonthDay.from()), and false otherwise. They are compared both by their underlying ISO date values and their calendars.",
            "syntax": [],
            "parameters": [
              {
                "name": "other",
                "description": "A string, an object, or a Temporal.PlainMonthDay instance representing the other month-day to compare. It is converted to a Temporal.PlainMonthDay object using the same algorithm as Temporal.PlainMonthDay.from()."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "calendarId": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainMonthDay/calendarId",
            "title": "Temporal.PlainMonthDay.prototype.calendarId",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe calendarId accessor property of Temporal.PlainMonthDay instances returns a string representing the calendar used to interpret the internal ISO 8601 date.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          }
        },
        "PlainYearMonth": {
          "toJSON": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth/toJSON",
            "title": "Temporal.PlainYearMonth.prototype.toJSON()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe toJSON() method of Temporal.PlainYearMonth instances returns a string representing this year-month in the same RFC 9557 format as calling toString(). It is intended to be implicitly called by JSON.stringify().",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "toString": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth/toString",
            "title": "Temporal.PlainYearMonth.prototype.toString()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe toString() method of Temporal.PlainYearMonth instances returns a string representing this year-month in the RFC 9557 format.",
            "syntax": [],
            "parameters": [
              {
                "name": "options Optional",
                "description": "An object containing the following property:\n\ncalendarName Optional\n\nWhether to show the calendar annotation ([u-ca=calendar_id]) in the return value. Possible values are:\n\n\"auto\" (default)\n\nInclude the calendar annotation if the calendar is not \"iso8601\". The reference day is included if the calendar is not \"iso8601\".\n\n\"always\"\n\nAlways include the calendar annotation. The reference day is always included too.\n\n\"never\"\n\nNever include the calendar annotation. This makes the returned string not recoverable to the same Temporal.PlainYearMonth instance, although the year-month value still remains the same. The reference day is included if the calendar is not \"iso8601\".\n\n\"critical\"\n\nAlways include the calendar annotation, and add a critical flag: [!u-ca=calendar_id]. Useful when sending the string to certain systems, but not useful for Temporal itself. The reference day is always included too."
              },
              {
                "name": "calendarName Optional",
                "description": "Whether to show the calendar annotation ([u-ca=calendar_id]) in the return value. Possible values are:\n\n\"auto\" (default)\n\nInclude the calendar annotation if the calendar is not \"iso8601\". The reference day is included if the calendar is not \"iso8601\".\n\n\"always\"\n\nAlways include the calendar annotation. The reference day is always included too.\n\n\"never\"\n\nNever include the calendar annotation. This makes the returned string not recoverable to the same Temporal.PlainYearMonth instance, although the year-month value still remains the same. The reference day is included if the calendar is not \"iso8601\".\n\n\"critical\"\n\nAlways include the calendar annotation, and add a critical flag: [!u-ca=calendar_id]. Useful when sending the string to certain systems, but not useful for Temporal itself. The reference day is always included too."
              },
              {
                "name": "\"auto\" (default)",
                "description": "Include the calendar annotation if the calendar is not \"iso8601\". The reference day is included if the calendar is not \"iso8601\"."
              },
              {
                "name": "\"always\"",
                "description": "Always include the calendar annotation. The reference day is always included too."
              },
              {
                "name": "\"never\"",
                "description": "Never include the calendar annotation. This makes the returned string not recoverable to the same Temporal.PlainYearMonth instance, although the year-month value still remains the same. The reference day is included if the calendar is not \"iso8601\"."
              },
              {
                "name": "\"critical\"",
                "description": "Always include the calendar annotation, and add a critical flag: [!u-ca=calendar_id]. Useful when sending the string to certain systems, but not useful for Temporal itself. The reference day is always included too."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "daysInMonth": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth/daysInMonth",
            "title": "Temporal.PlainYearMonth.prototype.daysInMonth",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe daysInMonth accessor property of Temporal.PlainYearMonth instances returns a positive integer representing the number of days in the month of this date. It is calendar-dependent.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "with": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth/with",
            "title": "Temporal.PlainYearMonth.prototype.with()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe with() method of Temporal.PlainYearMonth instances returns a new Temporal.PlainYearMonth object representing this year-month with some fields replaced by new values. Because all Temporal objects are designed to be immutable, this method essentially functions as the setter for the year-month's fields.",
            "syntax": [],
            "parameters": [
              {
                "name": "info",
                "description": "An object containing at least one of the properties recognized by Temporal.PlainYearMonth.from() (except calendar): era and eraYear, month, monthCode, year. Unspecified properties use the values from the original year-month. You only need to provide one of month or monthCode, and one of era and eraYear or year, and the other will be updated accordingly."
              },
              {
                "name": "options Optional",
                "description": "An object containing the following property:\n\noverflow Optional\n\nA string specifying the behavior when a date component is out of range. Possible values are:\n\n\"constrain\" (default)\n\nThe date component is clamped to the valid range.\n\n\"reject\"\n\nA RangeError is thrown if the date component is out of range."
              },
              {
                "name": "overflow Optional",
                "description": "A string specifying the behavior when a date component is out of range. Possible values are:\n\n\"constrain\" (default)\n\nThe date component is clamped to the valid range.\n\n\"reject\"\n\nA RangeError is thrown if the date component is out of range."
              },
              {
                "name": "\"constrain\" (default)",
                "description": "The date component is clamped to the valid range."
              },
              {
                "name": "\"reject\"",
                "description": "A RangeError is thrown if the date component is out of range."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "subtract": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth/subtract",
            "title": "Temporal.PlainYearMonth.prototype.subtract()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe subtract() method of Temporal.PlainYearMonth instances returns a new Temporal.PlainYearMonth object representing this year-month moved backward by a given duration (in a form convertible by Temporal.Duration.from()).",
            "syntax": [],
            "parameters": [
              {
                "name": "duration",
                "description": "A string, an object, or a Temporal.Duration instance representing a duration to subtract from this year-month. It is converted to a Temporal.Duration object using the same algorithm as Temporal.Duration.from()."
              },
              {
                "name": "options Optional",
                "description": "An object containing the following property:\n\noverflow Optional\n\nA string specifying the behavior when a date component is out of range. Possible values are:\n\n\"constrain\" (default)\n\nThe date component is clamped to the valid range.\n\n\"reject\"\n\nA RangeError is thrown if the date component is out of range."
              },
              {
                "name": "overflow Optional",
                "description": "A string specifying the behavior when a date component is out of range. Possible values are:\n\n\"constrain\" (default)\n\nThe date component is clamped to the valid range.\n\n\"reject\"\n\nA RangeError is thrown if the date component is out of range."
              },
              {
                "name": "\"constrain\" (default)",
                "description": "The date component is clamped to the valid range."
              },
              {
                "name": "\"reject\"",
                "description": "A RangeError is thrown if the date component is out of range."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "year": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth/year",
            "title": "Temporal.PlainYearMonth.prototype.year",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe year accessor property of Temporal.PlainYearMonth instances returns an integer representing the number of years of this year-month relative to the start of a calendar-specific epoch year. It is calendar-dependent.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "toLocaleString": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth/toLocaleString",
            "title": "Temporal.PlainYearMonth.prototype.toLocaleString()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe toLocaleString() method of Temporal.PlainYearMonth instances returns a string with a language-sensitive representation of this year-month. In implementations with Intl.DateTimeFormat API support, this method delegates to Intl.DateTimeFormat.",
            "syntax": [],
            "parameters": [
              {
                "name": "locales Optional",
                "description": "A string with a BCP 47 language tag, or an array of such strings. Corresponds to the locales parameter of the Intl.DateTimeFormat() constructor."
              },
              {
                "name": "options Optional",
                "description": "An object adjusting the output format. Corresponds to the options parameter of the Intl.DateTimeFormat() constructor. The calendar option must be provided with the same value as this year-month's calendar. Regarding the date-time component options and the style shortcuts (dateStyle and timeStyle), the options should follow one of these forms:\n\nProvide none of them: year and month will default to \"numeric\".\nProvide dateStyle only: it expands to era, year, and month formats.\nProvide some date-time component options, where at least one of them is year or month. Only the specified date components will be included in the output."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "era": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth/era",
            "title": "Temporal.PlainYearMonth.prototype.era",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe era accessor property of Temporal.PlainYearMonth instances returns a calendar-specific lowercase string representing the era of this year-month, or undefined if the calendar does not use eras (e.g., ISO 8601). era and eraYear together uniquely identify a year in a calendar, in the same way that year does. It is calendar-dependent.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "toPlainDate": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth/toPlainDate",
            "title": "Temporal.PlainYearMonth.prototype.toPlainDate()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe toPlainDate() method of Temporal.PlainYearMonth instances returns a new Temporal.PlainDate object representing this year-month and a supplied day in the same calendar system.",
            "syntax": [],
            "parameters": [
              {
                "name": "dayInfo Optional",
                "description": "An object representing the day component of the resulting PlainDate, containing the following property:\n\nday\n\nCorresponds to the day property."
              },
              {
                "name": "day",
                "description": "Corresponds to the day property."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "monthsInYear": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth/monthsInYear",
            "title": "Temporal.PlainYearMonth.prototype.monthsInYear",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe monthsInYear accessor property of Temporal.PlainYearMonth instances returns a positive integer representing the number of months in the year of this date. It is calendar-dependent.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "inLeapYear": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth/inLeapYear",
            "title": "Temporal.PlainYearMonth.prototype.inLeapYear",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe inLeapYear accessor property of Temporal.PlainYearMonth instances returns a boolean indicating whether this year-month is in a leap year. A leap year is a year that has more days (due to a leap day or leap month) than a common year. It is calendar-dependent.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "until": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth/until",
            "title": "Temporal.PlainYearMonth.prototype.until()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe until() method of Temporal.PlainYearMonth instances returns a new Temporal.Duration object representing the duration from this year-month to another year-month (in a form convertible by Temporal.PlainYearMonth.from()). The duration is positive if the other month is after this month, and negative if before.",
            "syntax": [],
            "parameters": [
              {
                "name": "other",
                "description": "A string, an object, or a Temporal.PlainYearMonth instance representing a year-month to subtract this year-month from. It is converted to a Temporal.PlainYearMonth object using the same algorithm as Temporal.PlainYearMonth.from(). It must have the same calendar as this."
              },
              {
                "name": "options Optional",
                "description": "The same options as since()."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "daysInYear": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth/daysInYear",
            "title": "Temporal.PlainYearMonth.prototype.daysInYear",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe daysInYear accessor property of Temporal.PlainYearMonth instances returns a positive integer representing the number of days in the year of this date. It is calendar-dependent.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "valueOf": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth/valueOf",
            "title": "Temporal.PlainYearMonth.prototype.valueOf()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe valueOf() method of Temporal.PlainYearMonth instances throws a TypeError, which prevents Temporal.PlainYearMonth instances from being implicitly converted to primitives when used in arithmetic or comparison operations.",
            "syntax": [],
            "parameters": [
              {
                "name": "TypeError",
                "description": "Always thrown."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "compare": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth/compare",
            "title": "Temporal.PlainYearMonth.compare()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe Temporal.PlainYearMonth.compare() static method returns a number (-1, 0, or 1) indicating whether the first year-month comes before, is the same as, or comes after the second year-month. It is equivalent to comparing their underlying ISO 8601 dates. Two year-months from different calendars may be considered equal if they start on the same ISO date.",
            "syntax": [],
            "parameters": [
              {
                "name": "yearMonth1",
                "description": "A string, an object, or a Temporal.PlainYearMonth instance representing the first year-month to compare. It is converted to a Temporal.PlainYearMonth object using the same algorithm as Temporal.PlainYearMonth.from()."
              },
              {
                "name": "yearMonth2",
                "description": "The second year-month to compare, converted to a Temporal.PlainYearMonth object using the same algorithm as yearMonth1."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "equals": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth/equals",
            "title": "Temporal.PlainYearMonth.prototype.equals()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe equals() method of Temporal.PlainYearMonth instances returns true if this year-month is equivalent in value to another year-month (in a form convertible by Temporal.PlainYearMonth.from()), and false otherwise. They are compared both by their underlying ISO date values and their calendars, so two year-months from different calendars may be considered equal by Temporal.PlainYearMonth.compare() but not by equals().",
            "syntax": [],
            "parameters": [
              {
                "name": "other",
                "description": "A string, an object, or a Temporal.PlainYearMonth instance representing the other year-month to compare. It is converted to a Temporal.PlainYearMonth object using the same algorithm as Temporal.PlainYearMonth.from()."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "calendarId": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth/calendarId",
            "title": "Temporal.PlainYearMonth.prototype.calendarId",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe calendarId accessor property of Temporal.PlainYearMonth instances returns a string representing the calendar used to interpret the internal ISO 8601 date.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "from": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth/from",
            "title": "Temporal.PlainYearMonth.from()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe Temporal.PlainYearMonth.from() static method creates a new Temporal.PlainYearMonth object from another Temporal.PlainYearMonth object, an object with year and month properties, or an RFC 9557 string.",
            "syntax": [],
            "parameters": [
              {
                "name": "info",
                "description": "One of the following:\n\nA Temporal.PlainYearMonth instance, which creates a copy of the instance.\nAn RFC 9557 string containing a date and optionally a calendar. If the calendar is not iso8601, a day is required.\nAn object containing the following properties (in the order they are retrieved and validated):\n\ncalendar Optional\n\nA string that corresponds to the calendarId property. See Intl.supportedValuesOf() for a list of commonly supported calendar types. Defaults to \"iso8601\". All other properties are interpreted in this calendar system (unlike the Temporal.PlainYearMonth() constructor, which interprets the values in the ISO calendar system).\n\nera and eraYear\n\nA string and an integer that correspond to the era and eraYear properties. Are only used if the calendar system has eras. era and eraYear must be provided simultaneously. If they are not provided, then year must be provided. If all of era, eraYear, and year are provided, they must be consistent.\n\nmonth\n\nCorresponds to the month property. Must be positive regardless of the overflow option.\n\nmonthCode\n\nCorresponds to the monthCode property. If it is not provided, then month must be provided. If both month and monthCode are provided, they must be consistent.\n\nyear\n\nCorresponds to the year property."
              },
              {
                "name": "calendar Optional",
                "description": "A string that corresponds to the calendarId property. See Intl.supportedValuesOf() for a list of commonly supported calendar types. Defaults to \"iso8601\". All other properties are interpreted in this calendar system (unlike the Temporal.PlainYearMonth() constructor, which interprets the values in the ISO calendar system)."
              },
              {
                "name": "era and eraYear",
                "description": "A string and an integer that correspond to the era and eraYear properties. Are only used if the calendar system has eras. era and eraYear must be provided simultaneously. If they are not provided, then year must be provided. If all of era, eraYear, and year are provided, they must be consistent."
              },
              {
                "name": "month",
                "description": "Corresponds to the month property. Must be positive regardless of the overflow option."
              },
              {
                "name": "monthCode",
                "description": "Corresponds to the monthCode property. If it is not provided, then month must be provided. If both month and monthCode are provided, they must be consistent."
              },
              {
                "name": "year",
                "description": "Corresponds to the year property."
              },
              {
                "name": "options Optional",
                "description": "An object containing the following property:\n\noverflow Optional\n\nA string specifying the behavior when a date component is out of range (when using the object info). Possible values are:\n\n\"constrain\" (default)\n\nThe date component is clamped to the valid range.\n\n\"reject\"\n\nA RangeError is thrown if the date component is out of range."
              },
              {
                "name": "overflow Optional",
                "description": "A string specifying the behavior when a date component is out of range (when using the object info). Possible values are:\n\n\"constrain\" (default)\n\nThe date component is clamped to the valid range.\n\n\"reject\"\n\nA RangeError is thrown if the date component is out of range."
              },
              {
                "name": "\"constrain\" (default)",
                "description": "The date component is clamped to the valid range."
              },
              {
                "name": "\"reject\"",
                "description": "A RangeError is thrown if the date component is out of range."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "eraYear": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth/eraYear",
            "title": "Temporal.PlainYearMonth.prototype.eraYear",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe eraYear accessor property of Temporal.PlainYearMonth instances returns a non-negative integer representing the year of this year-month within the era, or undefined if the calendar does not use eras (e.g., ISO 8601). The year index usually starts from 1 (more common) or 0, and years in an era can decrease with time (e.g., Gregorian BCE). era and eraYear together uniquely identify a year in a calendar, in the same way that year does. It is calendar-dependent.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "monthCode": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth/monthCode",
            "title": "Temporal.PlainYearMonth.prototype.monthCode",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe monthCode accessor property of Temporal.PlainYearMonth instances returns a calendar-specific string representing the month of this year-month. It is calendar-dependent.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "month": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth/month",
            "title": "Temporal.PlainYearMonth.prototype.month",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe month accessor property of Temporal.PlainYearMonth instances returns a positive integer representing the 1-based month index in the year of this year-month. The first month of this year is 1, and the last month is the monthsInYear. It is calendar-dependent.",
            "syntax": [],
            "parameters": [],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "since": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth/since",
            "title": "Temporal.PlainYearMonth.prototype.since()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe since() method of Temporal.PlainYearMonth instances returns a new Temporal.Duration object representing the duration from another year-month (in a form convertible by Temporal.PlainYearMonth.from()) to this year-month. The duration is positive if the other month is before this month, and negative if after.",
            "syntax": [],
            "parameters": [
              {
                "name": "other",
                "description": "A string, an object, or a Temporal.PlainYearMonth instance representing a year-month to subtract from this year-month. It is converted to a Temporal.PlainYearMonth object using the same algorithm as Temporal.PlainYearMonth.from(). It must have the same calendar as this."
              },
              {
                "name": "options Optional",
                "description": "An object containing the options for Temporal.Duration.prototype.round(), which includes largestUnit, roundingIncrement, roundingMode, and smallestUnit. largestUnit and smallestUnit only accept the units: \"years\", \"months\", or their singular forms. For largestUnit, the default value \"auto\" means \"years\". For smallestUnit, the default value is \"months\". The current date is used as the relativeTo option."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "add": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth/add",
            "title": "Temporal.PlainYearMonth.prototype.add()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe add() method of Temporal.PlainYearMonth instances returns a new Temporal.PlainYearMonth object representing this year-month moved forward by a given duration (in a form convertible by Temporal.Duration.from()).",
            "syntax": [],
            "parameters": [
              {
                "name": "duration",
                "description": "A string, an object, or a Temporal.Duration instance representing a duration to add to this year-month. It is converted to a Temporal.Duration object using the same algorithm as Temporal.Duration.from()."
              },
              {
                "name": "options Optional",
                "description": "An object containing the following property:\n\noverflow Optional\n\nA string specifying the behavior when a date component is out of range. Possible values are:\n\n\"constrain\" (default)\n\nThe date component is clamped to the valid range.\n\n\"reject\"\n\nA RangeError is thrown if the date component is out of range."
              },
              {
                "name": "overflow Optional",
                "description": "A string specifying the behavior when a date component is out of range. Possible values are:\n\n\"constrain\" (default)\n\nThe date component is clamped to the valid range.\n\n\"reject\"\n\nA RangeError is thrown if the date component is out of range."
              },
              {
                "name": "\"constrain\" (default)",
                "description": "The date component is clamped to the valid range."
              },
              {
                "name": "\"reject\"",
                "description": "A RangeError is thrown if the date component is out of range."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          },
          "PlainYearMonth": {
            "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainYearMonth/PlainYearMonth",
            "title": "Temporal.PlainYearMonth()",
            "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe Temporal.PlainYearMonth() constructor creates Temporal.PlainYearMonth objects.",
            "syntax": [],
            "parameters": [
              {
                "name": "year Optional",
                "description": "A number, truncated to an integer, representing the year in the ISO calendar system."
              },
              {
                "name": "month",
                "description": "A number, truncated to an integer, representing the month in the ISO calendar system."
              },
              {
                "name": "calendar Optional",
                "description": "A string representing the calendar to use. See Intl.supportedValuesOf() for a list of commonly supported calendar types. Defaults to \"iso8601\". Note that irrespective of the calendar, the year, month, and referenceDay must be in the ISO 8601 calendar system."
              },
              {
                "name": "referenceDay",
                "description": "A number, truncated to an integer, representing the day of the month in the ISO calendar system. Defaults to 1. The same ISO year-month can represent different months on different days with non-ISO calendars. For example, the days 2021-07-01 and 2021-07-31 may fall in different months in a non-Gregorian calendar, and just specifying \"2021-07\" is insufficient to unambiguously determine a month in the target calendar. Therefore, you virtually always want to specify a referenceDay when using a non-ISO calendar."
              }
            ],
            "return_value": "",
            "examples": [],
            "browser_compatibility": {},
            "see_also": [],
            "inheritance": [],
            "properties": [],
            "methods": [],
            "children": []
          }
        },
        "Now": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/Now",
          "title": "Temporal.Now",
          "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n\nThe Temporal.Now namespace object contains static methods for getting the current time in various formats.",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        }
      },
      "SyntaxError": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
        "title": "SyntaxError",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nThe SyntaxError object represents an error when trying to interpret syntactically invalid code. It is thrown when the JavaScript engine encounters tokens or token order that does not conform to the syntax of the language when parsing code.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": [],
        "SyntaxError": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError/SyntaxError",
          "title": "SyntaxError() constructor",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe SyntaxError() constructor creates SyntaxError objects.\n\nNote: SyntaxError() can be called with or without new. Both create a new SyntaxError instance.",
          "syntax": [],
          "parameters": [
            {
              "name": "message Optional",
              "description": "Human-readable description of the error"
            },
            {
              "name": "options Optional",
              "description": "An object that has the following properties:\n\ncause Optional\n\nA property indicating the specific cause of the error.\nWhen catching and re-throwing an error with a more-specific or useful error message, this property can be used to pass the original error."
            },
            {
              "name": "cause Optional",
              "description": "A property indicating the specific cause of the error.\nWhen catching and re-throwing an error with a more-specific or useful error message, this property can be used to pass the original error."
            },
            {
              "name": "fileName Optional \nNon-standard",
              "description": "The name of the file containing the code that caused the exception"
            },
            {
              "name": "lineNumber Optional \nNon-standard",
              "description": "The line number of the code that caused the exception"
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        }
      },
      "Uint8Array": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
        "title": "Uint8Array",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nThe Uint8Array typed array represents an array of 8-bit unsigned integers. The contents are initialized to 0 unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": [],
        "toHex": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array/toHex",
          "title": "Uint8Array.prototype.toHex()",
          "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nThe toHex() method of Uint8Array instances returns a hex-encoded string based on the data in this Uint8Array object.\n\nThis method creates strings from a byte array. To convert individual numbers into hex, use the Number.prototype.toString() method with radix set to 16 instead.",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "setFromBase64": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array/setFromBase64",
          "title": "Uint8Array.prototype.setFromBase64()",
          "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nThe setFromBase64() method of Uint8Array instances populates this Uint8Array object with bytes from a base64-encoded string, returning an object indicating how many bytes were read and written.\n\nThis method is most suitable for populating a pre-allocated array buffer. If you just want to create a new Uint8Array object from a base64-encoded string, use the static method Uint8Array.fromBase64() instead.",
          "syntax": [],
          "parameters": [
            {
              "name": "string",
              "description": "A base64 string encoding bytes to write into a Uint8Array. It has the same requirements as the string parameter of Uint8Array.fromBase64(). Note that the string is only read up to the point where the array is filled, so any invalid base64 syntax after that point is ignored."
            },
            {
              "name": "options Optional",
              "description": "An object customizing the base64 string interpretation process. It has the same requirements as the options parameter of Uint8Array.fromBase64()."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "Uint8Array": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array/Uint8Array",
          "title": "Uint8Array() constructor",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Uint8Array() constructor creates Uint8Array objects. The contents are initialized to 0 unless initialization data is explicitly provided.\n\nNote: Uint8Array() can only be constructed with new. Attempting to call it without new throws a TypeError.",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "toBase64": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array/toBase64",
          "title": "Uint8Array.prototype.toBase64()",
          "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nThe toBase64() method of Uint8Array instances returns a base64-encoded string based on the data in this Uint8Array object.\n\nThis method should be preferred over Window.btoa(), especially if you already have a Uint8Array holding the object, because you don't need to convert it to a string first.",
          "syntax": [],
          "parameters": [
            {
              "name": "options Optional",
              "description": "An object customizing the base64 string format. It can contain the following properties:\n\nalphabet Optional\n\nA string specifying the base64 alphabet to use. It can be one of the following:\n\n\"base64\" (default)\n\nEncode input with the standard base64 alphabet, which uses + and /.\n\n\"base64url\"\n\nEncode input with the URL-safe base64 alphabet, which uses - and _.\n\n\n\nomitPadding Optional\n\nA boolean specifying whether to omit padding characters (=) at the end of the base64 string. The default is false."
            },
            {
              "name": "alphabet Optional",
              "description": "A string specifying the base64 alphabet to use. It can be one of the following:\n\n\"base64\" (default)\n\nEncode input with the standard base64 alphabet, which uses + and /.\n\n\"base64url\"\n\nEncode input with the URL-safe base64 alphabet, which uses - and _."
            },
            {
              "name": "\"base64\" (default)",
              "description": "Encode input with the standard base64 alphabet, which uses + and /."
            },
            {
              "name": "\"base64url\"",
              "description": "Encode input with the URL-safe base64 alphabet, which uses - and _."
            },
            {
              "name": "omitPadding Optional",
              "description": "A boolean specifying whether to omit padding characters (=) at the end of the base64 string. The default is false."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "setFromHex": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array/setFromHex",
          "title": "Uint8Array.prototype.setFromHex()",
          "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nThe setFromHex() method of Uint8Array instances populates this Uint8Array object with bytes from a hex-encoded string, returning an object indicating how many bytes were read and written.\n\nThis method parses the string into a byte array. To convert the string into a single number, use the parseInt() function with radix set to 16 instead.",
          "syntax": [],
          "parameters": [
            {
              "name": "string",
              "description": "A hexadecimal string encoding bytes to write into a Uint8Array. The string must:\n\nHave an even number of characters because two characters encode one byte.\nOnly contain characters in the hexadecimal alphabet, which includes 0\u00e2\u0080\u00939 and A\u00e2\u0080\u0093F (case-insensitive).\nNot contain whitespace (unlike Uint8Array.prototype.setFromBase64()).\n\nNote that the string is only read up to the point where the array is filled, so any invalid hex syntax after that point is ignored."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "fromHex": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array/fromHex",
          "title": "Uint8Array.fromHex()",
          "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nThe Uint8Array.fromHex() static method creates a new Uint8Array object from a hexadecimal string.\n\nThis method parses the string into a byte array. To convert the string into a single number, use the parseInt() function with radix set to 16 instead.",
          "syntax": [],
          "parameters": [
            {
              "name": "string",
              "description": "A hexadecimal string encoding bytes to convert to a Uint8Array. The string must:\n\nHave an even number of characters because two characters encode one byte.\nOnly contain characters in the hexadecimal alphabet, which includes 0\u00e2\u0080\u00939 and A\u00e2\u0080\u0093F (case-insensitive).\nNot contain whitespace (unlike Uint8Array.prototype.setFromBase64())."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "fromBase64": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array/fromBase64",
          "title": "Uint8Array.fromBase64()",
          "description": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nThe Uint8Array.fromBase64() static method creates a new Uint8Array object from a base64-encoded string.\n\nThis method should be preferred over Window.atob() because it results in a byte array, which is easier to work with than a string containing raw bytes, unless your decoded binary data is actually intended to be ASCII text. If you already have an array buffer allocated and you want to populate it, use the instance method Uint8Array.prototype.setFromBase64() instead.",
          "syntax": [],
          "parameters": [
            {
              "name": "string",
              "description": "A base64 string encoding bytes to convert to a Uint8Array. The string must only contain characters in the base64 alphabet, which includes A\u00e2\u0080\u0093Z, a\u00e2\u0080\u0093z, 0\u00e2\u0080\u00939, and two special characters, which are either + and / (if using alphabet: \"base64\" in options) or - and _ (if using alphabet: \"base64url\" in options). It may have padding = characters at the end. Any ASCII white space characters within the string are ignored."
            },
            {
              "name": "options Optional",
              "description": "An object customizing the base64 string interpretation process. It can contain the following properties:\n\nalphabet Optional\n\nA string specifying the base64 alphabet to use. It can be one of the following:\n\n\"base64\" (default)\n\nAccept input encoded with the standard base64 alphabet, which uses + and /.\n\n\"base64url\"\n\nAccept input encoded with the URL-safe base64 alphabet, which uses - and _.\n\n\n\nlastChunkHandling Optional\n\nA string specifying how to handle the last chunk of the base64 string. Because every 4 characters in base64 encodes 3 bytes, the string is separated into chunks of 4 characters. If the last chunk has fewer than 4 characters, it needs to be handled differently. It can be one of the following:\n\n\"loose\" (default)\n\nThe last chunk can either be 2 or 3 base64 characters, or exactly 4 characters long with padding = characters. The last chunk is decoded and appended to the result.\n\n\"strict\"\n\nThe last chunk must be exactly 4 characters long with padding = characters. Furthermore, overflow bits (trailing bits from the last base64 character that don't represent any data) must be 0. The last chunk is decoded and appended to the result.\n\n\"stop-before-partial\"\n\nIf the last chunk is exactly 4 characters long with padding = characters, then it's decoded and appended to the result. Otherwise, the last partial chunk is ignored (but if it contains one base64 character followed by =, then a syntax error is still thrown). This is useful if the string is coming from a stream and the last chunk is not yet complete. To know how many characters of the input were read, use Uint8Array.prototype.setFromBase64() instead (the linked page also contains an example of stream decoding using \"stop-before-partial\")."
            },
            {
              "name": "alphabet Optional",
              "description": "A string specifying the base64 alphabet to use. It can be one of the following:\n\n\"base64\" (default)\n\nAccept input encoded with the standard base64 alphabet, which uses + and /.\n\n\"base64url\"\n\nAccept input encoded with the URL-safe base64 alphabet, which uses - and _."
            },
            {
              "name": "\"base64\" (default)",
              "description": "Accept input encoded with the standard base64 alphabet, which uses + and /."
            },
            {
              "name": "\"base64url\"",
              "description": "Accept input encoded with the URL-safe base64 alphabet, which uses - and _."
            },
            {
              "name": "lastChunkHandling Optional",
              "description": "A string specifying how to handle the last chunk of the base64 string. Because every 4 characters in base64 encodes 3 bytes, the string is separated into chunks of 4 characters. If the last chunk has fewer than 4 characters, it needs to be handled differently. It can be one of the following:\n\n\"loose\" (default)\n\nThe last chunk can either be 2 or 3 base64 characters, or exactly 4 characters long with padding = characters. The last chunk is decoded and appended to the result.\n\n\"strict\"\n\nThe last chunk must be exactly 4 characters long with padding = characters. Furthermore, overflow bits (trailing bits from the last base64 character that don't represent any data) must be 0. The last chunk is decoded and appended to the result.\n\n\"stop-before-partial\"\n\nIf the last chunk is exactly 4 characters long with padding = characters, then it's decoded and appended to the result. Otherwise, the last partial chunk is ignored (but if it contains one base64 character followed by =, then a syntax error is still thrown). This is useful if the string is coming from a stream and the last chunk is not yet complete. To know how many characters of the input were read, use Uint8Array.prototype.setFromBase64() instead (the linked page also contains an example of stream decoding using \"stop-before-partial\")."
            },
            {
              "name": "\"loose\" (default)",
              "description": "The last chunk can either be 2 or 3 base64 characters, or exactly 4 characters long with padding = characters. The last chunk is decoded and appended to the result."
            },
            {
              "name": "\"strict\"",
              "description": "The last chunk must be exactly 4 characters long with padding = characters. Furthermore, overflow bits (trailing bits from the last base64 character that don't represent any data) must be 0. The last chunk is decoded and appended to the result."
            },
            {
              "name": "\"stop-before-partial\"",
              "description": "If the last chunk is exactly 4 characters long with padding = characters, then it's decoded and appended to the result. Otherwise, the last partial chunk is ignored (but if it contains one base64 character followed by =, then a syntax error is still thrown). This is useful if the string is coming from a stream and the last chunk is not yet complete. To know how many characters of the input were read, use Uint8Array.prototype.setFromBase64() instead (the linked page also contains an example of stream decoding using \"stop-before-partial\")."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        }
      },
      "undefined": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
        "title": "undefined",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe undefined global property represents the primitive\nvalue undefined. It is one of JavaScript's\nprimitive types.\n\nThe primitive value undefined.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Uint16Array": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
        "title": "Uint16Array",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Uint16Array typed array represents an array of 16-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0 unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n\nUint16Array is a subclass of the hidden TypedArray class.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": [],
        "Uint16Array": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array/Uint16Array",
          "title": "Uint16Array() constructor",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Uint16Array() constructor creates Uint16Array objects. The contents are initialized to 0 unless initialization data is explicitly provided.\n\nNote: Uint16Array() can only be constructed with new. Attempting to call it without new throws a TypeError.",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        }
      },
      "Uint8ClampedArray": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
        "title": "Uint8ClampedArray",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Uint8ClampedArray typed array represents an array of 8-bit unsigned integers clamped to 0\u00e2\u0080\u0093255. The contents are initialized to 0 unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n\nUint8ClampedArray is a subclass of the hidden TypedArray class.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": [],
        "Uint8ClampedArray": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray/Uint8ClampedArray",
          "title": "Uint8ClampedArray() constructor",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Uint8ClampedArray() constructor creates Uint8ClampedArray objects. The contents are initialized to 0 unless initialization data is explicitly provided.\n\nNote: Uint8ClampedArray() can only be constructed with new. Attempting to call it without new throws a TypeError.",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        }
      },
      "Uint32Array": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
        "title": "Uint32Array",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Uint32Array typed array represents an array of 32-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0 unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n\nUint32Array is a subclass of the hidden TypedArray class.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": [],
        "Uint32Array": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array/Uint32Array",
          "title": "Uint32Array() constructor",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe Uint32Array() constructor creates Uint32Array objects. The contents are initialized to 0 unless initialization data is explicitly provided.\n\nNote: Uint32Array() can only be constructed with new. Attempting to call it without new throws a TypeError.",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        }
      },
      "unescape": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/unescape",
        "title": "unescape()",
        "description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nNote: unescape() is a non-standard function implemented by browsers and was only standardized for cross-engine compatibility. It is not required to be implemented by all JavaScript engines and may not work everywhere. Use decodeURIComponent() or decodeURI() if possible.\n\nThe unescape() function computes a new string in which hexadecimal escape sequences are replaced with the characters that they represent. The escape sequences might be introduced by a function like escape().",
        "syntax": [],
        "parameters": [
          {
            "name": "str",
            "description": "A string to be decoded."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "WeakMap": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap#emulating_private_members",
        "title": "WeakMap",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nA WeakMap is a collection of key/value pairs whose keys must be objects or non-registered symbols, with values of any arbitrary JavaScript type, and which does not create strong references to its keys. That is, an object's presence as a key in a WeakMap does not prevent the object from being garbage collected. Once an object used as a key has been collected, its corresponding values in any WeakMap become candidates for garbage collection as well \u00e2\u0080\u0094 as long as they aren't strongly referred to elsewhere. The only primitive type that can be used as a WeakMap key is symbol \u00e2\u0080\u0094 more specifically, non-registered symbols \u00e2\u0080\u0094 because non-registered symbols are guaranteed to be unique and cannot be re-created.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "WeakRef": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakRef#notes_on_weakrefs",
        "title": "WeakRef",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since April 2021.\n\n* Some parts of this feature may have varying levels of support.\n\nA WeakRef object lets you hold a weak reference to another object, without preventing that object from getting garbage-collected.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": [],
        "deref": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakRef/deref",
          "title": "WeakRef.prototype.deref()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since April 2021.\n\nThe deref() method of WeakRef instances returns this WeakRef's target value, or undefined if the target value has been garbage-collected.\n\nNone.",
          "syntax": [],
          "parameters": [],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "WeakRef": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakRef/WeakRef",
          "title": "WeakRef() constructor",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since April 2021.\n\n* Some parts of this feature may have varying levels of support.\n\nThe WeakRef() constructor creates WeakRef objects.",
          "syntax": [],
          "parameters": [
            {
              "name": "target",
              "description": "The target value the WeakRef should refer to (also called the referent). Must be an object or a non-registered symbol."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        }
      },
      "WeakSet": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
        "title": "WeakSet",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nA WeakSet is a collection of garbage-collectable values, including objects and non-registered symbols. A value in the WeakSet may only occur once. It is unique in the WeakSet's collection.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": [],
        "delete": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/delete",
          "title": "WeakSet.prototype.delete()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2015.\n\nThe delete() method of WeakSet instances removes the specified element from this WeakSet.\n\nThe value to remove from the WeakSet object.",
          "syntax": [],
          "parameters": [
            {
              "name": "value",
              "description": "The value to remove from the WeakSet object."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "has": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/has",
          "title": "WeakSet.prototype.has()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2015.\n\nThe has() method of WeakSet instances returns a boolean indicating whether an\nobject exists in this WeakSet or not.\n\nThe value to test for presence in the WeakSet.",
          "syntax": [],
          "parameters": [
            {
              "name": "value",
              "description": "The value to test for presence in the WeakSet."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "add": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/add",
          "title": "WeakSet.prototype.add()",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2015.\n\nThe add() method of WeakSet instances appends a new object to the end of this WeakSet.\n\nMust be either an object or a non-registered symbol. The value to add to the WeakSet collection.",
          "syntax": [],
          "parameters": [
            {
              "name": "value",
              "description": "Must be either an object or a non-registered symbol. The value to add to the WeakSet collection."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        },
        "WeakSet": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/WeakSet",
          "title": "WeakSet() constructor",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2015.\n\nThe WeakSet() constructor creates WeakSet objects.\n\nNote: WeakSet() can only be constructed with new. Attempting to call it without new throws a TypeError.",
          "syntax": [],
          "parameters": [
            {
              "name": "iterable Optional",
              "description": "If an iterable object is passed, all of its elements will be added to the new WeakSet. null is treated as undefined."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        }
      },
      "URIError": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
        "title": "URIError",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nThe URIError object represents an error when a global URI handling function was used in a wrong way.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": [],
        "URIError": {
          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError/URIError",
          "title": "URIError() constructor",
          "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe URIError() constructor creates URIError objects.\n\nNote: URIError() can be called with or without new. Both create a new URIError instance.",
          "syntax": [],
          "parameters": [
            {
              "name": "message Optional",
              "description": "Human-readable description of the error."
            },
            {
              "name": "options Optional",
              "description": "An object that has the following properties:\n\ncause Optional\n\nA property indicating the specific cause of the error.\nWhen catching and re-throwing an error with a more-specific or useful error message, this property can be used to pass the original error."
            },
            {
              "name": "cause Optional",
              "description": "A property indicating the specific cause of the error.\nWhen catching and re-throwing an error with a more-specific or useful error message, this property can be used to pass the original error."
            },
            {
              "name": "fileName Optional \nNon-standard",
              "description": "The name of the file containing the code that caused the exception."
            },
            {
              "name": "lineNumber Optional \nNon-standard",
              "description": "The line number of the code that caused the exception."
            }
          ],
          "return_value": "",
          "examples": [],
          "browser_compatibility": {},
          "see_also": [],
          "inheritance": [],
          "properties": [],
          "methods": [],
          "children": []
        }
      }
    },
    "Operators": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#assignment_operators",
      "title": "Expressions and operators",
      "description": "This chapter documents all the JavaScript language operators, expressions and keywords.\n\nFor an alphabetical listing see the sidebar on the left.\n\nBasic keywords and general expressions in JavaScript. These expressions have the highest precedence (higher than operators).",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": [],
      "Object initializer": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#computed_property_names",
        "title": "Object initializer",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nAn object initializer is a comma-delimited list of zero or more pairs of property names and associated values of an object, enclosed in curly braces ({}). Objects can also be initialized using Object.create() or by invoking a constructor function with the new operator.\n\nAn object initializer is an expression that describes the initialization of an Object. Objects consist of properties, which are used to describe an object. The values of object properties can either contain primitive data types or other objects.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "void": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/void#immediately_invoked_function_expressions",
        "title": "void operator",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe void operator evaluates the given\nexpression and then returns undefined.\n\nThis operator allows evaluating expressions that produce a value into places where an\nexpression that evaluates to undefined is desired.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "import.meta": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import.meta#value",
        "title": "import.meta",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since January 2020.\n\n* Some parts of this feature may have varying levels of support.\n\nThe import.meta meta-property exposes context-specific metadata to a JavaScript module. It contains information about the module, such as the module's URL.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Destructuring": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring#rest_properties_and_rest_elements",
        "title": "Destructuring",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since August 2016.\n\nThe destructuring syntax is a JavaScript syntax that makes it possible to unpack values from arrays, or properties from objects, into distinct variables. It can be used in locations that receive data (such as the left-hand side of an assignment or anywhere that creates new identifier bindings).\n\nThe object and array literal expressions provide an easy way to create ad hoc packages of data.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Property accessors": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors#dot_notation",
        "title": "Property accessors",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nProperty accessors provide access to an object's properties by using the dot notation or the bracket notation.\n\nOne can think of an object as an associative array (a.k.a. map, dictionary, hash, lookup table). The keys in this array are the names of the object's properties.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "super": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super#calling_methods_from_super",
        "title": "super",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since March 2016.\n\nThe super keyword is used to access properties on an object literal or class's [[Prototype]], or invoke a superclass's constructor.\n\nThe super.prop and super[expr] expressions are valid in any method definition in both classes and object literals. The super(...args) expression is valid in class constructors.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "import": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import#module_namespace_object",
        "title": "import()",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since January 2020.\n\n* Some parts of this feature may have varying levels of support.\n\nThe import() syntax, commonly called dynamic import, is a function-like expression that allows loading an ECMAScript module asynchronously and dynamically into a potentially non-module environment.",
        "syntax": [],
        "parameters": [
          {
            "name": "moduleName",
            "description": "The module to import from. The evaluation of the specifier is host-specified, but always follows the same algorithm as static import declarations."
          },
          {
            "name": "options",
            "description": "An object containing import options. The following key is recognized:\n\nwith\n\nThe import attributes."
          },
          {
            "name": "with",
            "description": "The import attributes."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Assignment": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment#unqualified_identifier_assignment",
        "title": "Assignment (=)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nThe assignment (=) operator is used to assign a value to a variable or property. The assignment expression itself has a value, which is the assigned value. This allows multiple assignments to be chained in order to assign a single value to multiple variables.\n\nA valid assignment target, including an identifier or a property accessor. It can also be a destructuring pattern.",
        "syntax": [],
        "parameters": [
          {
            "name": "x",
            "description": "A valid assignment target, including an identifier or a property accessor. It can also be a destructuring pattern."
          },
          {
            "name": "y",
            "description": "An expression specifying the value to be assigned to x."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      }
    },
    "Regular expressions": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions#regex_flags",
      "title": "Regular expressions",
      "description": "A regular expression (regex for short) allow developers to match strings against a pattern, extract submatch information, or simply test if the string conforms to that pattern. Regular expressions are used in many programming languages, and JavaScript's syntax is inspired by Perl.\n\nYou are encouraged to read the regular expressions guide to get an overview of the available regex syntaxes and how they work.\n\nRegular expressions are a important concept in formal language theory. They are a way to describe a possibly infinite set of character strings (called a language). A regular expression, at its core, needs the following features:",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": [],
      "Lookahead assertion": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Lookahead_assertion#matching_strings_without_consuming_them",
        "title": "Lookahead assertion: (?=...), (?!...)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nA lookahead assertion \"looks ahead\": it attempts to match the subsequent input with the given pattern, but it does not consume any of the input \u00e2\u0080\u0094 if the match is successful, the current position in the input stays the same.\n\nA pattern consisting of anything you may use in a regex literal, including a disjunction.",
        "syntax": [],
        "parameters": [
          {
            "name": "pattern",
            "description": "A pattern consisting of anything you may use in a regex literal, including a disjunction."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Capturing group": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Capturing_group#pairing_quotes",
        "title": "Capturing group: (...)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nA capturing group groups a subpattern, allowing you to apply a quantifier to the entire group or use disjunctions within it. It memorizes information about the subpattern match, so that you can refer back to it later with a backreference, or access the information through the match results.\n\nIf you don't need the result of the subpattern match, use a non-capturing group instead, which improves performance and avoids refactoring hazards.",
        "syntax": [],
        "parameters": [
          {
            "name": "pattern",
            "description": "A pattern consisting of anything you may use in a regex literal, including a disjunction."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Character class": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class#non-v-mode_character_class",
        "title": "Character class: [...], [^...]",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\nA character class matches any character in or not in a custom set of characters. When the v flag is enabled, it can also be used to match finite-length strings.\n\nCan be a single character, another square-bracket-enclosed character class, a character class escape, a Unicode character class escape, or a string using the \\q syntax.",
        "syntax": [],
        "parameters": [
          {
            "name": "operand1, operand2",
            "description": "Can be a single character, another square-bracket-enclosed character class, a character class escape, a Unicode character class escape, or a string using the \\q syntax."
          },
          {
            "name": "substring",
            "description": "A literal string."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Named capturing group": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_capturing_group#browser_compatibility",
        "title": "Named capturing group: (?<name>...)",
        "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2020.\n\n* Some parts of this feature may have varying levels of support.\n\nA named capturing group is a particular kind of capturing group that allows to give a name to the group. The group's matching result can later be identified by this name instead of by its index in the pattern.",
        "syntax": [],
        "parameters": [
          {
            "name": "pattern",
            "description": "A pattern consisting of anything you may use in a regex literal, including a disjunction."
          },
          {
            "name": "name",
            "description": "The name of the group. Must be a valid identifier."
          }
        ],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      }
    },
    "Errors": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors",
      "title": "JavaScript error reference",
      "description": "Below, you'll find a list of errors which are thrown by JavaScript. These errors can be a helpful debugging aid, but the reported problem isn't always immediately clear. The pages below will provide additional details about these errors. Each error is an object based upon the Error object, and has a name and a message.\n\nErrors displayed in the Web console may include a link to the corresponding page below to help you quickly comprehend the problem in your code.\n\nFor a beginner's introductory tutorial on fixing JavaScript errors, see What went wrong? Troubleshooting JavaScript.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": [],
      "Too much recursion": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Too_much_recursion",
        "title": "InternalError: too much recursion",
        "description": "The JavaScript exception \"too much recursion\" or \"Maximum call stack size exceeded\"\noccurs when there are too many function calls, or a function is missing a base case.\n\nInternalError in Firefox; RangeError in Chrome and Safari.\n\nA function that calls itself is called a recursive function. Once a condition\nis met, the function stops calling itself. This is called a base case.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Promise any all rejected": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Promise_any_all_rejected",
        "title": "AggregateError: No Promise in Promise.any was resolved",
        "description": "The JavaScript exception \"No Promise in Promise.any was resolved\" occurs when all promises passed to Promise.any() are rejected. It is the only built-in usage of AggregateError.\n\nPromise.any() only rejects when all promises passed to it are rejected. You should access errors to get the array of rejection reasons. See Using promises for more information on how to handle asynchronously rejected promises. This error is also raised when Promise.any() receives an empty iterable.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Property access denied": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Property_access_denied",
        "title": "Error: Permission denied to access property \"x\"",
        "description": "The JavaScript exception \"Permission denied to access property\" occurs when there was\nan attempt to access an object for which you have no permission.\n\nDOMException.\n\nThere was attempt to access an object for which you have no permission. This is likely\nan <iframe> element loaded from a different domain for which you\nviolated the same-origin policy.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Not a valid code point": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Not_a_valid_code_point",
        "title": "RangeError: argument is not a valid code point",
        "description": "The JavaScript exception \"Invalid code point\" occurs when NaN values,\nnegative Integers (-1), non-Integers (5.4), or values larger than 0x10FFFF (1114111) are\nused with String.fromCodePoint().\n\nString.fromCodePoint() throws this error when passed NaN\nvalues, negative Integers (-1), non-Integers (5.4), or values larger than 0x10FFFF\n(1114111).\n\nA code point is a value in the\nUnicode codespace; that is, the range of integers from 0 to\n0x10FFFF.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Invalid array length": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_array_length",
        "title": "RangeError: invalid array length",
        "description": "The JavaScript exception \"Invalid array length\" occurs when specifying an array length that is either negative, a floating number or exceeds the maximum supported by the platform (i.e., when creating an Array or ArrayBuffer, or when setting the length property).\n\nThe maximum allowed array length depends on the platform, browser and browser version.\nFor Array the maximum length is 232-1.\nFor ArrayBuffer the maximum is 231-1 (2GiB-1) on 32-bit systems.\nFrom Firefox version 89 the maximum value of ArrayBuffer is 233 (8GiB) on 64-bit systems.\n\nNote: Array and ArrayBuffer are independent data structures (the implementation of one does not affect the other).",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "BigInt negative exponent": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/BigInt_negative_exponent",
        "title": "RangeError: BigInt negative exponent",
        "description": "The JavaScript exception \"BigInt negative exponent\" occurs when a BigInt is raised to the power of a negative BigInt value.\n\nRangeError.\n\nThe exponent of an exponentiation operation must be positive. Since negative exponents would take the reciprocal of the base, the result will be between -1 and 1 in almost all cases, which gets rounded to 0n. To catch mistakes, negative exponents are not allowed. Check if the exponent is non-negative before doing exponentiation.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Invalid date": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_date",
        "title": "RangeError: invalid date",
        "description": "The JavaScript exception \"invalid date\" occurs when an invalid date is attempted to be converted to an ISO date string.\n\nYou are converting an invalid date value to an ISO date string. This usually happens in one of three ways:\n\nAn invalid date is produced when you attempt to parse an invalid date string, or set the timestamp to an out-of-bounds value. Invalid dates usually cause all date methods to return NaN or other special values. However, such dates do not have valid ISO string representations, so an error is thrown when you attempt to do so.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Form must be one of": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Form_must_be_one_of",
        "title": "RangeError: form must be one of 'NFC', 'NFD', 'NFKC', or 'NFKD'",
        "description": "The JavaScript exception \"form must be one of 'NFC', 'NFD', 'NFKC', or 'NFKD'\" occurs when an unrecognized string is passed to the String.prototype.normalize() method.\n\nThe String.prototype.normalize() method only accepts the following four values as its form argument: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\". If you pass any other value, an error will be thrown. Read the reference of normalize() to learn about different normalization forms.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "BigInt division by zero": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/BigInt_division_by_zero",
        "title": "RangeError: BigInt division by zero",
        "description": "The JavaScript exception \"BigInt division by zero\" occurs when a BigInt is divided by 0n.\n\nRangeError.\n\nThe divisor of a division or remainder operator is 0n. In Number arithmetic, this produces Infinity, but there's no \"infinity value\" in BigInts, so an error is issued. Check if the divisor is 0n before doing the division.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Negative repetition count": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Negative_repetition_count",
        "title": "RangeError: repeat count must be non-negative",
        "description": "The JavaScript exception \"repeat count must be non-negative\" occurs when the\nString.prototype.repeat() method is used with a count\nargument that is a negative number.\n\nThe String.prototype.repeat() method has been used. It has a\ncount parameter indicating the number of times to repeat the string. It\nmust be between 0 and less than positive Infinity and cannot be a negative\nnumber. The range of allowed values can be described like this: [0, +\u00e2\u0088\u009e).",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Precision range": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Precision_range",
        "title": "RangeError: precision is out of range",
        "description": "The JavaScript exception \"precision is out of range\" occurs when a number that's\noutside of the allowed range was passed into toExponential, toFixed, or toPrecision.\n\nThere was an out of range precision argument in one of these methods:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Bad radix": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Bad_radix",
        "title": "RangeError: radix must be an integer",
        "description": "The JavaScript exception \"radix must be an integer at least 2 and no greater than 36\"\noccurs when the optional radix parameter of the\nNumber.prototype.toString() or\nthe BigInt.prototype.toString() method was specified and is not between 2\nand 36.\n\nThe optional radix parameter of the\nNumber.prototype.toString() or\nthe BigInt.prototype.toString() method was specified. Its value must be an\ninteger (a number) between 2 and 36, specifying the base of the number system to be used\nfor representing numeric values. For example, the decimal (base 10) number 169 is\nrepresented in hexadecimal (base 16) as A9.\n\nWhy is this parameter's value limited to 36? A radix that is larger than 10 uses\nalphabetical characters as digits; therefore, the radix can't be larger than 36, since\nthe Latin alphabet (used by English and many other languages) only has 26 characters.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Resulting string too large": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Resulting_string_too_large",
        "title": "RangeError: repeat count must be less than infinity",
        "description": "The JavaScript exception \"repeat count must be less than infinity\" occurs when the\nString.prototype.repeat() method is used with a count\nargument that is infinity.\n\nThe String.prototype.repeat() method has been used. It has a\ncount parameter indicating the number of times to repeat the string. It\nmust be between 0 and less than positive Infinity and cannot be a negative\nnumber. The range of allowed values can be described like this: [0, +\u00e2\u0088\u009e).\n\nThe resulting string can also not be larger than the maximum string size, which can\ndiffer in JavaScript engines. In Firefox (SpiderMonkey) the maximum string size is\n230 - 2 (~2GiB).",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Cant be converted to BigInt because it isnt an integer": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cant_be_converted_to_BigInt_because_it_isnt_an_integer",
        "title": "RangeError: x can't be converted to BigInt because it isn't an integer",
        "description": "The JavaScript exception \"x can't be converted to BigInt because it isn't an integer\" occurs when the BigInt() function is used on a number that isn't an integer.\n\nRangeError.\n\nWhen using the BigInt() function to convert a number to a BigInt, the number must be an integer (such that Number.isInteger returns true).",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Super not called": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Super_not_called",
        "title": "ReferenceError: must call super constructor before using 'this' in derived class constructor",
        "description": "The JavaScript exception \"must call super constructor before using 'this' in derived class constructor\" occurs when the super() is not called for a given derived class constructor, and the derived constructor tries to access the value of this, or the derived constructor has already returned and the return value is not an object.\n\nThe super() call can only be called at most once for each new call to a derived class constructor. Often, you need to call it exactly once, because if you don't call it, the parent constructor cannot initialize the value of this, so you cannot access this in the derived constructor and the this is not considered a valid constructed object (and throws if the derived constructor completes in this state). The way around it is to return an object from the derived class constructor, in which case the object returned will be used as the constructed object instead of this, allowing you to not call super(). This is rarely done though.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Undeclared var": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Undeclared_var",
        "title": "ReferenceError: assignment to undeclared variable \"x\"",
        "description": "The JavaScript strict mode-only exception \"Assignment to undeclared variable\" occurs when the value has been assigned to an undeclared variable.\n\nReferenceError in strict mode only.\n\nA value has been assigned to an undeclared variable.\nIn other words, there was an assignment without the var keyword.\nThere are some differences between declared and undeclared variables, which might lead to unexpected results and that's why JavaScript presents an error in strict mode.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Super called twice": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Super_called_twice",
        "title": "ReferenceError: super() called twice in derived class constructor",
        "description": "The JavaScript exception \"super() called twice in derived class constructor\" occurs when the super() is called a second time for a given derived class constructor.\n\nThe super() call can only be called at most once for each new call to a derived class constructor. This is because super() is responsible for initializing the parent class, and calling it more than once would result in the parent constructor being called multiple times.\n\nThe best way to prevent this is to ensure that super() is placed outside of any control flow structure. Otherwise, make sure that all code paths in the constructor lead to only one super() call.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Not defined": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Not_defined",
        "title": "ReferenceError: \"x\" is not defined",
        "description": "The JavaScript exception \"variable is not defined\" occurs when there is a\nnon-existent variable referenced somewhere.\n\nReferenceError.\n\nThere is a non-existent variable referenced somewhere. This variable needs to be\ndeclared, or you need to make sure it is available in your current script or scope.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Cant access lexical declaration before init": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cant_access_lexical_declaration_before_init",
        "title": "ReferenceError: can't access lexical declaration 'X' before initialization",
        "description": "The JavaScript exception \"can't access lexical declaration 'X' before initialization\" occurs when a lexical variable was accessed before it was initialized.\nThis happens within any scope (global, module, function, or block) when let or const variables are accessed before the place where they are declared is executed.\n\nA lexical variable was accessed before it was initialized.\nThis happens within any scope (global, module, function, or block) when variables declared with let or const are accessed before the place where they are declared has been executed.\n\nNote that it is the execution order of access and variable declaration that matters, not the order in which the statements appear in the code.\nFor more information, see the description of Temporal Dead Zone.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Regex backslash at end of pattern": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Regex_backslash_at_end_of_pattern",
        "title": "SyntaxError: \\ at end of pattern",
        "description": "The JavaScript exception \"\\ at end of pattern\" occurs when a regular expression pattern ends with an unescaped backslash (\\). In a regex literal, the backslash would cause the closing slash / to be a literal character, so this can only appear when using the RegExp() constructor.\n\nA backslash cannot appear literally in a regular expression. It either precedes another character to escape it, or is itself escaped by another backslash. A backslash at the end of a regular expression pattern is invalid because it is not escaping anything.\n\nThis error can only happen when using the RegExp() constructor. Consider the following code, which intends to match a single backslash character:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Strict non simple params": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Strict_non_simple_params",
        "title": "SyntaxError: \"use strict\" not allowed in function with non-simple parameters",
        "description": "The JavaScript exception \"\"use strict\" not allowed in function\" occurs\nwhen a \"use strict\" directive is used at the top of a function with\ndefault parameters,\nrest parameters, or\ndestructuring parameters.\n\nSyntaxError.\n\nA \"use strict\" directive is written at the top of a function that has one\nof the following parameters:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Reserved identifier": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Reserved_identifier",
        "title": "SyntaxError: \"x\" is a reserved identifier",
        "description": "The JavaScript exception \"variable is a reserved identifier\" occurs\nwhen reserved keywords are used as identifiers.\n\nReserved keywords will throw in\nif they are used as identifiers. These are reserved in\nstrict mode and sloppy mode:\n\nThe following are only reserved when they are found in strict mode code:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Deprecated octal literal": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Deprecated_octal_literal",
        "title": "SyntaxError: \"0\"-prefixed octal literals are deprecated",
        "description": "The JavaScript strict mode-only exception \"0-prefixed octal literals are deprecated; use the \"0o\" prefix instead\" occurs when deprecated octal literals (0 followed by digits) are used.\n\nSyntaxError in strict mode only.\n\nOctal literals are deprecated. When you prefix a decimal integer with 0, you actually change it to an octal literal, which may be surprising. The standardized syntax uses a leading zero followed by a lowercase or uppercase Latin letter \"O\" (0o or 0O).",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Bad strict arguments eval": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Bad_strict_arguments_eval",
        "title": "SyntaxError: 'arguments'/'eval' can't be defined or assigned to in strict mode code",
        "description": "The JavaScript strict mode-only exception \"'arguments' can't be defined or assigned to in strict mode code\" or \"'eval' can't be defined or assigned to in strict mode code\" occurs when attempting to create a binding called arguments or eval, or assign to such a name.\n\nIn strict mode, the names arguments and eval behave as if they are reserved words: you cannot make they refer to anything other than the arguments object in functions or the global eval function.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Arguments not allowed": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Arguments_not_allowed",
        "title": "SyntaxError: arguments is not valid in fields",
        "description": "The JavaScript exception \"SyntaxError: arguments is not valid in fields\" occurs when the arguments identifier is read in a class field initializer or in a static initialization block, outside of a non-arrow function.\n\nA class field initializer expression or a class static initialization block does not have arguments in its scope. Trying to access it is a syntax error.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Bad await": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Bad_await",
        "title": "SyntaxError: await is only valid in async functions, async generators and modules",
        "description": "The JavaScript exception \"await is only valid in async functions, async generators and modules\" occurs when an await expression is used outside of async functions or modules or other async contexts.\n\nSyntaxError.\n\nJavaScript execution is never blocking: an await can never block the execution of the program. Instead, it pauses the execution of the surrounding async task, while allowing other tasks to continue running. Therefore, await cannot be used in sync tasks, such as functions, generator functions, or top level of scripts. It is not always apparent whether the current file is a script or a module \u00e2\u0080\u0094 see the Modules guide for more information.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Invalid for-of initializer": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_for-of_initializer",
        "title": "SyntaxError: a declaration in the head of a for-of loop can't have an initializer",
        "description": "The JavaScript exception \"a declaration in the head of a for-of loop can't have an initializer\" occurs when the head of a for...of loop contains an initializer expression such as for (const i = 0 of iterable). This is not allowed in for-of loops.\n\nThe head of a for...of loop contains an initializer expression. That is, a variable is declared and assigned a value for (const i = 0 of iterable). This is not allowed in for-of loops. You might want a for loop that does allow an initializer.\n\nYou need to remove the initializer (value = 50) in the head of the for-of loop. Maybe you intended to make 50 an offset value, in that case you could add it to the loop body, for example.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Delete in strict mode": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Delete_in_strict_mode",
        "title": "SyntaxError: applying the 'delete' operator to an unqualified name is deprecated",
        "description": "The JavaScript strict mode-only exception \"applying the 'delete' operator to an unqualified name is deprecated\" occurs when variables are attempted to be deleted using the delete operator.\n\nSyntaxError in strict mode only.\n\nNormal variables in JavaScript can't be deleted using the delete operator. In strict mode, an attempt to delete a variable will throw an error and is not allowed.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "await yield in parameter": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/await_yield_in_parameter",
        "title": "SyntaxError: await/yield expression can't be used in parameter",
        "description": "The JavaScript exception \"await expression can't be used in parameter\" or \"yield expression can't be used in parameter\" occurs when the default parameter expression contains the await or yield keyword and has the effect of pausing default parameter evaluation.\n\nThe default expression must be able to evaluate synchronously. If it contains an await or yield expression, it will pause the evaluation of the default expression, which is not allowed.\n\nNote:\nThis error is only generated when await or yield are valid operators in this function context. Otherwise, await or yield would be parsed as an identifier, and either not cause an error, or cause an error like \"reserved identifier\", or \"unexpected token\" if there's an expression following it.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Regex character class escape in class range": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Regex_character_class_escape_in_class_range",
        "title": "SyntaxError: character class escape cannot be used in class range in regular expression",
        "description": "The JavaScript exception \"character class escape cannot be used in class range in regular expression\" occurs when a Unicode-aware regular expression pattern contains a character class where a boundary of a character range is another character class, such as a character class escape.\n\nA character class can specify a range of characters by using a hyphen (-) between two characters. For example, [a-z] matches any lowercase letter from a to z. The two bounds of the range must represent single characters in order for the range to make sense. If one of the bounds actually represents multiple characters, an error is generated. In non-v-mode character classes, only character class escapes are allowed inside character classes; in v-mode character classes, this can also happen if one the bounds is another [...] character class.\n\nIn Unicode-unaware mode, this syntax causes the - to become a literal character instead of generating an error, but this is a deprecated syntax and you should not rely on it.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Duplicate parameter": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Duplicate_parameter",
        "title": "SyntaxError: duplicate formal argument x",
        "description": "The JavaScript exception \"duplicate formal argument x\" or \"duplicate argument names not allowed in this context\" occurs when a function creates two or more parameter bindings with the same name, and the function is not a non-strict function with only simple parameters.\n\nHaving two formal parameters of the same name is likely a mistake\u00e2\u0080\u0094the second occurrence would cause the first occurrence to be inaccessible through the parameter name. In legacy JavaScript, this was allowed. Therefore, to not break existing code, this is only an error if the code is guaranteed to not be legacy\u00e2\u0080\u0094either because it is in strict mode or it uses modern parameter syntax (rest, default, or destructured parameters).",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Regex duplicate capture group name": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Regex_duplicate_capture_group_name",
        "title": "SyntaxError: duplicate capture group name in regular expression",
        "description": "The JavaScript exception \"duplicate capture group name in regular expression\" occurs when a regular expression pattern contains two or more named capturing groups with the same name, and these capture groups could be matched at the same time.\n\nAll named capturing groups in a regular expression pattern must have unique names. A more recent feature allows named capturing groups to share names, as long as they belong to different disjunction alternatives and cannot be matched at the same time (see browser compatibility for this). However, it is still an error if the named capturing groups with the same name could be matched at the same time, as that would make other features, such as named backreferences, ambiguous.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Bad continue": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Bad_continue",
        "title": "SyntaxError: continue must be inside loop",
        "description": "The JavaScript exception \"continue must be inside loop\" occurs when a continue statement is not inside a loop statement.\n\nSyntaxError.\n\ncontinue statements can be used to continue a loop, and using them elsewhere is a syntax error. Alternatively, you can provide a label to the continue statement to continue any loop with that label \u00e2\u0080\u0094 however, if the label does not reference a containing statement, another error SyntaxError: label not found will be thrown, and if the label references a statement that is not a loop, a syntax error is still thrown.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Cant use nullish coalescing unparenthesized": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cant_use_nullish_coalescing_unparenthesized",
        "title": "SyntaxError: cannot use `??` unparenthesized within `||` and `&&` expressions",
        "description": "The JavaScript exception \"cannot use ?? unparenthesized within || and && expressions\" occurs when an nullish coalescing operator is used with a logical OR or logical AND in the same expression without parentheses.\n\nThe operator precedence chain looks like this:\n\nHowever, the precedence between ?? and &&/|| is intentionally undefined, because the short circuiting behavior of logical operators can make the expression's evaluation counter-intuitive. Therefore, the following combinations are all syntax errors, because the language doesn't know how to parenthesize the operands:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Unnamed function statement": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Unnamed_function_statement",
        "title": "SyntaxError: function statement requires a name",
        "description": "The JavaScript exception \"function statement requires a name\" occurs\nwhen there is a function statement\nin the code that requires a name.\n\nThere is a function statement in the code that requires a name.\nYou'll need to check how functions are defined and if you need to provide a name for it, or if the function in question needs to be a function expression, an IIFE, or if the function code is placed correctly in this context at all.\n\nA function statement (or function declaration) requires a name.\nThis won't work:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Either be both static or non-static": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Either_be_both_static_or_non-static",
        "title": "SyntaxError: getter and setter for private name #x should either be both static or non-static",
        "description": "The JavaScript exception \"mismatched placement\" occurs when a private getter and setter are mismatched in whether or not they are static.\n\nPrivate getters and setters for the same name must either be both static, or both non-static. This limitation does not exist for public methods.\n\nSince foo is private, the methods must be either both static:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Invalid for-in initializer": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_for-in_initializer",
        "title": "SyntaxError: for-in loop head declarations may not have initializers",
        "description": "The JavaScript strict mode-only exception\n\"for-in loop head declarations may not have initializers\"\noccurs when the head of a for...in contains\nan initializer expression, such as for (var i = 0 in obj). This is not\nallowed in for-in loops in strict mode. In addition, lexical declarations with initializers like for (const i = 0 in obj) are not allowed outside strict mode either.\n\nSyntaxError.\n\nThe head of a for...in loop contains an initializer expression.\nThat is, a variable is declared and assigned a value for (var i = 0 in obj).\nIn non-strict mode, this head declaration is silently ignored and behaves like for (var i in obj).\nIn strict mode, however, a SyntaxError is thrown. In addition, lexical declarations with initializers like for (const i = 0 in obj) are not allowed outside strict mode either, and will always produce a SyntaxError.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Function label": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Function_label",
        "title": "SyntaxError: functions cannot be labelled",
        "description": "The JavaScript exception \"functions cannot be labelled\" occurs when a function declaration has a label before it.\n\nFunction declarations are never supposed to be labeled, because labels should only apply to statements, not declarations. There's no way to actually jump to this label. However, due to some legacy JavaScript syntax rules, the error condition is a bit more complicated than necessary:\n\nThe error message may say something along the lines of \"invalid place for a function declaration to appear\", because when the parser sees a label, it expects a statement to follow, and a function declaration is not a statement. It depends on whether the error's perspective is that a label cannot be followed by a function, or that a function cannot be preceded by a label.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Getter no arguments": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Getter_no_arguments",
        "title": "SyntaxError: getter functions must have no arguments",
        "description": "The JavaScript exception \"getter functions must have no arguments\" occurs when a getter is declared and the parameter list is non-empty.\n\nThe get property syntax looks like a function, but it is stricter and not all function syntax is allowed. A getter is always invoked with no arguments, so defining it with any parameter is likely an error.\n\nNote that this error only applies to property getters using the get syntax. If you define the getter using Object.defineProperty(), etc., the getter is defined as a normal function, although it's likely still an error if the getter expects any arguments, as it will be called without any.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "import decl module top level": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/import_decl_module_top_level",
        "title": "SyntaxError: import declarations may only appear at top level of a module",
        "description": "The JavaScript exception \"import declarations may only appear at top level of a module\" occurs when an import declaration is not at the top level of a module. This might be because the import declaration is nested in other constructs (functions, blocks, etc.), or more often because the current file is not treated as a module.\n\nYou may have an import declaration that's nested in another construct, such as a function or a block. The import declaration must be at the top level of the module. If you want to conditionally import a module, or lazily import it on demand, use dynamic import instead.\n\nIf the import is already at the top level of the code, it may be because the file is not interpreted as a module. Runtimes require external hints to determine whether a file is a module or not, and here are several ways to provide such hints:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Invalid assignment left-hand side": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_assignment_left-hand_side",
        "title": "SyntaxError: invalid assignment left-hand side",
        "description": "The JavaScript exception \"invalid assignment left-hand side\" occurs when there was an unexpected assignment somewhere. It may be triggered when a single = sign was used instead of == or ===.\n\nSyntaxError or ReferenceError, depending on the syntax.\n\nThere was an unexpected assignment somewhere. This might be due to a mismatch of an assignment operator and an equality operator, for example. While a single = sign assigns a value to a variable, the == or === operators compare a value.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Identifier after number": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Identifier_after_number",
        "title": "SyntaxError: identifier starts immediately after numeric literal",
        "description": "The JavaScript exception \"identifier starts immediately after numeric literal\" occurs\nwhen an identifier started with a digit. Identifiers can only start with a letter,\nunderscore (_), or dollar sign ($).\n\nThe names of variables, called identifiers, conform to certain rules,\nwhich your code must adhere to!\n\nA JavaScript identifier must start with a letter, underscore (_), or dollar sign ($).\nThey can't start with a digit! Only subsequent characters can be digits (0-9).",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Regex incomplete quantifier": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Regex_incomplete_quantifier",
        "title": "SyntaxError: incomplete quantifier in regular expression",
        "description": "The JavaScript exception \"incomplete quantifier in regular expression\" occurs when a regular expression pattern contains a {, but it does not start a valid quantifier.\n\nA { character in a regular expression pattern starts a quantifier. A valid quantifier is in the form {n}, {n,}, or {n,m}, where n and m are non-negative integers and m is not less than n. If the { character does not start a valid quantifier, a SyntaxError occurs.\n\nIn Unicode-unaware mode, this syntax causes the { to become a literal character instead of generating an error, but this is a deprecated syntax and you should not rely on it.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Illegal character": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Illegal_character",
        "title": "SyntaxError: illegal character",
        "description": "The JavaScript exception \"illegal character\" occurs when the lexer reads a character that's not part of a string literal, and the character cannot constitute a valid token in the language.\n\nThere is an invalid character that the interpreter doesn't understand. You should either put it in a string literal or replace it with another character. Use an editor that supports syntax highlighting and carefully check your code\nagainst mismatches like a minus sign (-) versus a dash (\u00e2\u0080\u0093)\nor simple quotes (\") versus non-standard quotation marks (\u00e2\u0080\u009c).\n\nSome characters look similar, but will cause the parser to fail interpreting your code.\nFamous examples of this are quotes, the minus or semicolon\n(greek question mark (U+37e) looks same).",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Regex invalid class set operation": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Regex_invalid_class_set_operation",
        "title": "SyntaxError: invalid class set operation in regular expression",
        "description": "The JavaScript exception \"invalid class set operation in regular expression\" occurs when a double punctuator sequence appears in a v-mode character class but it is not recognized by the syntax.\n\nThere are three possible ways this could happen:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Invalid BigInt syntax": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_BigInt_syntax",
        "title": "SyntaxError: invalid BigInt syntax",
        "description": "The JavaScript exception \"invalid BigInt syntax\" occurs when a string value is being coerced to a BigInt but it failed to be parsed as an integer.\n\nSyntaxError.\n\nWhen using the BigInt() function to convert a string to a BigInt, the string will be parsed in the same way as source code, and the resulting value must be an integer value.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Regex invalid decimal escape": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Regex_invalid_decimal_escape",
        "title": "SyntaxError: invalid decimal escape in regular expression",
        "description": "The JavaScript exception \"invalid decimal escape in regular expression\" occurs when a legacy octal escape sequence is used in a Unicode-aware regular expression pattern.\n\nIn a regular expression, \\0 followed by another digit is a legacy octal escape sequence. The same syntax is banned in template strings and strict-mode string literals. In regexes, this feature is disabled by the Unicode-aware modes (u and v). \\0 not followed by another digit is a valid escape sequence that represents the null character (U+0000).\n\n\\ followed by a non-zero digit is a backreference, and is invalid in Unicode-aware mode if it doesn't refer to a capturing group; see invalid identity escape for more information.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Regex invalid capture group name": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Regex_invalid_capture_group_name",
        "title": "SyntaxError: invalid capture group name in regular expression",
        "description": "The JavaScript exception \"invalid capture group name in regular expression\" occurs when a named capturing group or named backreference contains an invalid identifier.\n\nEach named capturing group must have a name that is a valid identifier. You cannot use arbitrary strings as the group identifier.\n\nOr you might be building the regex dynamically:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Regex invalid char in class": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Regex_invalid_char_in_class",
        "title": "SyntaxError: invalid character in class in regular expression",
        "description": "The JavaScript exception \"invalid character in class in regular expression\" occurs when a character appears in a v-mode character class but it's not allowed to appear literally.\n\nNormally, character classes can contain almost all characters literally. However, the v mode made the character class syntax more sophisticated, and in order to leave room for future syntax extensions, some syntax characters are forbidden from appearing literally in a character class. They include: (, ), [, ], {, }, /, -, |. If you want to match these literal characters, escape them; for example: /[\\|]/v.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Regex invalid property name": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Regex_invalid_property_name",
        "title": "SyntaxError: invalid property name in regular expression",
        "description": "The JavaScript exception \"invalid property name in regular expression\" or \"invalid class property name in regular expression\" occurs when the \\p and \\P Unicode character class escapes are not followed by a valid Unicode property name and/or value.\n\nIn Unicode-aware mode, the \\p and \\P escape sequences are used to match characters or character sequences based on their Unicode properties. The \\p escape sequence matches characters with the specified Unicode property, while the \\P escape sequence matches characters without the specified Unicode property. The syntax is:\n\nIf it's not followed by {, then a recognizable property name/value, then }, this syntax error is thrown. For more information on what lone properties and property names are allowed, see the Unicode character class escape reference.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Regex invalid identity escape": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Regex_invalid_identity_escape",
        "title": "SyntaxError: invalid identity escape in regular expression",
        "description": "The JavaScript exception \"invalid identity escape in regular expression\" occurs when a Unicode-aware regular expression pattern contains an escape sequence that does not represent a recognized escape sequence.\n\nIn Unicode-unaware mode, \\ could be used to escape any character, including those without a defined meaning. In these cases, the escaped character represents itself. For example, \\q would match the character q. This severely limits the ability to add new escape sequences in the future, so in Unicode-aware mode, only recognized escape sequences are allowed. Do not add \\ redundantly.\n\nThis error is also thrown when the \\x character escape is not followed by two hexadecimal digits.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Regex invalid named capture reference": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Regex_invalid_named_capture_reference",
        "title": "SyntaxError: invalid named capture reference in regular expression",
        "description": "The JavaScript exception \"invalid named capture reference in regular expression\" occurs when a regular expression pattern contains a named backreference that does not refer to a named capture group before it. The similar error message \"invalid named reference in regular expression\" is thrown when the sequence \\k is encountered but is not followed by <.\n\nYou are using the escape sequence \\k which is parsed as a named backreference, but the \\k is either syntactically invalid or does not refer to a named capture group in the pattern.\n\n\\k only starts a named backreference when the pattern contains a named capturing group or when the pattern is Unicode-aware; otherwise, it is an identity escape for the character k.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Regex invalid range in character class": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Regex_invalid_range_in_character_class",
        "title": "SyntaxError: invalid range in character class",
        "description": "The JavaScript exception \"invalid range in character class\" occurs when a character class in a regular expression uses a range, but the start of the range is greater than the end.\n\nIn character classes, you can join two characters with a hyphen - to represent an inclusive interval of characters based on their Unicode code points. For example, [a-z] matches any lowercase letter. However, if the end of the range is less than the start, the range cannot match anything and is likely a mistake.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Regex invalid group": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Regex_invalid_group",
        "title": "SyntaxError: invalid regexp group",
        "description": "The JavaScript exception \"invalid regexp group\" occurs when the sequence (? does not start a valid group syntax. Recognized group syntaxes that start with (? include:\n\n(? followed by any other character would cause this error.\n\n? is not an atom, so it does not make sense to appear at the start of a capturing group (? is a quantifier and should be placed after an atom). Maybe you want to match the ? character literally, in which case you should escape it with a backslash (\\?). Maybe you remembered the regex syntax wrong, and you intend to use one of the recognized group syntaxes listed above. Maybe you are using a feature that is not supported by the current JavaScript engine.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Missing colon after property id": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Missing_colon_after_property_id",
        "title": "SyntaxError: missing : after property id",
        "description": "The JavaScript exception \"missing : after property id\" occurs when objects are created\nusing the object initializer syntax.\nA colon (:) separates keys and values for the\nobject's properties. Somehow, this colon is missing or misplaced.\n\nWhen creating objects with the object initializer syntax,\na colon (:) separates keys and values for the object's properties.\n\nThis code fails, as the equal sign can't be used this way in this object initializer\nsyntax.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Regex invalid unicode escape": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Regex_invalid_unicode_escape",
        "title": "SyntaxError: invalid unicode escape in regular expression",
        "description": "The JavaScript exception \"invalid unicode escape in regular expression\" occurs when the \\c and \\u character escapes are not followed by valid characters.\n\nIn Unicode-aware mode mode, the \\c escape sequence must be followed by a letter from A to Z or a to z, and the \\u escape sequence must either be followed by 4 hexadecimal digits, or 1 to 6 hexadecimal digits enclosed in curly braces ({}). Furthermore, when using the \\u{xxx} escape sequence, the digits must represent a valid Unicode code point, which means its value cannot exceed 10FFFF.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Label not found": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Label_not_found",
        "title": "SyntaxError: label not found",
        "description": "The JavaScript exception \"label not found\" occurs when a break or continue statement references a label that does not exist on any statement that contains the break or continue statement.\n\nSyntaxError.\n\nIn JavaScript, labels are very limited: you can only use them with break and continue statements, and you can only jump to them from a statement contained within the labeled statement. You cannot jump to this label from anywhere in the program.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Bad regexp flag": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Bad_regexp_flag",
        "title": "SyntaxError: invalid regular expression flag \"x\"",
        "description": "The JavaScript exception \"invalid regular expression flag\" occurs when the flags in a regular expression contain any flag that is not one of: d, g, i, m, s, u, v, or y. It may also be raised if the expression contains more than one instance of a valid flag, or when the u and v flags are used together.\n\nThe regular expression contains invalid flags, or valid flags have been used more than once in the expression.\n\nThe valid (allowed) flags are d, g, i, m, s, u, v, and y. They are introduced in more detail in Regular expressions > Advanced searching with flags.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "JSON bad parse": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/JSON_bad_parse",
        "title": "SyntaxError: JSON.parse: bad parsing",
        "description": "The JavaScript exceptions thrown by JSON.parse() occur when string failed\nto be parsed as JSON.\n\nJSON.parse() parses a string as JSON. This string has to be valid JSON\nand will throw this error if incorrect syntax was encountered.\n\nBoth lines will throw a SyntaxError:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Missing curly after function body": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_function_body",
        "title": "SyntaxError: missing } after function body",
        "description": "The JavaScript exception \"missing } after function body\" occurs when there is a syntax\nmistake when creating a function somewhere. Check if any closing curly braces or\nparenthesis are in the correct order.\n\nThere is a syntax mistake when creating a function somewhere. Also check if any closing\ncurly braces or parenthesis are in the correct order. Indenting or formatting the code\na bit nicer might also help you to see through the jungle.\n\nOftentimes, there is a missing curly bracket in your function code:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Missing curly after property list": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_property_list",
        "title": "SyntaxError: missing } after property list",
        "description": "The JavaScript exception \"missing } after property list\" occurs when there is a mistake\nin the object initializer syntax somewhere.\nMight be in fact a missing curly bracket, but could also be a missing comma.\n\nThere is a mistake in the object initializer\nsyntax somewhere. Might be in fact a missing curly bracket, but could\nalso be a missing comma, for example. Also check if any closing curly braces or\nparenthesis are in the correct order. Indenting or formatting the code a bit nicer might\nalso help you to see through the jungle.\n\nOftentimes, there is a missing comma in your object initializer code:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Missing parenthesis after condition": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_condition",
        "title": "SyntaxError: missing ) after condition",
        "description": "The JavaScript exception \"missing ) after condition\" occurs when there is an error with\nhow an\nif\ncondition is written. It must appear in parenthesis after the if keyword.\n\nThere is an error with how an\nif\ncondition is written. In any programming language, code needs to make decisions and\ncarry out actions accordingly depending on different inputs. The if statement executes a\nstatement if a specified condition is truthy. In JavaScript, this condition must appear\nin parenthesis after the if keyword, like this:\n\nIt might just be an oversight, carefully check all you parenthesis in your code.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Missing bracket after list": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Missing_bracket_after_list",
        "title": "SyntaxError: missing ] after element list",
        "description": "The JavaScript exception \"missing ] after element list\" occurs when there is an error\nwith the array initializer syntax somewhere. Likely there is a closing square bracket\n(]) or a comma (,) missing.\n\nSyntaxError.\n\nThere is an error with the array initializer syntax somewhere. Likely there is a\nclosing square bracket (]) or a comma (,) missing.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Missing parenthesis after argument list": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_argument_list",
        "title": "SyntaxError: missing ) after argument list",
        "description": "The JavaScript exception \"missing ) after argument list\" occurs when there is an error\nwith how a function is called. This might be a typo, a missing operator, or an unescaped\nstring.\n\nSyntaxError.\n\nThere is an error with how a function is called. This might be a typo, a missing\noperator, or an unescaped string, for example.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Regex negated char class with strings": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Regex_negated_char_class_with_strings",
        "title": "SyntaxError: negated character class with strings in regular expression",
        "description": "The JavaScript exception \"negated character class with strings in regular expression\" occurs when a v-mode character class is negated and may be able to match a string (more than one character).\n\nIn v mode, character classes are able to match more than 1 character. For example, /[\\q{abc}]/v would match the sequence \"abc\", and /[\\p{RGI_Emoji_Flag_Sequence}]/v would match any character sequence that represents an emoji flag. However, negated character classes [^...] are not allowed to match strings, so /[^\\p{RGI_Emoji_Flag_Sequence}]/v is invalid, because it's unclear how many characters it should match. For more information, see the v-mode character class reference.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "No variable name": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/No_variable_name",
        "title": "SyntaxError: missing variable name",
        "description": "The JavaScript exception \"missing variable name\" is a common error.\nIt is usually caused by omitting a variable name or a typographic error.\n\nA variable is missing a name. The cause is most likely a typo or a forgotten variable name.\nMake sure that you've provided the name of the variable before the = sign.\n\nWhen declaring multiple variables at the same time, make sure that the previous lines/declaration does not end with a comma instead of a semicolon.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Missing initializer in const": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Missing_initializer_in_const",
        "title": "SyntaxError: missing = in const declaration",
        "description": "The JavaScript exception \"missing = in const declaration\" occurs when a const\ndeclaration was not given a value in the same statement (like\nconst RED_FLAG;). You need to provide one\n(const RED_FLAG = \"#ff0\").\n\nA constant is a value that cannot be altered by the program during normal execution. It\ncannot change through re-assignment, and it can't be redeclared. In JavaScript,\nconstants are declared using the\nconst\nkeyword. An initializer for a constant is required; that is, you must specify its value\nin the same statement in which it's declared (which makes sense, given that it can't be\nchanged later).\n\nUnlike var or let, you must specify a value for a\nconst declaration. This throws:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Missing formal parameter": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Missing_formal_parameter",
        "title": "SyntaxError: missing formal parameter",
        "description": "The JavaScript exception \"missing formal parameter\" occurs when your function\ndeclaration is missing valid parameters.\n\n\"Formal parameter\" is a fancy way of saying \"function parameter\". Your function\ndeclaration is missing valid parameters. In the declaration of a function, the\nparameters must be identifiers, not any\nvalue like numbers, strings, or objects. Declaring functions and calling functions are\ntwo separate steps. Declarations require identifier as parameters, and only when calling\n(invoking) the function, you provide the values the function should use.\n\nIn JavaScript, identifiers can contain\nonly alphanumeric characters (or \"$\" or \"_\"), and may not start with a digit. An\nidentifier differs from a string in that a string is data, while an\nidentifier is part of the code.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Missing name after dot operator": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Missing_name_after_dot_operator",
        "title": "SyntaxError: missing name after . operator",
        "description": "The JavaScript exception \"missing name after . operator\" occurs when there is a problem\nwith how the dot operator (.) is used\nfor property access.\n\nThe dot operator (.) is used for property access.\nYou will have to specify the name of the property that you want to access.\nFor computed property access, you might need to change your property access from using a\ndot to using square brackets. These will allow you to compute an expression. Maybe you\nintended to do concatenation instead? A plus operator (+) is needed in that\ncase. Please see the examples below.\n\nProperty accessors\nin JavaScript use either the dot (.) or square brackets ([]), but not both.\nSquare brackets allow computed property access.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Deprecated octal escape sequence": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Deprecated_octal_escape_sequence",
        "title": "SyntaxError: octal escape sequences can't be used in untagged template literals or in strict mode code",
        "description": "The JavaScript exception \"octal escape sequences can't be used in untagged template literals or in strict mode code\" occurs when octal escape sequences are used in strict mode string literals or untagged template literals.\n\nThe string escape sequence of the form \\ followed by any number of digits, except a single 0, is deprecated. If you want to represent a character by its code point value, you should use the \\x or \\u escape sequence instead, such as \\x01 or \\u0001 instead of \\1.\n\nUntagged template literals are never allowed to contain octal escape sequences, whether in strict mode or not. However, tagged template literals can contain any form of escape sequence, and will cause the template array received by the tag function to contain undefined.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Bad new optional": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Bad_new_optional",
        "title": "SyntaxError: new keyword cannot be used with an optional chain",
        "description": "The JavaScript exception \"new keyword cannot be used with an optional chain\" occurs when the constructor of a new expression is an optional chain, or if there's an optional chain between the constructor and the parenthesized list of arguments.\n\nThere are two ways to get this error. The first one is if the constructor expression is an optional chain expression, like this:\n\nThe second one is if ?. occurs between the constructor and the arguments list, like this:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Regex numbers out of order in quantifier": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Regex_numbers_out_of_order_in_quantifier",
        "title": "SyntaxError: numbers out of order in {} quantifier.",
        "description": "The JavaScript exception \"numbers out of order in {} quantifier\" occurs when a quantifier in a regular expression uses the {n,m} syntax but m is less than n.\n\nThe {n,m} syntax in a regular expression is used to specify that the preceding item is to be matched at least n times, but not more than m times. If m is less than n, the quantifier is nonsensical because, for example, a character cannot appear at least 2 times but not more than 1 time. Therefore, an error is thrown.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Parameter after rest parameter": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Parameter_after_rest_parameter",
        "title": "SyntaxError: parameter after rest parameter",
        "description": "The JavaScript exception \"parameter after rest parameter\" occurs when a rest parameter is followed by anything else in a parameter list, including another rest parameter, a formal parameter, or a trailing comma.\n\nA rest parameter must be the last parameter in a function definition. This is because the rest parameter collects all the remaining arguments passed to the function, so it doesn't make sense to have any parameters after it. The next non-whitespace character must be the closing parenthesis of the parameter list.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Regex nothing to repeat": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Regex_nothing_to_repeat",
        "title": "SyntaxError: nothing to repeat",
        "description": "The JavaScript exception \"nothing to repeat\" or \"invalid quantifier in regular expression\" occurs when a quantifier in a regular expression is applied to nothing or applied to an assertion.\n\nQuantifiers are used to specify how many times a character or group of characters can appear in a regular expression. For example, a{3} matches the character a exactly three times. Therefore, if the thing preceding the quantifier is not something that matches characters, the quantifier is invalid. For example: quantifiers at the start of a capturing group, at the start of a disjunction alternative, etc., cannot repeat anything. Assertions don't consume characters, so it also doesn't make sense to repeat them.\n\nIn Unicode-unaware mode, there's a deprecated syntax that allows the lookahead assertions to be quantified. This is a deprecated syntax and you should not rely on it.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Cant delete private fields": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cant_delete_private_fields",
        "title": "SyntaxError: private fields can't be deleted",
        "description": "The JavaScript exception \"SyntaxError: private fields can't be deleted\" occurs when delete is used on a private property of a class or an object.\n\nThere's code trying to delete a private property (field or method) of an object or a class. This is forbidden by JavaScript\u00e2\u0080\u0094private properties cannot be added or removed on the fly.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Undeclared private field or method": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Undeclared_private_field_or_method",
        "title": "SyntaxError: reference to undeclared private field or method #x",
        "description": "The JavaScript exception \"reference to undeclared private field or method #x\" occurs when a private name is used, but this private name is not declared in the class scope.\n\nUnlike normal string or symbol properties, which return undefined if the property does not exist, private names are very strict and can only be legally accessed if they actually exist. Accessing an undeclared private name will result in a syntax error, while accessing a private name that is declared but doesn't exist on the object will result in a type error.\n\nYou cannot access a private field that is not declared in the class scope.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Redeclared parameter": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Redeclared_parameter",
        "title": "SyntaxError: redeclaration of formal parameter \"x\"",
        "description": "The JavaScript exception \"redeclaration of formal parameter\" occurs when the same\nvariable name occurs as a function parameter and is then redeclared using a\nlet assignment in a function body again.\n\nThe same variable name occurs as a function parameter and is then redeclared using a\nlet assignment in a function body again. Redeclaring the\nsame variable within the same function or block scope using let is not\nallowed in JavaScript.\n\nIn this case, the variable \"arg\" redeclares the argument.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Regex raw bracket": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Regex_raw_bracket",
        "title": "SyntaxError: raw bracket is not allowed in regular expression with unicode flag",
        "description": "The JavaScript exception \"raw bracket is not allowed in regular expression with unicode flag\" occurs when a Unicode-aware regular expression pattern contains a raw bracket ({, }, ]) that is not part of a quantifier or character class.\n\nIn Unicode-unaware mode, {, }, and ] that are not part of a quantifier or character class are treated as literal characters. This may hide errors in your code and is therefore deprecated and disallowed in Unicode-aware mode. You should either check whether you have invalid syntax or you should escape the characters to match them literally.\n\nIf { appears in a context that accepts a quantifier, it is treated as the start of a quantifier. If what follows it is not a valid quantifier, another syntax error, incomplete quantifier, is thrown.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Duplicate proto": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Duplicate_proto",
        "title": "SyntaxError: property name __proto__ appears more than once in object literal",
        "description": "The JavaScript exception \"property name __proto__ appears more than once in object literal\" occurs when an object literal contains multiple occurrences of the __proto__ field, which is used to set the prototype of this new object.\n\nThe __proto__ key, unlike other property keys, is a special syntax in an object literal. It is used to set the prototype of the object being created and is not allowed to appear more than once in an object literal. Note that this restriction only applies to the __proto__ prototype setter syntax: if it actually has the effect of creating a property called __proto__, then it can appear multiple times. See prototype setter for the exact syntax restrictions.\n\nWorth noting that the __proto__ key in object literals is a special syntax and is not deprecated, unlike the Object.prototype.__proto__ accessor property.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Bad super call": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Bad_super_call",
        "title": "SyntaxError: super() is only valid in derived class constructors",
        "description": "The JavaScript exception \"super() is only valid in derived class constructors\" occurs when the super() call is used somewhere that's not the body of a constructor in a class with extends keyword.\n\nThe super() call is used to invoke the base constructor of a derived class, so the base class can initialize the this object. Using it anywhere else doesn't make sense.\n\nsuper() can also be defined in an arrow function that's nested within the constructor. However, it cannot be defined in any other kind of function.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "String literal EOL": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/String_literal_EOL",
        "title": "SyntaxError: string literal contains an unescaped line break",
        "description": "The JavaScript error \"string literal contains an unescaped line break\" occurs when there is an unterminated\nstring literal somewhere. String literals must be enclosed by single\n(') or double (\") quotes and cannot split across multiple lines.\n\nThere is an unterminated\nstring literal somewhere. String literals must be\nenclosed by single (') or double (\") quotes. JavaScript makes\nno distinction between single-quoted strings and double-quoted strings.\nEscape sequences work\nin strings created with either single or double quotes.\nTo fix this error, check if:\n\nYou can't split a string across multiple lines like this in JavaScript:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Rest with default": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Rest_with_default",
        "title": "SyntaxError: rest parameter may not have a default",
        "description": "The JavaScript exception \"rest parameter may not have a default\" occurs when a rest parameter has a default value. Because the rest parameter always creates an array, the default value would never apply.\n\nA default parameter gives a parameter a default value if the argument is not passed or passed as undefined. A rest parameter collects all the remaining arguments passed to the function and always creates an array. Therefore, it doesn't make sense to have a default value for a rest parameter.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Setter one argument": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Setter_one_argument",
        "title": "SyntaxError: setter functions must have one argument",
        "description": "The JavaScript exception \"setter functions must have one argument\" occurs when a setter is declared and the parameter list is not consisted of exactly one formal parameter.\n\nThe set property syntax looks like a function, but it is stricter and not all function syntax is allowed. A setter is always invoked with exactly one argument, so defining it with any other number of parameters is likely an error. This parameter can be destructured or have a default value, but it cannot be a rest parameter.\n\nNote that this error only applies to property setters using the set syntax. If you define the setter using Object.defineProperty(), etc., the setter is defined as a normal function, although it's likely still an error if the setter expects any other number of arguments, as it will be called with exactly one.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Bad return": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Bad_return",
        "title": "SyntaxError: return not in function",
        "description": "The JavaScript exception \"return not in function\" occurs when a return statement is called outside of a function.\n\nSyntaxError.\n\nA return statement is called outside of a function. Maybe there are missing curly braces somewhere? The return statement must be in a function, because it ends function execution and specifies a value to be returned to the function caller.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Bad optional template": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Bad_optional_template",
        "title": "SyntaxError: tagged template cannot be used with optional chain",
        "description": "The JavaScript exception \"tagged template cannot be used with optional chain\" occurs when the tag expression of a tagged template literal is an optional chain, or if there's an optional chain between the tag and the template.\n\nThere are two ways to get this error. The first one is if the tag expression is an optional chain expression, like this:\n\nThe second one is if ?. occurs between the tag and the template, like this:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Unexpected token": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Unexpected_token",
        "title": "SyntaxError: Unexpected token",
        "description": "The JavaScript exceptions \"unexpected token\" occur when the parser does not see a token it recognizes at the given position, so it cannot make sense of the structure of the program. This might be a simple typo.\n\nA specific language construct was expected, but something else was provided. This might\nbe a simple typo.\n\nFor example, when chaining expressions, trailing commas are not allowed.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Unparenthesized unary expr lhs exponentiation": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Unparenthesized_unary_expr_lhs_exponentiation",
        "title": "SyntaxError: unparenthesized unary expression can't appear on the left-hand side of '**'",
        "description": "The JavaScript exception \"unparenthesized unary expression can't appear on the left-hand side of '**'\" occurs when a unary operator (one of typeof, void, delete, await, !, ~, +, -) is used on the left operand of the exponentiation operator without parentheses.\n\nYou likely wrote something like this:\n\nWhether it should be evaluated as (-a) ** b or -(a ** b) is ambiguous. In mathematics, -x2 means -(x ** 2) \u00e2\u0080\u0094 and that's how many languages, including Python, Haskell, and PHP, handle it. But making the unary minus operator take precedence over ** breaks symmetry with a ** -b, which is unambiguously a ** (-b). Therefore, the language forbids this syntax and requires you to parenthesize either side to resolve the ambiguity.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Hash outside class": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Hash_outside_class",
        "title": "SyntaxError: Unexpected '#' used outside of class body",
        "description": "The JavaScript exception \"Unexpected '#' used outside of class body\" occurs when a hash\n(\"#\") is encountered in an unexpected context, most notably\noutside of a class declaration.\nHashes are valid at the beginning of a file as a hashbang comment,\nor inside of a class as part of a private field. You may encounter this error if you forget\nthe quotation marks when trying to access a DOM identifier as well.\n\nWe encountered a # somewhere unexpected. This may be due to code moving around and no\nlonger being part of a class, a hashbang comment found on a line other than the first\nline of a file, or accidentally forgetting the quotation marks around a DOM identifier.\n\nFor each case, there might be something slightly wrong. For example",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Bad break": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Bad_break",
        "title": "SyntaxError: unlabeled break must be inside loop or switch",
        "description": "The JavaScript exception \"unlabeled break must be inside loop or switch\" occurs when a break statement is not inside a loop or a switch statement.\n\nSyntaxError.\n\nbreak statements can be used to exit a loop or a switch statement, and using them elsewhere is a syntax error. Alternatively, you can provide a label to the break statement to break out of any statement with that label \u00e2\u0080\u0094 however, if the label does not reference a containing statement, another error SyntaxError: label not found will be thrown.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Deprecated caller or arguments usage": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Deprecated_caller_or_arguments_usage",
        "title": "TypeError: 'caller', 'callee', and 'arguments' properties may not be accessed",
        "description": "The JavaScript strict mode-only exception\n\"'caller', 'callee', and 'arguments' properties may not be accessed on strict mode functions or the arguments objects for calls to them\" occurs when the\ndeprecated arguments.callee, Function.prototype.caller, or Function.prototype.arguments properties\nare used.\n\nTypeError in strict mode only.\n\nIn strict mode, the arguments.callee,\nFunction.prototype.caller, or Function.prototype.arguments properties are used\nand shouldn't be. They are deprecated, because they leak the function caller, are\nnon-standard, hard to optimize and potentially a performance-harmful feature.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "is not iterable": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/is_not_iterable",
        "title": "TypeError: 'x' is not iterable",
        "description": "The JavaScript exception \"is not iterable\" occurs when the value which is spread into an array or function call, given as the\nright-hand side of for...of,\nas argument of a function such as Promise.all or Set(),\nor as the right-hand side of an array destructuring,\nis not an iterable object. This error is also encountered when Array.fromAsync() or for await...of is used with a non-async iterable.\n\nThe value which is spread into an array or function call, given as the right-hand side of for...of,\nor as argument of a function such as Promise.all or Set(),\nor as the source of an array destructuring pattern,\nis not an iterable object.\nAn iterable can be a built-in iterable type such as\nArray, String or Map, a generator result, or\nan object implementing the iterable protocol.\n\nThe non-iterable might turn to be undefined in some runtime environments.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Unexpected type": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Unexpected_type",
        "title": "TypeError: \"x\" is (not) \"y\"",
        "description": "The JavaScript exception \"x is (not) y\" occurs when there was an\nunexpected type. Oftentimes, unexpected undefined or null\nvalues.\n\nTypeError.\n\nThere was an unexpected type. This occurs oftentimes with undefined or\nnull values.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Bad super prop": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Bad_super_prop",
        "title": "SyntaxError: use of super property/member accesses only valid within methods or eval code within methods",
        "description": "The JavaScript exception \"use of super property/member accesses only valid within methods or eval code within methods\" occurs when the super.x or super[x] syntax is used outside of a method.\n\nThe super.x syntax is used to access properties on the prototype of the current object. It can be used in methods of both object literals and classes, field initializers, and static initialization blocks, but not in other contexts.\n\nYou can't use super.x outside of a method in an object:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Deprecated source map pragma": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Deprecated_source_map_pragma",
        "title": "SyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead",
        "description": "The JavaScript warning \"Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead\" occurs when there is a deprecated source map syntax in a JavaScript source.\n\nA warning that a SyntaxError occurred. JavaScript execution won't be halted.\n\nThere is a deprecated source map syntax in a JavaScript source.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "No non-null object": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/No_non-null_object",
        "title": "TypeError: \"x\" is not a non-null object",
        "description": "The JavaScript exception \"is not a non-null object\" occurs when an object is expected\nsomewhere and wasn't provided. null is not an object and won't work.\n\nAn object is expected somewhere and wasn't provided. null is not an\nobject and won't work. You must provide a proper object in the given situation.\n\nWhen methods like Object.create() or\nObject.defineProperty() and Object.defineProperties() are\nused, the optional descriptor parameter expects a property descriptor object. Providing\nno object (like just a number), will throw an error:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Not a constructor": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Not_a_constructor",
        "title": "TypeError: \"x\" is not a constructor",
        "description": "The JavaScript exception \"is not a constructor\" occurs when there was an attempt to use\nan object or a variable as a constructor, but that object or variable is not a\nconstructor.\n\nThere was an attempt to use an object or a variable as a constructor, but that object\nor variable is not a constructor. See constructor\nor the new operator\nfor more information on what a constructor is.\n\nThere are many global objects, like String or Array, which\nare constructable using new. However, some global objects are not and their\nproperties and methods are static. The following JavaScript standard built-in objects\nare not a constructor: Math, JSON, Symbol,\nReflect, Intl, Atomics.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Read-only": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Read-only",
        "title": "TypeError: \"x\" is read-only",
        "description": "The JavaScript strict mode-only exception\n\"is read-only\" occurs when a global variable or object\nproperty that was assigned to is a read-only property.\n\nTypeError in strict mode only.\n\nThe global variable or object property that was assigned to is a read-only property.\n(Technically, it is a non-writable data property.)",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Already executing generator": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Already_executing_generator",
        "title": "TypeError: already executing generator",
        "description": "The JavaScript exception \"TypeError: already executing generator\" occurs when a generator is continued using one of its methods (such as next()) while executing the generator function's body itself.\n\nThe generator's methods, next(), return(), and throw(), are meant to continue the execution of a generator function when it's paused after a yield expression or before the first statement. If a call to one of these methods is made while executing the generator function, the error is thrown. If you want to return or throw within the generator function, use the return statement or the throw statement, respectively.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Not a function": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Not_a_function",
        "title": "TypeError: \"x\" is not a function",
        "description": "The JavaScript exception \"is not a function\" occurs when there was an attempt to call a\nvalue from a function, but the value is not actually a function.\n\nIt attempted to call a value from a function, but the value is not actually a function.\nSome code expects you to provide a function, but that didn't happen.\n\nMaybe there is a typo in the function name? Maybe the object you are calling the method\non does not have this function? For example, JavaScript Objects have no\nmap function, but the JavaScript Array object does.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Cant assign to property": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cant_assign_to_property",
        "title": "TypeError: can't assign to property \"x\" on \"y\": not an object",
        "description": "The JavaScript strict mode exception \"can't assign to property\" occurs when attempting\nto create a property on primitive value\nsuch as a symbol, a string, a number or a boolean. Primitive values cannot hold any property.\n\nTypeError.\n\nIn strict mode, a TypeError is raised when attempting to\ncreate a property on primitive value such\nas a symbol, a string, a number or a boolean. Primitive values cannot hold any property.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Cant convert BigInt to number": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cant_convert_BigInt_to_number",
        "title": "TypeError: can't convert BigInt to number",
        "description": "The JavaScript exception \"can't convert BigInt to number\" occurs when an arithmetic operation involves a mix of BigInt and Number values.\n\nTypeError.\n\nThe two sides of an arithmetic operator must both be BigInts or both not. If an operation involves a mix of BigInts and numbers, it's ambiguous whether the result should be a BigInt or number, since there may be loss of precision in both cases.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Builtin ctor no new": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Builtin_ctor_no_new",
        "title": "TypeError: calling a builtin X constructor without new is forbidden",
        "description": "The JavaScript exception \"calling a builtin X constructor without new is forbidden\" occurs when you try to call a builtin constructor without using the new keyword. All modern constructors, such as Promise and Map, must be called with new.\n\nIn JavaScript, calling a function without new and constructing a function with new are two distinct operations, and functions can behave differently depending on how they are called.\n\nApart from the following legacy constructors, all modern constructors must be called with new:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Get set missing private": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Get_set_missing_private",
        "title": "TypeError: can't access/set private field or method: object is not the right class",
        "description": "The JavaScript exception \"can't access private field or method: object is not the right class\" or \"can't set private field: object is not the right class\" occurs when a private field or method is get or set on an object that does not have this private property defined.\n\nYou are trying to get or set a private field or method on an object, but that object does not contain this private property. Private instance properties can only be accessed on instances of the class (including its subclasses) that declares them; private static properties can only be accessed on the class itself that declares them, and not on subclasses.\n\nThis error occurs when the private name exists in the class scope but the object it's accessed on is invalid, If the private name does not exist, you will get a syntax error instead.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "BigInt not serializable": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/BigInt_not_serializable",
        "title": "TypeError: BigInt value can't be serialized in JSON",
        "description": "The JavaScript exception \"BigInt value can't be serialized in JSON\" occurs when a BigInt is encountered in JSON.stringify with no custom serialization method provided.\n\nYou are trying to serialize a BigInt value using JSON.stringify, which does not support BigInt values by default.Sometimes, JSON stringification happens implicitly in libraries, as part of data serialization. For example, sending data to the server, storing it in external storage, or transferring it between threads would all require serialization, which is often done using JSON.\n\nThere are several ways to handle this:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Cant convert x to BigInt": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cant_convert_x_to_BigInt",
        "title": "TypeError: can't convert x to BigInt",
        "description": "The JavaScript exception \"x can't be converted to BigInt\" occurs when attempting to convert a Symbol, null, or undefined value to a BigInt, or if an operation expecting a BigInt parameter receives a number.\n\nTypeError.\n\nWhen using the BigInt() function to convert a value to a BigInt, the value would first be converted to a primitive. Then, if it's not one of BigInt, string, number, and boolean, the error is thrown.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Cant define property object not extensible": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cant_define_property_object_not_extensible",
        "title": "TypeError: can't define property \"x\": \"obj\" is not extensible",
        "description": "The JavaScript exception \"can't define property \"x\": \"obj\" is not extensible\" occurs\nwhen Object.preventExtensions() marked an object as no longer extensible,\nso that it will never have properties beyond the ones it had at the time it was marked\nas non-extensible.\n\nUsually, an object is extensible and new properties can be added to it. However, in\nthis case Object.preventExtensions() marked an object as no longer\nextensible, so that it will never have properties beyond the ones it had at the time it\nwas marked as non-extensible.\n\nIn strict mode,\nattempting to add new properties to a non-extensible object throws a\nTypeError. In sloppy mode, the addition of the \"x\" property is silently\nignored.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Cant set prototype": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cant_set_prototype",
        "title": "TypeError: can't set prototype of this object",
        "description": "The JavaScript exception \"can't set prototype of this object\" occurs when attempting to set the prototype of an object, but the object's prototype is frozen, either by being a built-in immutable prototype object, or by being non-extensible.\n\nYou are using one of the prototype-mutating methods\u00e2\u0080\u0094most notably, Object.setPrototypeOf()\u00e2\u0080\u0094on an object whose prototype is immutable. Some built-in objects have immutable prototypes, such as Object.prototype and window, for security reasons. User objects can also prevent prototype changes by using Object.preventExtensions(), Object.seal(), or Object.freeze().\n\nA selected few built-in objects have immutable prototypes. For example, you cannot change the prototype of Object.prototype:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Non configurable array element": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Non_configurable_array_element",
        "title": "TypeError: can't delete non-configurable array element",
        "description": "The JavaScript exception \"can't delete non-configurable array element\" occurs when it\nwas attempted to shorten the length\nof an array, but one of the array's elements is non-configurable.\n\nIt was attempted to shorten the length\nof an array, but one of the array's elements is non-configurable.\nWhen shortening an array, the elements beyond the new array length will be deleted,\nwhich failed in this situation.\n\nThe configurable attribute controls whether the property can be deleted\nfrom the object and whether its attributes (other than writable) can be\nchanged.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Cant redefine property": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cant_redefine_property",
        "title": "TypeError: can't redefine non-configurable property \"x\"",
        "description": "The JavaScript exception \"can't redefine non-configurable property\" occurs when it was\nattempted to redefine a property, but that property is non-configurable.\n\nIt was attempted to redefine a property, but that property is non-configurable. The\nconfigurable attribute controls whether the property can be deleted from\nthe object and whether its attributes (other than writable) can be changed.\nUsually, properties in an object created by an\nobject initializer are configurable. However, for example, when using\nObject.defineProperty(), the property isn't configurable by default.\n\nThe Object.defineProperty() creates non-configurable properties if you\nhaven't specified them as configurable.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Class ctor no new": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Class_ctor_no_new",
        "title": "TypeError: class constructors must be invoked with 'new'",
        "description": "The JavaScript exception \"class constructors must be invoked with 'new'\" occurs when a class constructor is called without the new keyword. All class constructors must be called with new.\n\nIn JavaScript, calling a function without new and constructing a function with new are two distinct operations, and functions can behave differently depending on how they are called.\n\nTraditionally, JavaScript functions have been used as both constructors and normal functions, and can detect how they were called using new.target. However, class constructors are always constructors and cannot be called as normal functions.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "in operator no object": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/in_operator_no_object",
        "title": "TypeError: cannot use 'in' operator to search for 'x' in 'y'",
        "description": "The JavaScript exception \"right-hand side of 'in' should be an object\" occurs when the\nin operator\nwas used to search in strings, or in numbers, or other primitive types. It can only be\nused to check if a property is in an object.\n\nThe in operator can only be used\nto check if a property is in an object.\nYou can't search in strings, or in numbers, or other primitive types.\n\nUnlike in other programming languages (e.g., Python), you can't search in strings using\nthe in operator.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Invalid derived return": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_derived_return",
        "title": "TypeError: derived class constructor returned invalid value x",
        "description": "The JavaScript exception \"derived class constructor returned invalid value x\" occurs when a derived class constructor returns a value that is not an object or undefined.\n\nTypically, a constructor does not need to return anything\u00e2\u0080\u0094the value of this is automatically returned when the class is constructed. A constructor can also return an object, and this object will override this as the newly constructed instance. However, returning something that's neither an object nor undefined is usually a mistake, because that value is ignored. In base classes and function constructors (using the function syntax), returning such a value is silently ignored, while in derived classes, it throws an error.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Cyclic object value": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cyclic_object_value",
        "title": "TypeError: cyclic object value",
        "description": "The JavaScript exception \"cyclic object value\" occurs when object references were found\nin JSON. JSON.stringify() doesn't try\nto solve them and fails accordingly.\n\nThe JSON format per se doesn't support object\nreferences (although an IETF draft exists),\nhence JSON.stringify() doesn't try to solve them and fails accordingly.\n\nIn a circular structure like the following:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Cyclic prototype": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cyclic_prototype",
        "title": "TypeError: can't set prototype: it would cause a prototype chain cycle",
        "description": "The JavaScript exception \"TypeError: can't set prototype: it would cause a prototype chain cycle\" occurs when an object's prototype is set to an object such that the prototype chain becomes circular (a and b both have each other in their prototype chains).\n\nA loop, also called a cycle, was introduced in a prototype chain. That means that when walking this prototype chain, the same place would be accessed over and over again, instead of eventually reaching null.\n\nThis error is thrown at the time of setting the prototype. In an operation like Object.setPrototypeOf(a, b), if a already exists in the prototype chain of b, this error will be thrown.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Array sort argument": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Array_sort_argument",
        "title": "TypeError: invalid Array.prototype.sort argument",
        "description": "The JavaScript exception \"invalid Array.prototype.sort argument\" occurs when the argument of Array.prototype.sort() (and its related methods: Array.prototype.toSorted(), TypedArray.prototype.sort(), TypedArray.prototype.toSorted()) isn't either undefined or a function which compares its operands.\n\nThe argument of Array.prototype.sort() (and its related methods: Array.prototype.toSorted(), TypedArray.prototype.sort(), TypedArray.prototype.toSorted()) is expected to be either undefined or a function which compares its operands.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Private double initialization": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Private_double_initialization",
        "title": "TypeError: Initializing an object twice is an error with private fields/methods",
        "description": "The JavaScript exception \"Initializing an object twice is an error with private fields/methods\" occurs when an object that was created via a class constructor goes through the class construction again, and the class contains a private property. This is usually caused by the return override trick.\n\nFor any object, if it already contains a private field or method, it would be an error to install the same field again. Private properties are installed on the value of this when the class constructor is called, so this error could happen if the this value is an already-constructed instance of this class.\n\nUsually, this in a constructor is a newly created object which doesn't have any preexisting properties. However, it can be overridden by the return value of the base class. If the base class returns another object, that object would replace the current object as the value of this:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Invalid const assignment": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_const_assignment",
        "title": "TypeError: invalid assignment to const \"x\"",
        "description": "The JavaScript exception \"invalid assignment to const\" occurs when it was attempted to\nalter a constant value. JavaScript\nconst\ndeclarations can't be re-assigned or redeclared.\n\nA constant is a value that cannot be altered by the program during normal execution. It\ncannot change through re-assignment, and it can't be redeclared. In JavaScript,\nconstants are declared using the\nconst\nkeyword.\n\nAssigning a value to the same constant name in the same block-scope will throw.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "invalid right hand side instanceof operand": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/invalid_right_hand_side_instanceof_operand",
        "title": "TypeError: invalid 'instanceof' operand 'x'",
        "description": "The JavaScript exception \"invalid 'instanceof' operand\" occurs when the right-hand side\noperands of the instanceof operator\nisn't used with a constructor object, i.e., an object which has a prototype property and is callable.\n\nThe instanceof operator expects\nthe right-hand-side operands to be a constructor object,\ni.e., an object which has a prototype property and is callable. It can also be an object with a Symbol.hasInstance method. This error can occur if:\n\nTo fix these errors, you will either need to replace\nthe instanceof operator\nwith the typeof operator,\nor to make sure you use the function name, instead of the result of its evaluation.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Private setter only": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Private_setter_only",
        "title": "TypeError: getting private setter-only property",
        "description": "The JavaScript exception \"getting private setter-only property\" occurs when reading the value of a private property for which only a setter is defined.\n\nThere is an attempt to get the value of a private property for which only a setter is specified. Unlike normal objects, where an undefined getter just means the property would always return undefined, for private properties, this is an error.\n\nHere, #name has no getter, so trying to read it using this.#name will throw an error.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "No properties": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/No_properties",
        "title": "TypeError: null/undefined has no properties",
        "description": "The JavaScript exception \"null (or undefined) has no properties\" occurs when you\nattempt to access properties of null and undefined. They\ndon't have any.\n\nTypeError.\n\nBoth null and undefined have no properties you could access. Therefore, you cannot use property accessors on them, or destructure them.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Constructor cant be used directly": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Constructor_cant_be_used_directly",
        "title": "TypeError: Iterator/AsyncIterator constructor can't be used directly",
        "description": "The JavaScript exception \"Iterator constructor can't be used directly\" or \"AsyncIterator constructor can't be used directly\" occurs when you try to use the Iterator() or AsyncIterator() constructors directly to create instances. These constructors are abstract classes and should only be inherited from.\n\nThe Iterator and AsyncIterator constructors are abstract classes and should not be used directly. They check the value of new.target and throw if it is the same as the constructor itself. The only way to use these constructors is to inherit from them in a subclass and call super() in the subclass constructor. The subclass must also define a next() method to be useful.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Cant delete": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cant_delete",
        "title": "TypeError: property \"x\" is non-configurable and can't be deleted",
        "description": "The JavaScript exception \"property is non-configurable and can't be deleted\" occurs\nwhen it was attempted to delete a property, but that property is non-configurable.\n\nTypeError in strict mode only.\n\nIt was attempted to delete a property, but that property is non-configurable. The\nconfigurable attribute controls whether the property can be deleted from\nthe object and whether its attributes (other than writable) can be changed.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "More arguments needed": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/More_arguments_needed",
        "title": "TypeError: More arguments needed",
        "description": "The JavaScript exception \"more arguments needed\" occurs when there is an error with how\na function is called. More arguments need to be provided.\n\nTypeError.\n\nThere is an error with how a function is called. More arguments need to be provided.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Requires global RegExp": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Requires_global_RegExp",
        "title": "TypeError: matchAll/replaceAll must be called with a global RegExp",
        "description": "The JavaScript exception \"TypeError: matchAll/replaceAll must be called with a global RegExp\" occurs when the String.prototype.matchAll() or String.prototype.replaceAll() method is used with a RegExp object that does not have the global flag set.\n\nThe String.prototype.matchAll() and String.prototype.replaceAll() methods require a RegExp object with the global flag set. This flag indicates that the regular expression can match all locations of the input string, instead of stopping at the first match. Although the g flag is redundant when using these methods (because these methods always do a global replacement), they are still required to make the intention clear.\n\nIt's worth noting that the g flag validation is done in the matchAll and replaceAll methods. If you use the [Symbol.matchAll]() method of RegExp instead, you won't get this error, but there will only be a single match.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Key not weakly held": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Key_not_weakly_held",
        "title": "TypeError: WeakSet key/WeakMap value 'x' must be an object or an unregistered symbol",
        "description": "The JavaScript exception \"WeakSet key (or WeakMap value) 'x' must be an object or an unregistered symbol\" occurs when an value of invalid type is used as a key in a WeakSet or as a value in a WeakMap.\n\nWeakSet and WeakMap require the keys to be garbage collectable. Only objects and non-registered symbols (that is, symbols not returned by Symbol.for()) are valid. For more information, see Memory management. If you want to add keys that are strings, numbers, or other primitive values, you should store them in a regular Set or Map instead.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Reduce of empty array with no initial value": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Reduce_of_empty_array_with_no_initial_value",
        "title": "TypeError: Reduce of empty array with no initial value",
        "description": "The JavaScript exception \"reduce of empty array with no initial value\" occurs when a\nreduce function is used.\n\nIn JavaScript, there are several reduce functions:\n\nThese functions optionally take an initialValue (which will be used as the\nfirst argument to the first call of the callback). However, if no initial\nvalue is provided, it will use the first element of the Array or\nTypedArray as the initial value. This error is raised when an empty array\nis provided because no initial value can be returned in that case.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Getter only": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Getter_only",
        "title": "TypeError: setting getter-only property \"x\"",
        "description": "The JavaScript strict mode-only exception \"setting getter-only property\" occurs when there is an attempt to set a new value to a property for which only a getter is specified, or when setting a private property that similarly only has a getter defined.\n\nTypeError in strict mode only.\n\nThere is an attempt to set a new value to a property for which only a getter is specified.\nWhile this will be silently ignored in non-strict mode, it will throw a\nTypeError in strict mode. Classes are always in strict mode, so assigning to a getter-only private property always throws this error.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Malformed URI": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Malformed_URI",
        "title": "URIError: malformed URI sequence",
        "description": "The JavaScript exception \"malformed URI sequence\" occurs when URI encoding or decoding\nwasn't successful.\n\nURI encoding or decoding wasn't successful. An argument given to either the\ndecodeURI, encodeURI, encodeURIComponent, or\ndecodeURIComponent function was not valid, so that the function was unable\nencode or decode properly.\n\nEncoding replaces each instance of certain characters by one, two, three, or four\nescape sequences representing the UTF-8 encoding of the character. An\nURIError will be thrown if there is an attempt to encode a surrogate which\nis not part of a high-low pair, for example:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Called on incompatible type": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Called_on_incompatible_type",
        "title": "TypeError: X.prototype.y called on incompatible type",
        "description": "The JavaScript exception \"called on incompatible target (or object)\" occurs when a\nfunction (on a given object), is called with a this not corresponding to\nthe type expected by the function.\n\nWhen this error is thrown, a function (on a given object), is called with a\nthis not corresponding to the type expected by the function.\n\nThis issue can arise when using the Function.prototype.call() or\nFunction.prototype.apply() methods, and providing a this\nargument which does not have the expected type.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Stmt after return": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Stmt_after_return",
        "title": "Warning: unreachable code after return statement",
        "description": "The JavaScript warning \"unreachable code after return statement\" occurs when using an\nexpression after a return statement, or when using a\nsemicolon-less return statement but including an expression directly after.\n\nWarning\n\nUnreachable code after a return statement might occur in these situations:",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      },
      "Already has pragma": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Already_has_pragma",
        "title": "Warning: -file- is being assigned a //# sourceMappingURL, but already has one",
        "description": "The JavaScript warning \"-file- is being assigned a //# sourceMappingURL, but already has one.\" occurs when a source map has been specified more than once for a given JavaScript source.\n\nA warning. JavaScript execution won't be halted.\n\nA source map has been specified more than once for a given JavaScript source.",
        "syntax": [],
        "parameters": [],
        "return_value": "",
        "examples": [],
        "browser_compatibility": {},
        "see_also": [],
        "inheritance": [],
        "properties": [],
        "methods": [],
        "children": []
      }
    },
    "JavaScript technologies overview": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/JavaScript_technologies_overview#javascript_the_core_language_ecmascript",
      "title": "JavaScript technologies overview",
      "description": "Whereas HTML defines a webpage's structure and content and CSS sets the formatting and appearance, JavaScript adds interactivity to a webpage and creates rich web applications.\n\nHowever, the umbrella term \"JavaScript\" as understood in a web browser context contains several very different elements. One of them is the core language (ECMAScript), another is the collection of the Web APIs, including the DOM (Document Object Model).\n\nThe core language of JavaScript is standardized by the ECMA TC39 committee as a language named ECMAScript. \"ECMAScript\" is the term for the language standard, but \"ECMAScript\" and \"JavaScript\" can be used interchangeably.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Execution model": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Execution_model#run-to-completion",
      "title": "JavaScript execution model",
      "description": "This page introduces the basic infrastructure of the JavaScript runtime environment. The model is largely theoretical and abstract, without any platform-specific or implementation-specific details. Modern JavaScript engines heavily optimize the described semantics.\n\nThis page is a reference. It assumes you are already familiar with the execution model of other programming languages, such as C and Java. It makes heavy references to existing concepts in operating systems and programming languages.\n\nJavaScript execution requires the cooperation of two pieces of software: the JavaScript engine and the host environment.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Lexical grammar": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#octal",
      "title": "Lexical grammar",
      "description": "This page describes JavaScript's lexical grammar. JavaScript source text is just a sequence of characters \u00e2\u0080\u0094 in order for the interpreter to understand it, the string has to be parsed to a more structured representation. The initial step of parsing is called lexical analysis, in which the text gets scanned from left to right and is converted into a sequence of individual, atomic input elements. Some input elements are insignificant to the interpreter, and will be stripped after this step \u00e2\u0080\u0094 they include white space and comments. The others, including identifiers, keywords, literals, and punctuators (mostly operators), will be used for further syntax analysis. Line terminators and multiline comments are also syntactically insignificant, but they guide the process for automatic semicolons insertion to make certain invalid token sequences become valid.\n\nFormat-control characters have no visual representation but are used to control the interpretation of the text.\n\nIn JavaScript source text, <ZWNJ> and <ZWJ> are treated as identifier parts, while <BOM> (also called a zero-width no-break space <ZWNBSP> when not at the start of text) is treated as white space.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Iteration protocols": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol",
      "title": "Iteration protocols",
      "description": "Iteration protocols aren't new built-ins or syntax, but protocols. These protocols can be implemented by any object by following some conventions.\n\nThere are two protocols: The iterable protocol and the iterator protocol.\n\nThe iterable protocol allows JavaScript objects to define or customize their iteration behavior, such as what values are looped over in a for...of construct. Some built-in types are built-in iterables with a default iteration behavior, such as Array or Map, while other types (such as Object) are not.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Strict mode": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode#making_eval_and_arguments_simpler",
      "title": "Strict mode",
      "description": "Note:\nSometimes you'll see the default, non-strict mode referred to as sloppy mode. This isn't an official term, but be aware of it, just in case.\n\nJavaScript's strict mode is a way to opt in to a restricted variant of JavaScript, thereby implicitly opting-out of \"sloppy mode\". Strict mode isn't just a subset: it intentionally has different semantics from normal code. Strict mode code and non-strict mode code can coexist, so scripts can opt into strict mode incrementally.\n\nStrict mode makes several changes to normal JavaScript semantics:",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Deprecated and obsolete features": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features#escape_sequences",
      "title": "Deprecated and obsolete features",
      "description": "This page lists features of JavaScript that are deprecated (that is, still available but planned for removal) and obsolete (that is, no longer usable).\n\nThese deprecated features can still be used, but should be used with caution because they are not required to be implemented by every JavaScript engine. You should work to remove their use from your code.\n\nSome of these deprecated features are listed in the Annex B section of the ECMAScript specification. This section is described as normative optional \u00e2\u0080\u0094 that is, web browser hosts must implement these features, while non-web hosts may not. These features are likely stable because removing them will cause backward compatibility issues and break legacy websites. (JavaScript has the design goal of \"don't break the web\".) Still, they are not cross-platform portable and may not be supported by all analysis tools, so you are advised to not use them, as the introduction of Annex B states:",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Template literals": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#tagged_templates",
      "title": "Template literals (Template strings)",
      "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since September 2015.\n\nTemplate literals are literals delimited with backtick (`) characters, allowing for multi-line strings, string interpolation with embedded expressions, and special constructs called tagged templates.\n\nTemplate literals are sometimes informally called template strings, because they are used most commonly for string interpolation (to create strings by doing substitution of placeholders). However, a tagged template literal may not result in a string; it can be used with a custom tag function to perform whatever operations you want on the different parts of the template literal.",
      "syntax": [],
      "parameters": [
        {
          "name": "string text",
          "description": "The string text that will become part of the template literal. Almost all characters are allowed literally, including line breaks and other whitespace characters. However, invalid escape sequences will cause a syntax error, unless a tag function is used."
        },
        {
          "name": "expression",
          "description": "An expression to be inserted in the current position, whose value is converted to a string or passed to tagFunction."
        },
        {
          "name": "tagFunction",
          "description": "If specified, it will be called with the template strings array and substitution expressions, and the return value becomes the value of the template literal. See tagged templates."
        }
      ],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    },
    "Trailing commas": {
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Trailing_commas",
      "title": "Trailing commas",
      "description": "This feature is well established and works across many devices and browser versions. It\u00e2\u0080\u0099s been available across browsers since July 2015.\n\n* Some parts of this feature may have varying levels of support.\n\nTrailing commas (sometimes called \"final commas\") can be useful when adding new elements, parameters, or properties to JavaScript code. If you want to add a new property, you can add a new line without modifying the previously last line if that line already uses a trailing comma. This makes version-control diffs cleaner and editing code might be less troublesome.",
      "syntax": [],
      "parameters": [],
      "return_value": "",
      "examples": [],
      "browser_compatibility": {},
      "see_also": [],
      "inheritance": [],
      "properties": [],
      "methods": [],
      "children": []
    }
  },
  "contributors.txt": {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/contributors.txt",
    "title": "",
    "description": "",
    "syntax": [],
    "parameters": [],
    "return_value": "",
    "examples": [],
    "browser_compatibility": {},
    "see_also": [],
    "inheritance": [],
    "properties": [],
    "methods": [],
    "children": []
  }
}